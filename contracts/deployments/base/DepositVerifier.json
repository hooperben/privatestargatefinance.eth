{
  "address": "0x9558A77FF5f42922c49089E691254F8B79511377",
  "abi": [
    {
      "inputs": [],
      "name": "ProofLengthWrong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PublicInputsLengthWrong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ShpleminiFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SumcheckFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes32[]",
          "name": "publicInputs",
          "type": "bytes32[]"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x362e4cca30820827280154127e3d53286bca466ce4e977874527a03f300644ce",
  "receipt": {
    "to": null,
    "from": "0xef5f762010De2d72609A6243af59F29A0563c99c",
    "contractAddress": "0x9558A77FF5f42922c49089E691254F8B79511377",
    "transactionIndex": 201,
    "gasUsed": "4727395",
    "logsBloom": "0x
    "blockHash": "0xf900c84d667eea2ff6bd2989aee2eff7bf1e42b6b6bfe806993dcb673abe22e9",
    "transactionHash": "0x362e4cca30820827280154127e3d53286bca466ce4e977874527a03f300644ce",
    "logs": [],
    "blockNumber": 31871398,
    "cumulativeGasUsed": "42333779",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ff2cf19e98bd3f11c8dc979ea849e6a9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ProofLengthWrong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PublicInputsLengthWrong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ShpleminiFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SumcheckFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"publicInputs\",\"type\":\"bytes32[]\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/DepositVerifier.sol\":\"DepositVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verifiers/DepositVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2022 Aztec\\npragma solidity >=0.8.21;\\n\\nuint256 constant N = 256;\\nuint256 constant LOG_N = 8;\\nuint256 constant NUMBER_OF_PUBLIC_INPUTS = 3;\\nlibrary HonkVerificationKey {\\n    function loadVerificationKey() internal pure returns (Honk.VerificationKey memory) {\\n        Honk.VerificationKey memory vk = Honk.VerificationKey({\\n            circuitSize: uint256(256),\\n            logCircuitSize: uint256(8),\\n            publicInputsSize: uint256(3),\\n            ql: Honk.G1Point({ \\n               x: uint256(0x0706286ec8caeaf9a630bbb670fc97508fd6af1fa6a98ea51122cdf981e184c4),\\n               y: uint256(0x1d0dd40a1b56a77dfc3e7f3512765f7884bf76d8abe61655a26d496b75c3c6ce)\\n            }),\\n            qr: Honk.G1Point({ \\n               x: uint256(0x0d6425ab78b54bdc2e8420fe0d9515520d37a1f6d04dece2f57af185179e6a61),\\n               y: uint256(0x100a4864a063b3af3c46bcd8f6673d65a96da80bfc434ed118dab343be4f927a)\\n            }),\\n            qo: Honk.G1Point({ \\n               x: uint256(0x0ade7885903164e54a3ccc2429615001c0ff3e0ec5a4acb371a25d5e15d670e9),\\n               y: uint256(0x0522e70c6ed93b9b7578729b8310c267d0deb1c9695c3a233dd997ba701f67af)\\n            }),\\n            q4: Honk.G1Point({ \\n               x: uint256(0x22d2dc9c8a8d8d683f0e911d1d07bc066c0933c107ef9564fdca1cf2559d1a00),\\n               y: uint256(0x2b0dcf7d83ecf249f51717d2a2aac1af660c2eec742b86551a361ce26382c769)\\n            }),\\n            qm: Honk.G1Point({ \\n               x: uint256(0x08dbbddedaf64ee8decef3c386e365712391deb46d24ee93929354b9481c99cd),\\n               y: uint256(0x1ef73310e1a629ee1dca12b4525b84856d4b32af4379975ce3abf9b029d45efe)\\n            }),\\n            qc: Honk.G1Point({ \\n               x: uint256(0x180253fd74458f495d11e366220e0b8b1ace2ea1acd2460888383b402273bb7a),\\n               y: uint256(0x152f2175d510f4c6b7dd34dcd65c1565eebe2a46bf6bf5d3b730364b9f528f51)\\n            }),\\n            qArith: Honk.G1Point({ \\n               x: uint256(0x1ea52a7c58f78261ca684a542381ead453ce8dbceb58c95e3564b8d67c518e1d),\\n               y: uint256(0x09875c09d2c36ba3caab25772ec7c0bf1d5e81447c510e06e1b88920aa250d36)\\n            }),\\n            qDeltaRange: Honk.G1Point({ \\n               x: uint256(0x1f497cbf5284ff29a2d336e599199929a17181c7934fc3fdbd352eac5cb521b9),\\n               y: uint256(0x13ea38a0bd2aa751a490a724fac818072bd9c0c6beda1fdee6d4ff0432ba9e1b)\\n            }),\\n            qElliptic: Honk.G1Point({ \\n               x: uint256(0x0384638dd92e0abd1d0455ad4b429bee5960e2f4e0eef28e946561e55a4d9807),\\n               y: uint256(0x0edd0d417777cdfe14def171f26ffd8849f800a9aa2563c403966bb405f3a5d3)\\n            }),\\n            qAux: Honk.G1Point({ \\n               x: uint256(0x26131fc1251eb7746e72a19f9f9b250f079744ec926fc2a41fb8a0489d1fb444),\\n               y: uint256(0x03588be01690f20304e3d200c3b81a867f03abc37431898437d94c0822213fbb)\\n            }),\\n            qLookup: Honk.G1Point({ \\n               x: uint256(0x2594d00a131b347f472a021eac09e25eacba35749a9ba8f8c7f4a726ff63a910),\\n               y: uint256(0x2499be5abe1cf5463534a1d0613f82449f1989f1186f2d0b67295bda7f8a0f55)\\n            }),\\n            qPoseidon2External: Honk.G1Point({ \\n               x: uint256(0x2342ad3c9f80d265726011de0e98f729369164805b4229a3bf7e04c500d94cdf),\\n               y: uint256(0x1756f15def234f58df4a8f68b4f10b26ecda7e6ecebaa8862001746309ea9248)\\n            }),\\n            qPoseidon2Internal: Honk.G1Point({ \\n               x: uint256(0x2c20e6cb1cfaf478d9673a371652e5133aed49a04ffe951f2dc443984785c946),\\n               y: uint256(0x1baeded16e0fdb3baf90557e93d7dcbfd0761e64d7967bda2811966fbbfaa636)\\n            }),\\n            s1: Honk.G1Point({ \\n               x: uint256(0x138d1fb08ddfa477283ae2dec71c3ed717dae8411f3f37b27bf5fe9488d1e9be),\\n               y: uint256(0x02676f66a1177457c55d836bfdf72f4d0d9b367e008e96f9ec265085bf8c1d20)\\n            }),\\n            s2: Honk.G1Point({ \\n               x: uint256(0x1882013328407779c80f6f7065e661c4a9ef0f06af192c10b13c5e2601a1f8d3),\\n               y: uint256(0x02ddba1dcb884d05cf49175fcef625cfadffdf89ed5ce3ae5db1f167da530a54)\\n            }),\\n            s3: Honk.G1Point({ \\n               x: uint256(0x198a1735a9fe5fb6fbaa6d1b2e25108d1e3435ac9d56b8187c88de53b48b7bb9),\\n               y: uint256(0x1fa57aeaa19667215424dbbfaaac52f9d480a3128fe09f493aa747a1b0048542)\\n            }),\\n            s4: Honk.G1Point({ \\n               x: uint256(0x2b95f58e44085fde26fe49518d4608b25dc00c111ded19ae4b89737e3bccf3c9),\\n               y: uint256(0x03b870c5743e68c8544ab4818213dede89ad8e640ed43a6538d1eeab011ae16b)\\n            }),\\n            t1: Honk.G1Point({ \\n               x: uint256(0x1fb7c5d789d32e42a08e41296286139f603c7607ce186d0cce6e472dfe021473),\\n               y: uint256(0x09d80a7c25410f51739aadc54ad122874e4551efc35bd23807ecf23a79ef418a)\\n            }),\\n            t2: Honk.G1Point({ \\n               x: uint256(0x108788a192d4d3c38e445629bb550acf212f9b2049b6fb1cc76900bd482fb5b0),\\n               y: uint256(0x195266ac0788c227762333892ad282a4679450ae72e8e8b4a1ead0e63d4f4e04)\\n            }),\\n            t3: Honk.G1Point({ \\n               x: uint256(0x192a87ba208ab02639f2453bde4d15e8c489e522f16c07fd8e312a10142484d8),\\n               y: uint256(0x0978af3f655d807c77436eec1810420c3170702a20ae32933baa816253797b15)\\n            }),\\n            t4: Honk.G1Point({ \\n               x: uint256(0x1a552bd8d3265d1f23e7ff166cf20fffa5c0688c867cfd3a2ea65452d8ad60a4),\\n               y: uint256(0x1cb1414f7b9f8edb7c7a0d61f66e24e632a4050d9b3be0d6c35109aa99693039)\\n            }),\\n            id1: Honk.G1Point({ \\n               x: uint256(0x01ae22bf031b8c1930dec03b8f4704c49c28cd98474dca7d07875473949ef998),\\n               y: uint256(0x03f6eee33948202497991c8673119d4abf66d70d68481c6b80976a643a5b9325)\\n            }),\\n            id2: Honk.G1Point({ \\n               x: uint256(0x22446f485968f51280dc48cc30abf8171154f4910b8798ba65479bdf88c8c461),\\n               y: uint256(0x0e13564c484a1b26820e2601e39196e1b936eb5dd4b9cfeb2cd330b28ff915f3)\\n            }),\\n            id3: Honk.G1Point({ \\n               x: uint256(0x1b5ff984e06c61d45bbe6f3f6a0e799d975e986b0916547be10ca43147839e02),\\n               y: uint256(0x25e0f2d4bb40608a68f3ee8da180c87ca8c87bc35ea252b4a68aa64e54a36bf6)\\n            }),\\n            id4: Honk.G1Point({ \\n               x: uint256(0x2cab3861baed5b5ccd0830a5e20c9aab77cd8f4f568bf79b0376d9036133c577),\\n               y: uint256(0x07dd4372e0ddf9927f4e175f9d2472040e16b1dbb7661e1abb1090ccb205dd99)\\n            }),\\n            lagrangeFirst: Honk.G1Point({ \\n               x: uint256(0x0000000000000000000000000000000000000000000000000000000000000001),\\n               y: uint256(0x0000000000000000000000000000000000000000000000000000000000000002)\\n            }),\\n            lagrangeLast: Honk.G1Point({ \\n               x: uint256(0x29c8a94ab2f7f2c7110344ab367552bfe2cf1e4b374083e44458530da00b67f6),\\n               y: uint256(0x2c5020e20f85671e916492988dd560862e6cd38a99501c4d5d3ff71b72a79891)\\n            })\\n        });\\n        return vk;\\n    }\\n}\\n\\npragma solidity ^0.8.27;\\n\\ntype Fr is uint256;\\n\\nusing { add as + } for Fr global;\\nusing { sub as - } for Fr global;\\nusing { mul as * } for Fr global;\\nusing { exp as ^ } for Fr global;\\nusing { notEqual as != } for Fr global;\\nusing { equal as == } for Fr global;\\n\\nuint256 constant MODULUS =\\n    21888242871839275222246405745257275088548364400416034343698204186575808495617; // Prime field order\\n\\nFr constant MINUS_ONE = Fr.wrap(MODULUS - 1);\\n\\n// Instantiation\\nlibrary FrLib\\n{\\n    function from(uint256 value) internal pure returns(Fr)\\n    {\\n        return Fr.wrap(value % MODULUS);\\n    }\\n\\n    function fromBytes32(bytes32 value) internal pure returns(Fr)\\n    {\\n        return Fr.wrap(uint256(value) % MODULUS);\\n    }\\n\\n    function toBytes32(Fr value) internal pure returns(bytes32)\\n    {\\n        return bytes32(Fr.unwrap(value));\\n    }\\n\\n    function invert(Fr value) internal view returns(Fr)\\n    {\\n        uint256 v = Fr.unwrap(value);\\n        uint256 result;\\n\\n        // Call the modexp precompile to invert in the field\\n        assembly\\n        {\\n            let free := mload(0x40)\\n            mstore(free, 0x20)\\n            mstore(add(free, 0x20), 0x20)\\n            mstore(add(free, 0x40), 0x20)\\n            mstore(add(free, 0x60), v)\\n            mstore(add(free, 0x80), sub(MODULUS, 2))\\n            mstore(add(free, 0xa0), MODULUS)\\n            let success := staticcall(gas(), 0x05, free, 0xc0, 0x00, 0x20)\\n            if iszero(success) {\\n                revert(0, 0)\\n            }\\n            result := mload(0x00)\\n        }\\n\\n        return Fr.wrap(result);\\n    }\\n\\n    function pow(Fr base, uint256 v) internal view returns(Fr)\\n    {\\n        uint256 b = Fr.unwrap(base);\\n        uint256 result;\\n\\n        // Call the modexp precompile to invert in the field\\n        assembly\\n        {\\n            let free := mload(0x40)\\n            mstore(free, 0x20)\\n            mstore(add(free, 0x20), 0x20)\\n            mstore(add(free, 0x40), 0x20)\\n            mstore(add(free, 0x60), b)\\n            mstore(add(free, 0x80), v)\\n            mstore(add(free, 0xa0), MODULUS)\\n            let success := staticcall(gas(), 0x05, free, 0xc0, 0x00, 0x20)\\n            if iszero(success) {\\n                revert(0, 0)\\n            }\\n            result := mload(0x00)\\n        }\\n\\n        return Fr.wrap(result);\\n    }\\n\\n    function div(Fr numerator, Fr denominator) internal view returns(Fr)\\n    {\\n        return numerator * invert(denominator);\\n    }\\n\\n    function sqr(Fr value) internal pure returns (Fr) {\\n        return value * value;\\n    }\\n\\n    function unwrap(Fr value) internal pure returns (uint256) {\\n        return Fr.unwrap(value);\\n    }\\n\\n    function neg(Fr value) internal pure returns (Fr) {\\n        return Fr.wrap(MODULUS - Fr.unwrap(value));\\n    }\\n}\\n\\n// Free functions\\nfunction add(Fr a, Fr b) pure returns(Fr)\\n{\\n    return Fr.wrap(addmod(Fr.unwrap(a), Fr.unwrap(b), MODULUS));\\n}\\n\\nfunction mul(Fr a, Fr b) pure returns(Fr)\\n{\\n    return Fr.wrap(mulmod(Fr.unwrap(a), Fr.unwrap(b), MODULUS));\\n}\\n\\nfunction sub(Fr a, Fr b) pure returns(Fr)\\n{\\n    return Fr.wrap(addmod(Fr.unwrap(a), MODULUS - Fr.unwrap(b), MODULUS));\\n}\\n\\nfunction exp(Fr base, Fr exponent) pure returns(Fr)\\n{\\n    if (Fr.unwrap(exponent) == 0) return Fr.wrap(1);\\n\\n    for (uint256 i = 1; i < Fr.unwrap(exponent); i += i) {\\n        base = base * base;\\n    }\\n    return base;\\n}\\n\\nfunction notEqual(Fr a, Fr b) pure returns(bool)\\n{\\n    return Fr.unwrap(a) != Fr.unwrap(b);\\n}\\n\\nfunction equal(Fr a, Fr b) pure returns(bool)\\n{\\n    return Fr.unwrap(a) == Fr.unwrap(b);\\n}\\n\\nuint256 constant CONST_PROOF_SIZE_LOG_N = 28;\\n\\nuint256 constant NUMBER_OF_SUBRELATIONS = 26;\\nuint256 constant BATCHED_RELATION_PARTIAL_LENGTH = 8;\\nuint256 constant NUMBER_OF_ENTITIES = 40;\\nuint256 constant NUMBER_UNSHIFTED = 35;\\nuint256 constant NUMBER_TO_BE_SHIFTED = 5;\\n\\n// Alphas are used as relation separators so there should be NUMBER_OF_SUBRELATIONS - 1\\nuint256 constant NUMBER_OF_ALPHAS = 25;\\n\\n// Prime field order\\nuint256 constant Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583; // EC group order. F_q\\nuint256 constant P = 21888242871839275222246405745257275088548364400416034343698204186575808495617; // Prime field order, F_r\\n\\n// ENUM FOR WIRES\\nenum WIRE {\\n    Q_M,\\n    Q_C,\\n    Q_L,\\n    Q_R,\\n    Q_O,\\n    Q_4,\\n    Q_LOOKUP,\\n    Q_ARITH,\\n    Q_RANGE,\\n    Q_ELLIPTIC,\\n    Q_AUX,\\n    Q_POSEIDON2_EXTERNAL,\\n    Q_POSEIDON2_INTERNAL,\\n    SIGMA_1,\\n    SIGMA_2,\\n    SIGMA_3,\\n    SIGMA_4,\\n    ID_1,\\n    ID_2,\\n    ID_3,\\n    ID_4,\\n    TABLE_1,\\n    TABLE_2,\\n    TABLE_3,\\n    TABLE_4,\\n    LAGRANGE_FIRST,\\n    LAGRANGE_LAST,\\n    W_L,\\n    W_R,\\n    W_O,\\n    W_4,\\n    Z_PERM,\\n    LOOKUP_INVERSES,\\n    LOOKUP_READ_COUNTS,\\n    LOOKUP_READ_TAGS,\\n    W_L_SHIFT,\\n    W_R_SHIFT,\\n    W_O_SHIFT,\\n    W_4_SHIFT,\\n    Z_PERM_SHIFT\\n}\\n\\nlibrary Honk {\\n    struct G1Point {\\n        uint256 x;\\n        uint256 y;\\n    }\\n\\n    struct G1ProofPoint {\\n        uint256 x_0;\\n        uint256 x_1;\\n        uint256 y_0;\\n        uint256 y_1;\\n    }\\n\\n    struct VerificationKey {\\n        // Misc Params\\n        uint256 circuitSize;\\n        uint256 logCircuitSize;\\n        uint256 publicInputsSize;\\n        // Selectors\\n        G1Point qm;\\n        G1Point qc;\\n        G1Point ql;\\n        G1Point qr;\\n        G1Point qo;\\n        G1Point q4;\\n        G1Point qLookup; // Lookup\\n        G1Point qArith; // Arithmetic widget\\n        G1Point qDeltaRange; // Delta Range sort\\n        G1Point qAux; // Auxillary\\n        G1Point qElliptic; // Auxillary\\n        G1Point qPoseidon2External;\\n        G1Point qPoseidon2Internal;\\n        // Copy cnstraints\\n        G1Point s1;\\n        G1Point s2;\\n        G1Point s3;\\n        G1Point s4;\\n        // Copy identity\\n        G1Point id1;\\n        G1Point id2;\\n        G1Point id3;\\n        G1Point id4;\\n        // Precomputed lookup table\\n        G1Point t1;\\n        G1Point t2;\\n        G1Point t3;\\n        G1Point t4;\\n        // Fixed first and last\\n        G1Point lagrangeFirst;\\n        G1Point lagrangeLast;\\n    }\\n\\n    struct RelationParameters {\\n        // challenges\\n        Fr eta;\\n        Fr etaTwo;\\n        Fr etaThree;\\n        Fr beta;\\n        Fr gamma;\\n        // derived\\n        Fr publicInputsDelta;\\n    }\\n\\n\\n    struct Proof {\\n        // Free wires\\n        Honk.G1ProofPoint w1;\\n        Honk.G1ProofPoint w2;\\n        Honk.G1ProofPoint w3;\\n        Honk.G1ProofPoint w4;\\n        // Lookup helpers - Permutations\\n        Honk.G1ProofPoint zPerm;\\n        // Lookup helpers - logup\\n        Honk.G1ProofPoint lookupReadCounts;\\n        Honk.G1ProofPoint lookupReadTags;\\n        Honk.G1ProofPoint lookupInverses;\\n        // Sumcheck\\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH][CONST_PROOF_SIZE_LOG_N] sumcheckUnivariates;\\n        Fr[NUMBER_OF_ENTITIES] sumcheckEvaluations;\\n        // Shplemini\\n        Honk.G1ProofPoint[CONST_PROOF_SIZE_LOG_N - 1] geminiFoldComms;\\n        Fr[CONST_PROOF_SIZE_LOG_N] geminiAEvaluations;\\n        Honk.G1ProofPoint shplonkQ;\\n        Honk.G1ProofPoint kzgQuotient;\\n    }\\n}\\n\\n// Transcript library to generate fiat shamir challenges\\nstruct Transcript {\\n    // Oink\\n    Honk.RelationParameters relationParameters;\\n    Fr[NUMBER_OF_ALPHAS] alphas;\\n    Fr[CONST_PROOF_SIZE_LOG_N] gateChallenges;\\n    // Sumcheck\\n    Fr[CONST_PROOF_SIZE_LOG_N] sumCheckUChallenges;\\n    // Gemini\\n    Fr rho;\\n    Fr geminiR;\\n    // Shplonk\\n    Fr shplonkNu;\\n    Fr shplonkZ;\\n}\\n\\nlibrary TranscriptLib {\\n    function generateTranscript(Honk.Proof memory proof, bytes32[] calldata publicInputs, uint256 circuitSize, uint256 publicInputsSize, uint256 pubInputsOffset)\\n        internal\\n        pure\\n        returns (Transcript memory t)\\n    {\\n        Fr previousChallenge;\\n        (t.relationParameters, previousChallenge) =\\n            generateRelationParametersChallenges(proof, publicInputs, circuitSize, publicInputsSize, pubInputsOffset, previousChallenge);\\n\\n        (t.alphas, previousChallenge) = generateAlphaChallenges(previousChallenge, proof);\\n\\n        (t.gateChallenges, previousChallenge) = generateGateChallenges(previousChallenge);\\n\\n        (t.sumCheckUChallenges, previousChallenge) = generateSumcheckChallenges(proof, previousChallenge);\\n\\n        (t.rho, previousChallenge) = generateRhoChallenge(proof, previousChallenge);\\n\\n        (t.geminiR, previousChallenge) = generateGeminiRChallenge(proof, previousChallenge);\\n\\n        (t.shplonkNu, previousChallenge) = generateShplonkNuChallenge(proof, previousChallenge);\\n\\n        (t.shplonkZ, previousChallenge) = generateShplonkZChallenge(proof, previousChallenge);\\n\\n        return t;\\n    }\\n\\n    function splitChallenge(Fr challenge) internal pure returns (Fr first, Fr second) {\\n        uint256 challengeU256 = uint256(Fr.unwrap(challenge));\\n        uint256 lo = challengeU256 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        uint256 hi = challengeU256 >> 128;\\n        first = FrLib.fromBytes32(bytes32(lo));\\n        second = FrLib.fromBytes32(bytes32(hi));\\n    }\\n\\n    function generateRelationParametersChallenges(\\n        Honk.Proof memory proof,\\n        bytes32[] calldata publicInputs,\\n        uint256 circuitSize,\\n        uint256 publicInputsSize,\\n        uint256 pubInputsOffset,\\n        Fr previousChallenge\\n    ) internal pure returns (Honk.RelationParameters memory rp, Fr nextPreviousChallenge) {\\n        (rp.eta, rp.etaTwo, rp.etaThree, previousChallenge) =\\n            generateEtaChallenge(proof, publicInputs, circuitSize, publicInputsSize, pubInputsOffset);\\n\\n        (rp.beta, rp.gamma, nextPreviousChallenge) = generateBetaAndGammaChallenges(previousChallenge, proof);\\n\\n    }\\n\\n    function generateEtaChallenge(Honk.Proof memory proof, bytes32[] calldata publicInputs, uint256 circuitSize, uint256 publicInputsSize, uint256 pubInputsOffset)\\n        internal\\n        pure\\n        returns (Fr eta, Fr etaTwo, Fr etaThree, Fr previousChallenge)\\n    {\\n        bytes32[] memory round0 = new bytes32[](3 + publicInputsSize + 12);\\n        round0[0] = bytes32(circuitSize);\\n        round0[1] = bytes32(publicInputsSize);\\n        round0[2] = bytes32(pubInputsOffset);\\n        for (uint256 i = 0; i < publicInputsSize; i++) {\\n            round0[3 + i] = bytes32(publicInputs[i]);\\n        }\\n\\n        // Create the first challenge\\n        // Note: w4 is added to the challenge later on\\n        round0[3 + publicInputsSize] = bytes32(proof.w1.x_0);\\n        round0[3 + publicInputsSize + 1] = bytes32(proof.w1.x_1);\\n        round0[3 + publicInputsSize + 2] = bytes32(proof.w1.y_0);\\n        round0[3 + publicInputsSize + 3] = bytes32(proof.w1.y_1);\\n        round0[3 + publicInputsSize + 4] = bytes32(proof.w2.x_0);\\n        round0[3 + publicInputsSize + 5] = bytes32(proof.w2.x_1);\\n        round0[3 + publicInputsSize + 6] = bytes32(proof.w2.y_0);\\n        round0[3 + publicInputsSize + 7] = bytes32(proof.w2.y_1);\\n        round0[3 + publicInputsSize + 8] = bytes32(proof.w3.x_0);\\n        round0[3 + publicInputsSize + 9] = bytes32(proof.w3.x_1);\\n        round0[3 + publicInputsSize + 10] = bytes32(proof.w3.y_0);\\n        round0[3 + publicInputsSize + 11] = bytes32(proof.w3.y_1);\\n\\n        previousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(round0)));\\n        (eta, etaTwo) = splitChallenge(previousChallenge);\\n        previousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(previousChallenge))));\\n        Fr unused;\\n        (etaThree, unused) = splitChallenge(previousChallenge);\\n    }\\n\\n    function generateBetaAndGammaChallenges(Fr previousChallenge, Honk.Proof memory proof)\\n        internal\\n        pure\\n        returns (Fr beta, Fr gamma, Fr nextPreviousChallenge)\\n    {\\n        bytes32[13] memory round1;\\n        round1[0] = FrLib.toBytes32(previousChallenge);\\n        round1[1] = bytes32(proof.lookupReadCounts.x_0);\\n        round1[2] = bytes32(proof.lookupReadCounts.x_1);\\n        round1[3] = bytes32(proof.lookupReadCounts.y_0);\\n        round1[4] = bytes32(proof.lookupReadCounts.y_1);\\n        round1[5] = bytes32(proof.lookupReadTags.x_0);\\n        round1[6] = bytes32(proof.lookupReadTags.x_1);\\n        round1[7] = bytes32(proof.lookupReadTags.y_0);\\n        round1[8] = bytes32(proof.lookupReadTags.y_1);\\n        round1[9] = bytes32(proof.w4.x_0);\\n        round1[10] = bytes32(proof.w4.x_1);\\n        round1[11] = bytes32(proof.w4.y_0);\\n        round1[12] = bytes32(proof.w4.y_1);\\n\\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(round1)));\\n        (beta, gamma) = splitChallenge(nextPreviousChallenge);\\n    }\\n\\n    // Alpha challenges non-linearise the gate contributions\\n    function generateAlphaChallenges(Fr previousChallenge, Honk.Proof memory proof)\\n        internal\\n        pure\\n        returns (Fr[NUMBER_OF_ALPHAS] memory alphas, Fr nextPreviousChallenge)\\n    {\\n        // Generate the original sumcheck alpha 0 by hashing zPerm and zLookup\\n        uint256[9] memory alpha0;\\n        alpha0[0] = Fr.unwrap(previousChallenge);\\n        alpha0[1] = proof.lookupInverses.x_0;\\n        alpha0[2] = proof.lookupInverses.x_1;\\n        alpha0[3] = proof.lookupInverses.y_0;\\n        alpha0[4] = proof.lookupInverses.y_1;\\n        alpha0[5] = proof.zPerm.x_0;\\n        alpha0[6] = proof.zPerm.x_1;\\n        alpha0[7] = proof.zPerm.y_0;\\n        alpha0[8] = proof.zPerm.y_1;\\n\\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(alpha0)));\\n        (alphas[0], alphas[1]) = splitChallenge(nextPreviousChallenge);\\n\\n        for (uint256 i = 1; i < NUMBER_OF_ALPHAS / 2; i++) {\\n            nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(nextPreviousChallenge))));\\n            (alphas[2 * i], alphas[2 * i + 1]) = splitChallenge(nextPreviousChallenge);\\n        }\\n        if (((NUMBER_OF_ALPHAS & 1) == 1) && (NUMBER_OF_ALPHAS > 2)) {\\n            nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(nextPreviousChallenge))));\\n            Fr unused;\\n            (alphas[NUMBER_OF_ALPHAS - 1], unused) = splitChallenge(nextPreviousChallenge);\\n        }\\n    }\\n\\n    function generateGateChallenges(Fr previousChallenge)\\n        internal\\n        pure\\n        returns (Fr[CONST_PROOF_SIZE_LOG_N] memory gateChallenges, Fr nextPreviousChallenge)\\n    {\\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\\n            previousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(previousChallenge))));\\n            Fr unused;\\n            (gateChallenges[i], unused) = splitChallenge(previousChallenge);\\n        }\\n        nextPreviousChallenge = previousChallenge;\\n    }\\n\\n    function generateSumcheckChallenges(Honk.Proof memory proof, Fr prevChallenge)\\n        internal\\n        pure\\n        returns (Fr[CONST_PROOF_SIZE_LOG_N] memory sumcheckChallenges, Fr nextPreviousChallenge)\\n    {\\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\\n            Fr[BATCHED_RELATION_PARTIAL_LENGTH + 1] memory univariateChal;\\n            univariateChal[0] = prevChallenge;\\n\\n            for (uint256 j = 0; j < BATCHED_RELATION_PARTIAL_LENGTH; j++) {\\n                univariateChal[j + 1] = proof.sumcheckUnivariates[i][j];\\n            }\\n            prevChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(univariateChal)));\\n            Fr unused;\\n            (sumcheckChallenges[i], unused) = splitChallenge(prevChallenge);\\n        }\\n        nextPreviousChallenge = prevChallenge;\\n    }\\n\\n    function generateRhoChallenge(Honk.Proof memory proof, Fr prevChallenge)\\n        internal\\n        pure\\n        returns (Fr rho, Fr nextPreviousChallenge)\\n    {\\n        Fr[NUMBER_OF_ENTITIES + 1] memory rhoChallengeElements;\\n        rhoChallengeElements[0] = prevChallenge;\\n\\n        for (uint256 i = 0; i < NUMBER_OF_ENTITIES; i++) {\\n            rhoChallengeElements[i + 1] = proof.sumcheckEvaluations[i];\\n        }\\n\\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(rhoChallengeElements)));\\n        Fr unused;\\n        (rho, unused) = splitChallenge(nextPreviousChallenge);\\n    }\\n\\n    function generateGeminiRChallenge(Honk.Proof memory proof, Fr prevChallenge)\\n        internal\\n        pure\\n        returns (Fr geminiR, Fr nextPreviousChallenge)\\n    {\\n        uint256[(CONST_PROOF_SIZE_LOG_N - 1) * 4 + 1] memory gR;\\n        gR[0] = Fr.unwrap(prevChallenge);\\n\\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; i++) {\\n            gR[1 + i * 4] = proof.geminiFoldComms[i].x_0;\\n            gR[2 + i * 4] = proof.geminiFoldComms[i].x_1;\\n            gR[3 + i * 4] = proof.geminiFoldComms[i].y_0;\\n            gR[4 + i * 4] = proof.geminiFoldComms[i].y_1;\\n        }\\n\\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(gR)));\\n        Fr unused;\\n        (geminiR, unused) = splitChallenge(nextPreviousChallenge);\\n    }\\n\\n    function generateShplonkNuChallenge(Honk.Proof memory proof, Fr prevChallenge)\\n        internal\\n        pure\\n        returns (Fr shplonkNu, Fr nextPreviousChallenge)\\n    {\\n        uint256[(CONST_PROOF_SIZE_LOG_N) + 1] memory shplonkNuChallengeElements;\\n        shplonkNuChallengeElements[0] = Fr.unwrap(prevChallenge);\\n\\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\\n            shplonkNuChallengeElements[i + 1] = Fr.unwrap(proof.geminiAEvaluations[i]);\\n        }\\n\\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(shplonkNuChallengeElements)));\\n        Fr unused;\\n        (shplonkNu, unused) = splitChallenge(nextPreviousChallenge);\\n    }\\n\\n    function generateShplonkZChallenge(Honk.Proof memory proof, Fr prevChallenge)\\n        internal\\n        pure\\n        returns (Fr shplonkZ, Fr nextPreviousChallenge)\\n    {\\n        uint256[5] memory shplonkZChallengeElements;\\n        shplonkZChallengeElements[0] = Fr.unwrap(prevChallenge);\\n\\n        shplonkZChallengeElements[1] = proof.shplonkQ.x_0;\\n        shplonkZChallengeElements[2] = proof.shplonkQ.x_1;\\n        shplonkZChallengeElements[3] = proof.shplonkQ.y_0;\\n        shplonkZChallengeElements[4] = proof.shplonkQ.y_1;\\n\\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(shplonkZChallengeElements)));\\n        Fr unused;\\n        (shplonkZ, unused) = splitChallenge(nextPreviousChallenge);\\n    }\\n\\n    function loadProof(bytes calldata proof) internal pure returns (Honk.Proof memory p) {\\n        // Commitments\\n        p.w1 = bytesToG1ProofPoint(proof[0x0:0x80]);\\n\\n        p.w2 = bytesToG1ProofPoint(proof[0x80:0x100]);\\n        p.w3 = bytesToG1ProofPoint(proof[0x100:0x180]);\\n\\n        // Lookup / Permutation Helper Commitments\\n        p.lookupReadCounts = bytesToG1ProofPoint(proof[0x180:0x200]);\\n        p.lookupReadTags = bytesToG1ProofPoint(proof[0x200:0x280]);\\n        p.w4 = bytesToG1ProofPoint(proof[0x280:0x300]);\\n        p.lookupInverses = bytesToG1ProofPoint(proof[0x300:0x380]);\\n        p.zPerm = bytesToG1ProofPoint(proof[0x380:0x400]);\\n        uint256 boundary = 0x400;\\n\\n        // Sumcheck univariates\\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\\n            for (uint256 j = 0; j < BATCHED_RELATION_PARTIAL_LENGTH; j++) {\\n                p.sumcheckUnivariates[i][j] = bytesToFr(proof[boundary:boundary + 0x20]);\\n                boundary += 0x20;\\n            }\\n        }\\n        // Sumcheck evaluations\\n        for (uint256 i = 0; i < NUMBER_OF_ENTITIES; i++) {\\n            p.sumcheckEvaluations[i] = bytesToFr(proof[boundary:boundary + 0x20]);\\n            boundary += 0x20;\\n        }\\n\\n        // Gemini\\n        // Read gemini fold univariates\\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; i++) {\\n            p.geminiFoldComms[i] = bytesToG1ProofPoint(proof[boundary:boundary + 0x80]);\\n            boundary += 0x80;\\n        }\\n\\n        // Read gemini a evaluations\\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\\n            p.geminiAEvaluations[i] = bytesToFr(proof[boundary:boundary + 0x20]);\\n            boundary += 0x20;\\n        }\\n\\n        // Shplonk\\n        p.shplonkQ = bytesToG1ProofPoint(proof[boundary:boundary + 0x80]);\\n        boundary = boundary + 0x80;\\n        // KZG\\n        p.kzgQuotient = bytesToG1ProofPoint(proof[boundary:boundary + 0x80]);\\n    }\\n}\\n\\n\\n// Fr utility\\n\\nfunction bytesToFr(bytes calldata proofSection) pure returns (Fr scalar) {\\n    require(proofSection.length == 0x20, \\\"invalid bytes scalar\\\");\\n    scalar = FrLib.fromBytes32(bytes32(proofSection));\\n}\\n\\n// EC Point utilities\\nfunction convertProofPoint(Honk.G1ProofPoint memory input) pure returns (Honk.G1Point memory) {\\n    return Honk.G1Point({x: input.x_0 | (input.x_1 << 136), y: input.y_0 | (input.y_1 << 136)});\\n}\\n\\nfunction bytesToG1ProofPoint(bytes calldata proofSection) pure returns (Honk.G1ProofPoint memory point) {\\n    require(proofSection.length == 0x80, \\\"invalid bytes point\\\");\\n    point = Honk.G1ProofPoint({\\n        x_0: uint256(bytes32(proofSection[0x00:0x20])),\\n        x_1: uint256(bytes32(proofSection[0x20:0x40])),\\n        y_0: uint256(bytes32(proofSection[0x40:0x60])),\\n        y_1: uint256(bytes32(proofSection[0x60:0x80]))\\n    });\\n}\\n\\nfunction negateInplace(Honk.G1Point memory point) pure returns (Honk.G1Point memory) {\\n    point.y = (Q - point.y) % Q;\\n    return point;\\n}\\n\\n function pairing(Honk.G1Point memory rhs, Honk.G1Point memory lhs) view returns (bool) {\\n        bytes memory input = abi.encodePacked(\\n            rhs.x,\\n            rhs.y,\\n            // Fixed G1 point\\n            uint256(0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2),\\n            uint256(0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed),\\n            uint256(0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b),\\n            uint256(0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa),\\n            lhs.x,\\n            lhs.y,\\n            // G1 point from VK\\n            uint256(0x260e01b251f6f1c7e7ff4e580791dee8ea51d87a358e038b4efe30fac09383c1),\\n            uint256(0x0118c4d5b837bcc2bc89b5b398b5974e9f5944073b32078b7e231fec938883b0),\\n            uint256(0x04fc6369f7110fe3d25156c1bb9a72859cf2a04641f99ba4ee413c80da6a5fe4),\\n            uint256(0x22febda3c0c0632a56475b4214e5615e11e6dd3f96e6cea2854a87d4dacc5e55)\\n        );\\n\\n        (bool success, bytes memory result) = address(0x08).staticcall(input);\\n        bool decodedResult = abi.decode(result, (bool));\\n        return success && decodedResult;\\n    }\\n\\n\\nlibrary RelationsLib {\\n    Fr internal constant GRUMPKIN_CURVE_B_PARAMETER_NEGATED = Fr.wrap(17); // -(-17)\\n\\n    function accumulateRelationEvaluations(\\n         Fr[NUMBER_OF_ENTITIES] memory purportedEvaluations,\\n        Honk.RelationParameters memory rp,\\n        Fr[NUMBER_OF_ALPHAS] memory alphas,\\n        Fr powPartialEval\\n    ) internal pure returns (Fr accumulator) {\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evaluations;\\n\\n        // Accumulate all relations in Ultra Honk - each with varying number of subrelations\\n        accumulateArithmeticRelation(purportedEvaluations, evaluations, powPartialEval);\\n        accumulatePermutationRelation(purportedEvaluations, rp, evaluations, powPartialEval);\\n        accumulateLogDerivativeLookupRelation(purportedEvaluations, rp, evaluations, powPartialEval);\\n        accumulateDeltaRangeRelation(purportedEvaluations, evaluations, powPartialEval);\\n        accumulateEllipticRelation(purportedEvaluations, evaluations, powPartialEval);\\n        accumulateAuxillaryRelation(purportedEvaluations, rp, evaluations, powPartialEval);\\n        accumulatePoseidonExternalRelation(purportedEvaluations, evaluations, powPartialEval);\\n        accumulatePoseidonInternalRelation(purportedEvaluations, evaluations, powPartialEval);\\n        // batch the subrelations with the alpha challenges to obtain the full honk relation\\n        accumulator = scaleAndBatchSubrelations(evaluations, alphas);\\n    }\\n\\n    /**\\n     * Aesthetic helper function that is used to index by enum into proof.sumcheckEvaluations, it avoids\\n     * the relation checking code being cluttered with uint256 type casting, which is often a different colour in code\\n     * editors, and thus is noisy.\\n     */\\n    function wire(Fr[NUMBER_OF_ENTITIES] memory p, WIRE _wire) internal pure returns (Fr) {\\n        return p[uint256(_wire)];\\n    }\\n\\n    uint256 internal constant NEG_HALF_MODULO_P = 0x183227397098d014dc2822db40c0ac2e9419f4243cdcb848a1f0fac9f8000000;\\n    /**\\n     * Ultra Arithmetic Relation\\n     *\\n     */\\n    function accumulateArithmeticRelation(\\n        Fr[NUMBER_OF_ENTITIES] memory p,\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\\n        Fr domainSep\\n    ) internal pure {\\n        // Relation 0\\n        Fr q_arith = wire(p, WIRE.Q_ARITH);\\n        {\\n            Fr neg_half = Fr.wrap(NEG_HALF_MODULO_P);\\n\\n            Fr accum = (q_arith - Fr.wrap(3)) * (wire(p, WIRE.Q_M) * wire(p, WIRE.W_R) * wire(p, WIRE.W_L)) * neg_half;\\n            accum = accum + (wire(p, WIRE.Q_L) * wire(p, WIRE.W_L)) + (wire(p, WIRE.Q_R) * wire(p, WIRE.W_R))\\n                + (wire(p, WIRE.Q_O) * wire(p, WIRE.W_O)) + (wire(p, WIRE.Q_4) * wire(p, WIRE.W_4)) + wire(p, WIRE.Q_C);\\n            accum = accum + (q_arith - Fr.wrap(1)) * wire(p, WIRE.W_4_SHIFT);\\n            accum = accum * q_arith;\\n            accum = accum * domainSep;\\n            evals[0] = accum;\\n        }\\n\\n        // Relation 1\\n        {\\n            Fr accum = wire(p, WIRE.W_L) + wire(p, WIRE.W_4) - wire(p, WIRE.W_L_SHIFT) + wire(p, WIRE.Q_M);\\n            accum = accum * (q_arith - Fr.wrap(2));\\n            accum = accum * (q_arith - Fr.wrap(1));\\n            accum = accum * q_arith;\\n            accum = accum * domainSep;\\n            evals[1] = accum;\\n        }\\n    }\\n\\n    function accumulatePermutationRelation(\\n        Fr[NUMBER_OF_ENTITIES] memory p,\\n        Honk.RelationParameters memory rp,\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\\n        Fr domainSep\\n    ) internal pure {\\n        Fr grand_product_numerator;\\n        Fr grand_product_denominator;\\n\\n        {\\n            Fr num = wire(p, WIRE.W_L) + wire(p, WIRE.ID_1) * rp.beta + rp.gamma;\\n            num = num * (wire(p, WIRE.W_R) + wire(p, WIRE.ID_2) * rp.beta + rp.gamma);\\n            num = num * (wire(p, WIRE.W_O) + wire(p, WIRE.ID_3) * rp.beta + rp.gamma);\\n            num = num * (wire(p, WIRE.W_4) + wire(p, WIRE.ID_4) * rp.beta + rp.gamma);\\n\\n            grand_product_numerator = num;\\n        }\\n        {\\n            Fr den = wire(p, WIRE.W_L) + wire(p, WIRE.SIGMA_1) * rp.beta + rp.gamma;\\n            den = den * (wire(p, WIRE.W_R) + wire(p, WIRE.SIGMA_2) * rp.beta + rp.gamma);\\n            den = den * (wire(p, WIRE.W_O) + wire(p, WIRE.SIGMA_3) * rp.beta + rp.gamma);\\n            den = den * (wire(p, WIRE.W_4) + wire(p, WIRE.SIGMA_4) * rp.beta + rp.gamma);\\n\\n            grand_product_denominator = den;\\n        }\\n\\n        // Contribution 2\\n        {\\n            Fr acc = (wire(p, WIRE.Z_PERM) + wire(p, WIRE.LAGRANGE_FIRST)) * grand_product_numerator;\\n\\n            acc = acc\\n                - (\\n                    (wire(p, WIRE.Z_PERM_SHIFT) + (wire(p, WIRE.LAGRANGE_LAST) * rp.publicInputsDelta))\\n                        * grand_product_denominator\\n                );\\n            acc = acc * domainSep;\\n            evals[2] = acc;\\n        }\\n\\n        // Contribution 3\\n        {\\n            Fr acc = (wire(p, WIRE.LAGRANGE_LAST) * wire(p, WIRE.Z_PERM_SHIFT)) * domainSep;\\n            evals[3] = acc;\\n        }\\n    }\\n\\n    function accumulateLogDerivativeLookupRelation(\\n        Fr[NUMBER_OF_ENTITIES] memory p,\\n        Honk.RelationParameters memory rp,\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\\n        Fr domainSep\\n    ) internal pure {\\n        Fr write_term;\\n        Fr read_term;\\n\\n        // Calculate the write term (the table accumulation)\\n        {\\n            write_term = wire(p, WIRE.TABLE_1) + rp.gamma + (wire(p, WIRE.TABLE_2) * rp.eta)\\n                + (wire(p, WIRE.TABLE_3) * rp.etaTwo) + (wire(p, WIRE.TABLE_4) * rp.etaThree);\\n        }\\n\\n        // Calculate the write term\\n        {\\n            Fr derived_entry_1 = wire(p, WIRE.W_L) + rp.gamma + (wire(p, WIRE.Q_R) * wire(p, WIRE.W_L_SHIFT));\\n            Fr derived_entry_2 = wire(p, WIRE.W_R) + wire(p, WIRE.Q_M) * wire(p, WIRE.W_R_SHIFT);\\n            Fr derived_entry_3 = wire(p, WIRE.W_O) + wire(p, WIRE.Q_C) * wire(p, WIRE.W_O_SHIFT);\\n\\n            read_term = derived_entry_1 + (derived_entry_2 * rp.eta) + (derived_entry_3 * rp.etaTwo)\\n                + (wire(p, WIRE.Q_O) * rp.etaThree);\\n        }\\n\\n        Fr read_inverse = wire(p, WIRE.LOOKUP_INVERSES) * write_term;\\n        Fr write_inverse = wire(p, WIRE.LOOKUP_INVERSES) * read_term;\\n\\n        Fr inverse_exists_xor = wire(p, WIRE.LOOKUP_READ_TAGS) + wire(p, WIRE.Q_LOOKUP)\\n            - (wire(p, WIRE.LOOKUP_READ_TAGS) * wire(p, WIRE.Q_LOOKUP));\\n\\n        // Inverse calculated correctly relation\\n        Fr accumulatorNone = read_term * write_term * wire(p, WIRE.LOOKUP_INVERSES) - inverse_exists_xor;\\n        accumulatorNone = accumulatorNone * domainSep;\\n\\n        // Inverse\\n        Fr accumulatorOne = wire(p, WIRE.Q_LOOKUP) * read_inverse - wire(p, WIRE.LOOKUP_READ_COUNTS) * write_inverse;\\n\\n        evals[4] = accumulatorNone;\\n        evals[5] = accumulatorOne;\\n    }\\n\\n    function accumulateDeltaRangeRelation(\\n        Fr[NUMBER_OF_ENTITIES] memory p,\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\\n        Fr domainSep\\n    ) internal pure {\\n        Fr minus_one = Fr.wrap(0) - Fr.wrap(1);\\n        Fr minus_two = Fr.wrap(0) - Fr.wrap(2);\\n        Fr minus_three = Fr.wrap(0) - Fr.wrap(3);\\n\\n        // Compute wire differences\\n        Fr delta_1 = wire(p, WIRE.W_R) - wire(p, WIRE.W_L);\\n        Fr delta_2 = wire(p, WIRE.W_O) - wire(p, WIRE.W_R);\\n        Fr delta_3 = wire(p, WIRE.W_4) - wire(p, WIRE.W_O);\\n        Fr delta_4 = wire(p, WIRE.W_L_SHIFT) - wire(p, WIRE.W_4);\\n\\n        // Contribution 6\\n        {\\n            Fr acc = delta_1;\\n            acc = acc * (delta_1 + minus_one);\\n            acc = acc * (delta_1 + minus_two);\\n            acc = acc * (delta_1 + minus_three);\\n            acc = acc * wire(p, WIRE.Q_RANGE);\\n            acc = acc * domainSep;\\n            evals[6] = acc;\\n        }\\n\\n        // Contribution 7\\n        {\\n            Fr acc = delta_2;\\n            acc = acc * (delta_2 + minus_one);\\n            acc = acc * (delta_2 + minus_two);\\n            acc = acc * (delta_2 + minus_three);\\n            acc = acc * wire(p, WIRE.Q_RANGE);\\n            acc = acc * domainSep;\\n            evals[7] = acc;\\n        }\\n\\n        // Contribution 8\\n        {\\n            Fr acc = delta_3;\\n            acc = acc * (delta_3 + minus_one);\\n            acc = acc * (delta_3 + minus_two);\\n            acc = acc * (delta_3 + minus_three);\\n            acc = acc * wire(p, WIRE.Q_RANGE);\\n            acc = acc * domainSep;\\n            evals[8] = acc;\\n        }\\n\\n        // Contribution 9\\n        {\\n            Fr acc = delta_4;\\n            acc = acc * (delta_4 + minus_one);\\n            acc = acc * (delta_4 + minus_two);\\n            acc = acc * (delta_4 + minus_three);\\n            acc = acc * wire(p, WIRE.Q_RANGE);\\n            acc = acc * domainSep;\\n            evals[9] = acc;\\n        }\\n    }\\n\\n    struct EllipticParams {\\n        // Points\\n        Fr x_1;\\n        Fr y_1;\\n        Fr x_2;\\n        Fr y_2;\\n        Fr y_3;\\n        Fr x_3;\\n        // push accumulators into memory\\n        Fr x_double_identity;\\n    }\\n\\n    function accumulateEllipticRelation(\\n        Fr[NUMBER_OF_ENTITIES] memory p,\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\\n        Fr domainSep\\n    ) internal pure {\\n        EllipticParams memory ep;\\n        ep.x_1 = wire(p, WIRE.W_R);\\n        ep.y_1 = wire(p, WIRE.W_O);\\n\\n        ep.x_2 = wire(p, WIRE.W_L_SHIFT);\\n        ep.y_2 = wire(p, WIRE.W_4_SHIFT);\\n        ep.y_3 = wire(p, WIRE.W_O_SHIFT);\\n        ep.x_3 = wire(p, WIRE.W_R_SHIFT);\\n\\n        Fr q_sign = wire(p, WIRE.Q_L);\\n        Fr q_is_double = wire(p, WIRE.Q_M);\\n\\n        // Contribution 10 point addition, x-coordinate check\\n        // q_elliptic * (x3 + x2 + x1)(x2 - x1)(x2 - x1) - y2^2 - y1^2 + 2(y2y1)*q_sign = 0\\n        Fr x_diff = (ep.x_2 - ep.x_1);\\n        Fr y1_sqr = (ep.y_1 * ep.y_1);\\n        {\\n            // Move to top\\n            Fr partialEval = domainSep;\\n\\n            Fr y2_sqr = (ep.y_2 * ep.y_2);\\n            Fr y1y2 = ep.y_1 * ep.y_2 * q_sign;\\n            Fr x_add_identity = (ep.x_3 + ep.x_2 + ep.x_1);\\n            x_add_identity = x_add_identity * x_diff * x_diff;\\n            x_add_identity = x_add_identity - y2_sqr - y1_sqr + y1y2 + y1y2;\\n\\n            evals[10] = x_add_identity * partialEval * wire(p, WIRE.Q_ELLIPTIC) * (Fr.wrap(1) - q_is_double);\\n        }\\n\\n        // Contribution 11 point addition, x-coordinate check\\n        // q_elliptic * (q_sign * y1 + y3)(x2 - x1) + (x3 - x1)(y2 - q_sign * y1) = 0\\n        {\\n            Fr y1_plus_y3 = ep.y_1 + ep.y_3;\\n            Fr y_diff = ep.y_2 * q_sign - ep.y_1;\\n            Fr y_add_identity = y1_plus_y3 * x_diff + (ep.x_3 - ep.x_1) * y_diff;\\n            evals[11] = y_add_identity * domainSep * wire(p, WIRE.Q_ELLIPTIC) * (Fr.wrap(1) - q_is_double);\\n        }\\n\\n        // Contribution 10 point doubling, x-coordinate check\\n        // (x3 + x1 + x1) (4y1*y1) - 9 * x1 * x1 * x1 * x1 = 0\\n        // N.B. we're using the equivalence x1*x1*x1 === y1*y1 - curve_b to reduce degree by 1\\n        {\\n            Fr x_pow_4 = (y1_sqr + GRUMPKIN_CURVE_B_PARAMETER_NEGATED) * ep.x_1;\\n            Fr y1_sqr_mul_4 = y1_sqr + y1_sqr;\\n            y1_sqr_mul_4 = y1_sqr_mul_4 + y1_sqr_mul_4;\\n            Fr x1_pow_4_mul_9 = x_pow_4 * Fr.wrap(9);\\n\\n            // NOTE: pushed into memory (stack >:'( )\\n            ep.x_double_identity = (ep.x_3 + ep.x_1 + ep.x_1) * y1_sqr_mul_4 - x1_pow_4_mul_9;\\n\\n            Fr acc = ep.x_double_identity * domainSep * wire(p, WIRE.Q_ELLIPTIC) * q_is_double;\\n            evals[10] = evals[10] + acc;\\n        }\\n\\n        // Contribution 11 point doubling, y-coordinate check\\n        // (y1 + y1) (2y1) - (3 * x1 * x1)(x1 - x3) = 0\\n        {\\n            Fr x1_sqr_mul_3 = (ep.x_1 + ep.x_1 + ep.x_1) * ep.x_1;\\n            Fr y_double_identity = x1_sqr_mul_3 * (ep.x_1 - ep.x_3) - (ep.y_1 + ep.y_1) * (ep.y_1 + ep.y_3);\\n            evals[11] = evals[11] + y_double_identity * domainSep * wire(p, WIRE.Q_ELLIPTIC) * q_is_double;\\n        }\\n    }\\n\\n    // Constants for the auxiliary relation\\n    Fr constant LIMB_SIZE = Fr.wrap(uint256(1) << 68);\\n    Fr constant SUBLIMB_SHIFT = Fr.wrap(uint256(1) << 14);\\n\\n    // Parameters used within the Auxiliary Relation\\n    // A struct is used to work around stack too deep. This relation has alot of variables\\n    struct AuxParams {\\n        Fr limb_subproduct;\\n        Fr non_native_field_gate_1;\\n        Fr non_native_field_gate_2;\\n        Fr non_native_field_gate_3;\\n        Fr limb_accumulator_1;\\n        Fr limb_accumulator_2;\\n        Fr memory_record_check;\\n        Fr partial_record_check;\\n        Fr next_gate_access_type;\\n        Fr record_delta;\\n        Fr index_delta;\\n        Fr adjacent_values_match_if_adjacent_indices_match;\\n        Fr adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation;\\n        Fr access_check;\\n        Fr next_gate_access_type_is_boolean;\\n        Fr ROM_consistency_check_identity;\\n        Fr RAM_consistency_check_identity;\\n        Fr timestamp_delta;\\n        Fr RAM_timestamp_check_identity;\\n        Fr memory_identity;\\n        Fr index_is_monotonically_increasing;\\n        Fr auxiliary_identity;\\n    }\\n\\n    function accumulateAuxillaryRelation(\\n        Fr[NUMBER_OF_ENTITIES] memory p,\\n        Honk.RelationParameters memory rp,\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\\n        Fr domainSep\\n    ) internal pure {\\n        AuxParams memory ap;\\n\\n        /**\\n         * Contribution 12\\n         * Non native field arithmetic gate 2\\n         * deg 4\\n         *\\n         *             _                                                                               _\\n         *            /   _                   _                               _       14                \\\\\\n         * q_2 . q_4 |   (w_1 . w_2) + (w_1 . w_2) + (w_1 . w_4 + w_2 . w_3 - w_3) . 2    - w_3 - w_4   |\\n         *            \\\\_                                                                               _/\\n         *\\n         *\\n         */\\n        ap.limb_subproduct = wire(p, WIRE.W_L) * wire(p, WIRE.W_R_SHIFT) + wire(p, WIRE.W_L_SHIFT) * wire(p, WIRE.W_R);\\n        ap.non_native_field_gate_2 =\\n            (wire(p, WIRE.W_L) * wire(p, WIRE.W_4) + wire(p, WIRE.W_R) * wire(p, WIRE.W_O) - wire(p, WIRE.W_O_SHIFT));\\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 * LIMB_SIZE;\\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 - wire(p, WIRE.W_4_SHIFT);\\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 + ap.limb_subproduct;\\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 * wire(p, WIRE.Q_4);\\n\\n        ap.limb_subproduct = ap.limb_subproduct * LIMB_SIZE;\\n        ap.limb_subproduct = ap.limb_subproduct + (wire(p, WIRE.W_L_SHIFT) * wire(p, WIRE.W_R_SHIFT));\\n        ap.non_native_field_gate_1 = ap.limb_subproduct;\\n        ap.non_native_field_gate_1 = ap.non_native_field_gate_1 - (wire(p, WIRE.W_O) + wire(p, WIRE.W_4));\\n        ap.non_native_field_gate_1 = ap.non_native_field_gate_1 * wire(p, WIRE.Q_O);\\n\\n        ap.non_native_field_gate_3 = ap.limb_subproduct;\\n        ap.non_native_field_gate_3 = ap.non_native_field_gate_3 + wire(p, WIRE.W_4);\\n        ap.non_native_field_gate_3 = ap.non_native_field_gate_3 - (wire(p, WIRE.W_O_SHIFT) + wire(p, WIRE.W_4_SHIFT));\\n        ap.non_native_field_gate_3 = ap.non_native_field_gate_3 * wire(p, WIRE.Q_M);\\n\\n        Fr non_native_field_identity =\\n            ap.non_native_field_gate_1 + ap.non_native_field_gate_2 + ap.non_native_field_gate_3;\\n        non_native_field_identity = non_native_field_identity * wire(p, WIRE.Q_R);\\n\\n        // ((((w2' * 2^14 + w1') * 2^14 + w3) * 2^14 + w2) * 2^14 + w1 - w4) * qm\\n        // deg 2\\n        ap.limb_accumulator_1 = wire(p, WIRE.W_R_SHIFT) * SUBLIMB_SHIFT;\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_L_SHIFT);\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * SUBLIMB_SHIFT;\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_O);\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * SUBLIMB_SHIFT;\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_R);\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * SUBLIMB_SHIFT;\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_L);\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 - wire(p, WIRE.W_4);\\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * wire(p, WIRE.Q_4);\\n\\n        // ((((w3' * 2^14 + w2') * 2^14 + w1') * 2^14 + w4) * 2^14 + w3 - w4') * qm\\n        // deg 2\\n        ap.limb_accumulator_2 = wire(p, WIRE.W_O_SHIFT) * SUBLIMB_SHIFT;\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_R_SHIFT);\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * SUBLIMB_SHIFT;\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_L_SHIFT);\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * SUBLIMB_SHIFT;\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_4);\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * SUBLIMB_SHIFT;\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_O);\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 - wire(p, WIRE.W_4_SHIFT);\\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * wire(p, WIRE.Q_M);\\n\\n        Fr limb_accumulator_identity = ap.limb_accumulator_1 + ap.limb_accumulator_2;\\n        limb_accumulator_identity = limb_accumulator_identity * wire(p, WIRE.Q_O); //  deg 3\\n\\n        /**\\n         * MEMORY\\n         *\\n         * A RAM memory record contains a tuple of the following fields:\\n         *  * i: `index` of memory cell being accessed\\n         *  * t: `timestamp` of memory cell being accessed (used for RAM, set to 0 for ROM)\\n         *  * v: `value` of memory cell being accessed\\n         *  * a: `access` type of record. read: 0 = read, 1 = write\\n         *  * r: `record` of memory cell. record = access + index * eta + timestamp * eta_two + value * eta_three\\n         *\\n         * A ROM memory record contains a tuple of the following fields:\\n         *  * i: `index` of memory cell being accessed\\n         *  * v: `value1` of memory cell being accessed (ROM tables can store up to 2 values per index)\\n         *  * v2:`value2` of memory cell being accessed (ROM tables can store up to 2 values per index)\\n         *  * r: `record` of memory cell. record = index * eta + value2 * eta_two + value1 * eta_three\\n         *\\n         *  When performing a read/write access, the values of i, t, v, v2, a, r are stored in the following wires +\\n         * selectors, depending on whether the gate is a RAM read/write or a ROM read\\n         *\\n         *  | gate type | i  | v2/t  |  v | a  | r  |\\n         *  | --------- | -- | ----- | -- | -- | -- |\\n         *  | ROM       | w1 | w2    | w3 | -- | w4 |\\n         *  | RAM       | w1 | w2    | w3 | qc | w4 |\\n         *\\n         * (for accesses where `index` is a circuit constant, it is assumed the circuit will apply a copy constraint on\\n         * `w2` to fix its value)\\n         *\\n         *\\n         */\\n\\n        /**\\n         * Memory Record Check\\n         * Partial degree: 1\\n         * Total degree: 4\\n         *\\n         * A ROM/ROM access gate can be evaluated with the identity:\\n         *\\n         * qc + w1 \\\\eta + w2 \\\\eta_two + w3 \\\\eta_three - w4 = 0\\n         *\\n         * For ROM gates, qc = 0\\n         */\\n        ap.memory_record_check = wire(p, WIRE.W_O) * rp.etaThree;\\n        ap.memory_record_check = ap.memory_record_check + (wire(p, WIRE.W_R) * rp.etaTwo);\\n        ap.memory_record_check = ap.memory_record_check + (wire(p, WIRE.W_L) * rp.eta);\\n        ap.memory_record_check = ap.memory_record_check + wire(p, WIRE.Q_C);\\n        ap.partial_record_check = ap.memory_record_check; // used in RAM consistency check; deg 1 or 4\\n        ap.memory_record_check = ap.memory_record_check - wire(p, WIRE.W_4);\\n\\n        /**\\n         * Contribution 13 & 14\\n         * ROM Consistency Check\\n         * Partial degree: 1\\n         * Total degree: 4\\n         *\\n         * For every ROM read, a set equivalence check is applied between the record witnesses, and a second set of\\n         * records that are sorted.\\n         *\\n         * We apply the following checks for the sorted records:\\n         *\\n         * 1. w1, w2, w3 correctly map to 'index', 'v1, 'v2' for a given record value at w4\\n         * 2. index values for adjacent records are monotonically increasing\\n         * 3. if, at gate i, index_i == index_{i + 1}, then value1_i == value1_{i + 1} and value2_i == value2_{i + 1}\\n         *\\n         */\\n        ap.index_delta = wire(p, WIRE.W_L_SHIFT) - wire(p, WIRE.W_L);\\n        ap.record_delta = wire(p, WIRE.W_4_SHIFT) - wire(p, WIRE.W_4);\\n\\n        ap.index_is_monotonically_increasing = ap.index_delta * ap.index_delta - ap.index_delta; // deg 2\\n\\n        ap.adjacent_values_match_if_adjacent_indices_match = (ap.index_delta * MINUS_ONE + Fr.wrap(1)) * ap.record_delta; // deg 2\\n\\n        evals[13] = ap.adjacent_values_match_if_adjacent_indices_match * (wire(p, WIRE.Q_L) * wire(p, WIRE.Q_R))\\n            * (wire(p, WIRE.Q_AUX) * domainSep); // deg 5\\n        evals[14] = ap.index_is_monotonically_increasing * (wire(p, WIRE.Q_L) * wire(p, WIRE.Q_R))\\n            * (wire(p, WIRE.Q_AUX) * domainSep); // deg 5\\n\\n        ap.ROM_consistency_check_identity = ap.memory_record_check * (wire(p, WIRE.Q_L) * wire(p, WIRE.Q_R)); // deg 3 or 7\\n\\n        /**\\n         * Contributions 15,16,17\\n         * RAM Consistency Check\\n         *\\n         * The 'access' type of the record is extracted with the expression `w_4 - ap.partial_record_check`\\n         * (i.e. for an honest Prover `w1 * eta + w2 * eta^2 + w3 * eta^3 - w4 = access`.\\n         * This is validated by requiring `access` to be boolean\\n         *\\n         * For two adjacent entries in the sorted list if _both_\\n         *  A) index values match\\n         *  B) adjacent access value is 0 (i.e. next gate is a READ)\\n         * then\\n         *  C) both values must match.\\n         * The gate boolean check is\\n         * (A && B) => C  === !(A && B) || C ===  !A || !B || C\\n         *\\n         * N.B. it is the responsibility of the circuit writer to ensure that every RAM cell is initialized\\n         * with a WRITE operation.\\n         */\\n        Fr access_type = (wire(p, WIRE.W_4) - ap.partial_record_check); // will be 0 or 1 for honest Prover; deg 1 or 4\\n        ap.access_check = access_type * access_type - access_type; // check value is 0 or 1; deg 2 or 8\\n\\n        ap.next_gate_access_type = wire(p, WIRE.W_O_SHIFT) * rp.etaThree;\\n        ap.next_gate_access_type = ap.next_gate_access_type + (wire(p, WIRE.W_R_SHIFT) * rp.etaTwo);\\n        ap.next_gate_access_type = ap.next_gate_access_type + (wire(p, WIRE.W_L_SHIFT) * rp.eta);\\n        ap.next_gate_access_type = wire(p, WIRE.W_4_SHIFT) - ap.next_gate_access_type;\\n\\n        Fr value_delta = wire(p, WIRE.W_O_SHIFT) - wire(p, WIRE.W_O);\\n        ap.adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation = (\\n            ap.index_delta * MINUS_ONE + Fr.wrap(1)\\n        ) * value_delta * (ap.next_gate_access_type * MINUS_ONE + Fr.wrap(1)); // deg 3 or 6\\n\\n        // We can't apply the RAM consistency check identity on the final entry in the sorted list (the wires in the\\n        // next gate would make the identity fail).  We need to validate that its 'access type' bool is correct. Can't\\n        // do  with an arithmetic gate because of the  `eta` factors. We need to check that the *next* gate's access\\n        // type is  correct, to cover this edge case\\n        // deg 2 or 4\\n        ap.next_gate_access_type_is_boolean =\\n            ap.next_gate_access_type * ap.next_gate_access_type - ap.next_gate_access_type;\\n\\n        // Putting it all together...\\n        evals[15] = ap.adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation\\n            * (wire(p, WIRE.Q_ARITH)) * (wire(p, WIRE.Q_AUX) * domainSep); // deg 5 or 8\\n        evals[16] = ap.index_is_monotonically_increasing * (wire(p, WIRE.Q_ARITH)) * (wire(p, WIRE.Q_AUX) * domainSep); // deg 4\\n        evals[17] = ap.next_gate_access_type_is_boolean * (wire(p, WIRE.Q_ARITH)) * (wire(p, WIRE.Q_AUX) * domainSep); // deg 4 or 6\\n\\n        ap.RAM_consistency_check_identity = ap.access_check * (wire(p, WIRE.Q_ARITH)); // deg 3 or 9\\n\\n        /**\\n         * RAM Timestamp Consistency Check\\n         *\\n         * | w1 | w2 | w3 | w4 |\\n         * | index | timestamp | timestamp_check | -- |\\n         *\\n         * Let delta_index = index_{i + 1} - index_{i}\\n         *\\n         * Iff delta_index == 0, timestamp_check = timestamp_{i + 1} - timestamp_i\\n         * Else timestamp_check = 0\\n         */\\n        ap.timestamp_delta = wire(p, WIRE.W_R_SHIFT) - wire(p, WIRE.W_R);\\n        ap.RAM_timestamp_check_identity =\\n            (ap.index_delta * MINUS_ONE + Fr.wrap(1)) * ap.timestamp_delta - wire(p, WIRE.W_O); // deg 3\\n\\n        /**\\n         * Complete Contribution 12\\n         * The complete RAM/ROM memory identity\\n         * Partial degree:\\n         */\\n        ap.memory_identity = ap.ROM_consistency_check_identity; // deg 3 or 6\\n        ap.memory_identity =\\n            ap.memory_identity + ap.RAM_timestamp_check_identity * (wire(p, WIRE.Q_4) * wire(p, WIRE.Q_L)); // deg 4\\n        ap.memory_identity = ap.memory_identity + ap.memory_record_check * (wire(p, WIRE.Q_M) * wire(p, WIRE.Q_L)); // deg 3 or 6\\n        ap.memory_identity = ap.memory_identity + ap.RAM_consistency_check_identity; // deg 3 or 9\\n\\n        // (deg 3 or 9) + (deg 4) + (deg 3)\\n        ap.auxiliary_identity = ap.memory_identity + non_native_field_identity + limb_accumulator_identity;\\n        ap.auxiliary_identity = ap.auxiliary_identity * (wire(p, WIRE.Q_AUX) * domainSep); // deg 4 or 10\\n        evals[12] = ap.auxiliary_identity;\\n    }\\n\\n    struct PoseidonExternalParams {\\n        Fr s1;\\n        Fr s2;\\n        Fr s3;\\n        Fr s4;\\n        Fr u1;\\n        Fr u2;\\n        Fr u3;\\n        Fr u4;\\n        Fr t0;\\n        Fr t1;\\n        Fr t2;\\n        Fr t3;\\n        Fr v1;\\n        Fr v2;\\n        Fr v3;\\n        Fr v4;\\n        Fr q_pos_by_scaling;\\n    }\\n\\n    function accumulatePoseidonExternalRelation(\\n        Fr[NUMBER_OF_ENTITIES] memory p,\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\\n        Fr domainSep\\n    ) internal pure {\\n        PoseidonExternalParams memory ep;\\n\\n        ep.s1 = wire(p, WIRE.W_L) + wire(p, WIRE.Q_L);\\n        ep.s2 = wire(p, WIRE.W_R) + wire(p, WIRE.Q_R);\\n        ep.s3 = wire(p, WIRE.W_O) + wire(p, WIRE.Q_O);\\n        ep.s4 = wire(p, WIRE.W_4) + wire(p, WIRE.Q_4);\\n\\n        ep.u1 = ep.s1 * ep.s1 * ep.s1 * ep.s1 * ep.s1;\\n        ep.u2 = ep.s2 * ep.s2 * ep.s2 * ep.s2 * ep.s2;\\n        ep.u3 = ep.s3 * ep.s3 * ep.s3 * ep.s3 * ep.s3;\\n        ep.u4 = ep.s4 * ep.s4 * ep.s4 * ep.s4 * ep.s4;\\n        // matrix mul v = M_E * u with 14 additions\\n        ep.t0 = ep.u1 + ep.u2; // u_1 + u_2\\n        ep.t1 = ep.u3 + ep.u4; // u_3 + u_4\\n        ep.t2 = ep.u2 + ep.u2 + ep.t1; // 2u_2\\n        // ep.t2 += ep.t1; // 2u_2 + u_3 + u_4\\n        ep.t3 = ep.u4 + ep.u4 + ep.t0; // 2u_4\\n        // ep.t3 += ep.t0; // u_1 + u_2 + 2u_4\\n        ep.v4 = ep.t1 + ep.t1;\\n        ep.v4 = ep.v4 + ep.v4 + ep.t3;\\n        // ep.v4 += ep.t3; // u_1 + u_2 + 4u_3 + 6u_4\\n        ep.v2 = ep.t0 + ep.t0;\\n        ep.v2 = ep.v2 + ep.v2 + ep.t2;\\n        // ep.v2 += ep.t2; // 4u_1 + 6u_2 + u_3 + u_4\\n        ep.v1 = ep.t3 + ep.v2; // 5u_1 + 7u_2 + u_3 + 3u_4\\n        ep.v3 = ep.t2 + ep.v4; // u_1 + 3u_2 + 5u_3 + 7u_4\\n\\n        ep.q_pos_by_scaling = wire(p, WIRE.Q_POSEIDON2_EXTERNAL) * domainSep;\\n        evals[18] = evals[18] + ep.q_pos_by_scaling * (ep.v1 - wire(p, WIRE.W_L_SHIFT));\\n\\n        evals[19] = evals[19] + ep.q_pos_by_scaling * (ep.v2 - wire(p, WIRE.W_R_SHIFT));\\n\\n        evals[20] = evals[20] + ep.q_pos_by_scaling * (ep.v3 - wire(p, WIRE.W_O_SHIFT));\\n\\n        evals[21] = evals[21] + ep.q_pos_by_scaling * (ep.v4 - wire(p, WIRE.W_4_SHIFT));\\n    }\\n\\n    struct PoseidonInternalParams {\\n        Fr u1;\\n        Fr u2;\\n        Fr u3;\\n        Fr u4;\\n        Fr u_sum;\\n        Fr v1;\\n        Fr v2;\\n        Fr v3;\\n        Fr v4;\\n        Fr s1;\\n        Fr q_pos_by_scaling;\\n    }\\n\\n    function accumulatePoseidonInternalRelation(\\n        Fr[NUMBER_OF_ENTITIES] memory p,\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\\n        Fr domainSep\\n    ) internal pure {\\n        PoseidonInternalParams memory ip;\\n\\n        Fr[4] memory INTERNAL_MATRIX_DIAGONAL = [\\n            FrLib.from(0x10dc6e9c006ea38b04b1e03b4bd9490c0d03f98929ca1d7fb56821fd19d3b6e7),\\n            FrLib.from(0x0c28145b6a44df3e0149b3d0a30b3bb599df9756d4dd9b84a86b38cfb45a740b),\\n            FrLib.from(0x00544b8338791518b2c7645a50392798b21f75bb60e3596170067d00141cac15),\\n            FrLib.from(0x222c01175718386f2e2e82eb122789e352e105a3b8fa852613bc534433ee428b)\\n        ];\\n\\n        // add round constants\\n        ip.s1 = wire(p, WIRE.W_L) + wire(p, WIRE.Q_L);\\n\\n        // apply s-box round\\n        ip.u1 = ip.s1 * ip.s1 * ip.s1 * ip.s1 * ip.s1;\\n        ip.u2 = wire(p, WIRE.W_R);\\n        ip.u3 = wire(p, WIRE.W_O);\\n        ip.u4 = wire(p, WIRE.W_4);\\n\\n        // matrix mul with v = M_I * u 4 muls and 7 additions\\n        ip.u_sum = ip.u1 + ip.u2 + ip.u3 + ip.u4;\\n\\n        ip.q_pos_by_scaling = wire(p, WIRE.Q_POSEIDON2_INTERNAL) * domainSep;\\n\\n        ip.v1 = ip.u1 * INTERNAL_MATRIX_DIAGONAL[0] + ip.u_sum;\\n        evals[22] = evals[22] + ip.q_pos_by_scaling * (ip.v1 - wire(p, WIRE.W_L_SHIFT));\\n\\n        ip.v2 = ip.u2 * INTERNAL_MATRIX_DIAGONAL[1] + ip.u_sum;\\n        evals[23] = evals[23] + ip.q_pos_by_scaling * (ip.v2 - wire(p, WIRE.W_R_SHIFT));\\n\\n        ip.v3 = ip.u3 * INTERNAL_MATRIX_DIAGONAL[2] + ip.u_sum;\\n        evals[24] = evals[24] + ip.q_pos_by_scaling * (ip.v3 - wire(p, WIRE.W_O_SHIFT));\\n\\n        ip.v4 = ip.u4 * INTERNAL_MATRIX_DIAGONAL[3] + ip.u_sum;\\n        evals[25] = evals[25] + ip.q_pos_by_scaling * (ip.v4 - wire(p, WIRE.W_4_SHIFT));\\n    }\\n\\n    function scaleAndBatchSubrelations(\\n        Fr[NUMBER_OF_SUBRELATIONS] memory evaluations,\\n        Fr[NUMBER_OF_ALPHAS] memory subrelationChallenges\\n    ) internal pure returns (Fr accumulator) {\\n        accumulator = accumulator + evaluations[0];\\n\\n        for (uint256 i = 1; i < NUMBER_OF_SUBRELATIONS; ++i) {\\n            accumulator = accumulator + evaluations[i] * subrelationChallenges[i - 1];\\n        }\\n    }\\n}\\n\\nstruct ShpleminiIntermediates {\\n    Fr unshiftedScalar;\\n    Fr shiftedScalar;\\n    // Scalar to be multiplied by [1]\\u2081\\n    Fr constantTermAccumulator;\\n    // Accumulator for powers of rho\\n    Fr batchingChallenge;\\n    // Linear combination of multilinear (sumcheck) evaluations and powers of rho\\n    Fr batchedEvaluation;\\n    // 1/(z - r^{2^i}) for i = 0, ..., logSize, dynamically updated\\n    Fr posInvertedDenominator;\\n    // 1/(z + r^{2^i}) for i = 0, ..., logSize, dynamically updated\\n    Fr negInvertedDenominator;\\n    // v^{2i} * 1/(z - r^{2^i})\\n    Fr scalingFactorPos;\\n    // v^{2i+1} * 1/(z + r^{2^i})\\n    Fr scalingFactorNeg;\\n    // // Fold_i(r^{2^i}) reconstructed by Verifier\\n    // Fr[CONST_PROOF_SIZE_LOG_N] foldPosEvaluations;\\n}\\n\\nlibrary CommitmentSchemeLib {\\n    using FrLib for Fr;\\n\\n    function computeSquares(Fr r) internal pure returns (Fr[CONST_PROOF_SIZE_LOG_N] memory squares) {\\n        squares[0] = r;\\n        for (uint256 i = 1; i < CONST_PROOF_SIZE_LOG_N; ++i) {\\n            squares[i] = squares[i - 1].sqr();\\n        }\\n    }\\n\\n    // Compute the evaluations  A_l(r^{2^l}) for l = 0, ..., m-1\\n    function computeFoldPosEvaluations(\\n        Fr[CONST_PROOF_SIZE_LOG_N] memory sumcheckUChallenges,\\n        Fr batchedEvalAccumulator,\\n        Fr[CONST_PROOF_SIZE_LOG_N] memory geminiEvaluations,\\n        Fr[CONST_PROOF_SIZE_LOG_N] memory geminiEvalChallengePowers,\\n        uint256 logSize\\n    ) internal view returns (Fr[CONST_PROOF_SIZE_LOG_N] memory foldPosEvaluations) {\\n        for (uint256 i = CONST_PROOF_SIZE_LOG_N; i > 0; --i) {\\n            Fr challengePower = geminiEvalChallengePowers[i - 1];\\n            Fr u = sumcheckUChallenges[i - 1];\\n\\n            Fr batchedEvalRoundAcc = (\\n                (challengePower * batchedEvalAccumulator * Fr.wrap(2))\\n                    - geminiEvaluations[i - 1] * (challengePower * (Fr.wrap(1) - u) - u)\\n            );\\n            // Divide by the denominator\\n            batchedEvalRoundAcc = batchedEvalRoundAcc * (challengePower * (Fr.wrap(1) - u) + u).invert();\\n\\n            if (i <= logSize) {\\n                batchedEvalAccumulator = batchedEvalRoundAcc;\\n                foldPosEvaluations[i - 1] = batchedEvalRoundAcc;\\n            }\\n        }\\n\\n    }\\n}\\n\\ninterface IVerifier {\\n    function verify(bytes calldata _proof, bytes32[] calldata _publicInputs) external view returns (bool);\\n}\\n\\n\\nabstract contract BaseHonkVerifier is IVerifier {\\n    using FrLib for Fr;\\n\\n    uint256 immutable n;\\n    uint256 immutable logN;\\n    uint256 immutable numPublicInputs;\\n\\n    constructor(uint256 _n, uint256 _logN, uint256 _numPublicInputs) {\\n        n = _n;\\n        logN = _logN;\\n        numPublicInputs = _numPublicInputs;\\n    }\\n\\n    error ProofLengthWrong();\\n    error PublicInputsLengthWrong();\\n    error SumcheckFailed();\\n    error ShpleminiFailed();\\n\\n    // Number of field elements in a ultra honk zero knowledge proof\\n    uint256 constant PROOF_SIZE = 440;\\n\\n    function loadVerificationKey() internal pure virtual returns (Honk.VerificationKey memory);\\n\\n    function verify(bytes calldata proof, bytes32[] calldata publicInputs) public view override returns (bool) {\\n         // Check the received proof is the expected size where each field element is 32 bytes\\n        if (proof.length != PROOF_SIZE * 32) {\\n            revert ProofLengthWrong();\\n        }\\n\\n        Honk.VerificationKey memory vk = loadVerificationKey();\\n        Honk.Proof memory p = TranscriptLib.loadProof(proof);\\n\\n        if (publicInputs.length != vk.publicInputsSize) {\\n            revert PublicInputsLengthWrong();\\n        }\\n\\n        // Generate the fiat shamir challenges for the whole protocol\\n        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1281): Add pubInputsOffset to VK or remove entirely.\\n        Transcript memory t = TranscriptLib.generateTranscript(p, publicInputs, vk.circuitSize, vk.publicInputsSize, /*pubInputsOffset=*/1);\\n\\n        // Derive public input delta\\n        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1281): Add pubInputsOffset to VK or remove entirely.\\n        t.relationParameters.publicInputsDelta = computePublicInputDelta(\\n            publicInputs, t.relationParameters.beta, t.relationParameters.gamma, /*pubInputsOffset=*/1\\n        );\\n\\n        // Sumcheck\\n        bool sumcheckVerified = verifySumcheck(p, t);\\n        if (!sumcheckVerified) revert SumcheckFailed();\\n\\n        bool shpleminiVerified = verifyShplemini(p, vk, t);\\n        if (!shpleminiVerified) revert ShpleminiFailed();\\n\\n        return sumcheckVerified && shpleminiVerified; // Boolean condition not required - nice for vanity :)\\n    }\\n\\n    function computePublicInputDelta(bytes32[] memory publicInputs, Fr beta, Fr gamma, uint256 offset)\\n        internal\\n        view\\n        returns (Fr publicInputDelta)\\n    {\\n        Fr numerator = Fr.wrap(1);\\n        Fr denominator = Fr.wrap(1);\\n\\n        Fr numeratorAcc = gamma + (beta * FrLib.from(n + offset));\\n        Fr denominatorAcc = gamma - (beta * FrLib.from(offset + 1));\\n\\n        {\\n            for (uint256 i = 0; i < numPublicInputs; i++) {\\n                Fr pubInput = FrLib.fromBytes32(publicInputs[i]);\\n\\n                numerator = numerator * (numeratorAcc + pubInput);\\n                denominator = denominator * (denominatorAcc + pubInput);\\n\\n                numeratorAcc = numeratorAcc + beta;\\n                denominatorAcc = denominatorAcc - beta;\\n            }\\n        }\\n\\n        // Fr delta = numerator / denominator; // TOOO: batch invert later?\\n        publicInputDelta = FrLib.div(numerator, denominator);\\n    }\\n\\n    function verifySumcheck(Honk.Proof memory proof, Transcript memory tp) internal view returns (bool verified) {\\n        Fr roundTarget;\\n        Fr powPartialEvaluation = Fr.wrap(1);\\n\\n        // We perform sumcheck reductions over log n rounds ( the multivariate degree )\\n        for (uint256 round; round < logN; ++round) {\\n            Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory roundUnivariate = proof.sumcheckUnivariates[round];\\n            bool valid = checkSum(roundUnivariate, roundTarget);\\n            if (!valid) revert SumcheckFailed();\\n\\n            Fr roundChallenge = tp.sumCheckUChallenges[round];\\n\\n            // Update the round target for the next rounf\\n            roundTarget = computeNextTargetSum(roundUnivariate, roundChallenge);\\n            powPartialEvaluation = partiallyEvaluatePOW(tp.gateChallenges[round], powPartialEvaluation, roundChallenge);\\n        }\\n\\n        // Last round\\n        Fr grandHonkRelationSum =\\n            RelationsLib.accumulateRelationEvaluations(proof.sumcheckEvaluations, tp.relationParameters, tp.alphas, powPartialEvaluation);\\n        verified = (grandHonkRelationSum == roundTarget);\\n    }\\n\\n    function checkSum(Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory roundUnivariate, Fr roundTarget)\\n        internal\\n        pure\\n        returns (bool checked)\\n    {\\n        Fr totalSum = roundUnivariate[0] + roundUnivariate[1];\\n        checked = totalSum == roundTarget;\\n    }\\n\\n    // Return the new target sum for the next sumcheck round\\n    function computeNextTargetSum(Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory roundUnivariates, Fr roundChallenge)\\n        internal\\n        view\\n        returns (Fr targetSum)\\n    {\\n        // TODO: inline\\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory BARYCENTRIC_LAGRANGE_DENOMINATORS = [\\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffec51),\\n            Fr.wrap(0x00000000000000000000000000000000000000000000000000000000000002d0),\\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffff11),\\n            Fr.wrap(0x0000000000000000000000000000000000000000000000000000000000000090),\\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffff71),\\n            Fr.wrap(0x00000000000000000000000000000000000000000000000000000000000000f0),\\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593effffd31),\\n            Fr.wrap(0x00000000000000000000000000000000000000000000000000000000000013b0)\\n        ];\\n\\n        // To compute the next target sum, we evaluate the given univariate at a point u (challenge).\\n\\n        // Performing Barycentric evaluations\\n        // Compute B(x)\\n        Fr numeratorValue = Fr.wrap(1);\\n        for (uint256 i = 0; i < BATCHED_RELATION_PARTIAL_LENGTH; ++i) {\\n            numeratorValue = numeratorValue * (roundChallenge - Fr.wrap(i));\\n        }\\n\\n        // Calculate domain size N of inverses\\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory denominatorInverses;\\n        for (uint256 i = 0; i < BATCHED_RELATION_PARTIAL_LENGTH; ++i) {\\n            Fr inv = BARYCENTRIC_LAGRANGE_DENOMINATORS[i];\\n            inv = inv * (roundChallenge - Fr.wrap(i));\\n            inv = FrLib.invert(inv);\\n            denominatorInverses[i] = inv;\\n        }\\n\\n        for (uint256 i = 0; i < BATCHED_RELATION_PARTIAL_LENGTH; ++i) {\\n            Fr term = roundUnivariates[i];\\n            term = term * denominatorInverses[i];\\n            targetSum = targetSum + term;\\n        }\\n\\n        // Scale the sum by the value of B(x)\\n        targetSum = targetSum * numeratorValue;\\n    }\\n\\n    // Univariate evaluation of the monomial ((1-X_l) + X_l.B_l) at the challenge point X_l=u_l\\n    function partiallyEvaluatePOW(Fr gateChallenge, Fr currentEvaluation, Fr roundChallenge)\\n        internal\\n        pure\\n        returns (Fr newEvaluation)\\n    {\\n        Fr univariateEval = Fr.wrap(1) + (roundChallenge * (gateChallenge - Fr.wrap(1)));\\n        newEvaluation = currentEvaluation * univariateEval;\\n    }\\n\\n    function verifyShplemini(Honk.Proof memory proof, Honk.VerificationKey memory vk, Transcript memory tp)\\n        internal\\n        view\\n        returns (bool verified)\\n    {\\n        ShpleminiIntermediates memory mem; // stack\\n\\n        // - Compute vector (r, r\\u00b2, ... , r\\u00b2\\u207d\\u207f\\u207b\\u00b9\\u207e), where n = log_circuit_size\\n        Fr[CONST_PROOF_SIZE_LOG_N] memory powers_of_evaluation_challenge = CommitmentSchemeLib.computeSquares(tp.geminiR);\\n\\n        // Arrays hold values that will be linearly combined for the gemini and shplonk batch openings\\n        Fr[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory scalars;\\n        Honk.G1Point[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory commitments;\\n\\n        mem.posInvertedDenominator = (tp.shplonkZ - powers_of_evaluation_challenge[0]).invert();\\n        mem.negInvertedDenominator = (tp.shplonkZ + powers_of_evaluation_challenge[0]).invert();\\n\\n        mem.unshiftedScalar = mem.posInvertedDenominator + (tp.shplonkNu * mem.negInvertedDenominator);\\n        mem.shiftedScalar =\\n            tp.geminiR.invert() * (mem.posInvertedDenominator - (tp.shplonkNu * mem.negInvertedDenominator));\\n\\n        scalars[0] = Fr.wrap(1);\\n        commitments[0] = convertProofPoint(proof.shplonkQ);\\n\\n        mem.batchingChallenge = Fr.wrap(1);\\n        mem.batchedEvaluation = Fr.wrap(0);\\n\\n        for (uint256 i = 1; i <= NUMBER_UNSHIFTED; ++i) {\\n            scalars[i] = mem.unshiftedScalar.neg() * mem.batchingChallenge;\\n            mem.batchedEvaluation = mem.batchedEvaluation + (proof.sumcheckEvaluations[i - 1] * mem.batchingChallenge);\\n            mem.batchingChallenge = mem.batchingChallenge * tp.rho;\\n        }\\n        // g commitments are accumulated at r\\n        for (uint256 i = NUMBER_UNSHIFTED + 1; i <= NUMBER_OF_ENTITIES; ++i) {\\n            scalars[i] = mem.shiftedScalar.neg() * mem.batchingChallenge;\\n            mem.batchedEvaluation = mem.batchedEvaluation + (proof.sumcheckEvaluations[i - 1] * mem.batchingChallenge);\\n            mem.batchingChallenge = mem.batchingChallenge * tp.rho;\\n        }\\n\\n        commitments[1] = vk.qm;\\n        commitments[2] = vk.qc;\\n        commitments[3] = vk.ql;\\n        commitments[4] = vk.qr;\\n        commitments[5] = vk.qo;\\n        commitments[6] = vk.q4;\\n        commitments[7] = vk.qLookup;\\n        commitments[8] = vk.qArith;\\n        commitments[9] = vk.qDeltaRange;\\n        commitments[10] = vk.qElliptic;\\n        commitments[11] = vk.qAux;\\n        commitments[12] = vk.qPoseidon2External;\\n        commitments[13] = vk.qPoseidon2Internal;\\n        commitments[14] = vk.s1;\\n        commitments[15] = vk.s2;\\n        commitments[16] = vk.s3;\\n        commitments[17] = vk.s4;\\n        commitments[18] = vk.id1;\\n        commitments[19] = vk.id2;\\n        commitments[20] = vk.id3;\\n        commitments[21] = vk.id4;\\n        commitments[22] = vk.t1;\\n        commitments[23] = vk.t2;\\n        commitments[24] = vk.t3;\\n        commitments[25] = vk.t4;\\n        commitments[26] = vk.lagrangeFirst;\\n        commitments[27] = vk.lagrangeLast;\\n\\n        // Accumulate proof points\\n        commitments[28] = convertProofPoint(proof.w1);\\n        commitments[29] = convertProofPoint(proof.w2);\\n        commitments[30] = convertProofPoint(proof.w3);\\n        commitments[31] = convertProofPoint(proof.w4);\\n        commitments[32] = convertProofPoint(proof.zPerm);\\n        commitments[33] = convertProofPoint(proof.lookupInverses);\\n        commitments[34] = convertProofPoint(proof.lookupReadCounts);\\n        commitments[35] = convertProofPoint(proof.lookupReadTags);\\n\\n        // to be Shifted\\n        commitments[36] = convertProofPoint(proof.w1);\\n        commitments[37] = convertProofPoint(proof.w2);\\n        commitments[38] = convertProofPoint(proof.w3);\\n        commitments[39] = convertProofPoint(proof.w4);\\n        commitments[40] = convertProofPoint(proof.zPerm);\\n\\n        // Add contributions from A\\u2080(r) and A\\u2080(-r) to constant_term_accumulator:\\n        // Compute the evaluations A_l(r^{2^l}) for l = 0, ..., logN - 1\\n        Fr[CONST_PROOF_SIZE_LOG_N] memory foldPosEvaluations = CommitmentSchemeLib.computeFoldPosEvaluations(\\n            tp.sumCheckUChallenges,\\n            mem.batchedEvaluation,\\n            proof.geminiAEvaluations,\\n            powers_of_evaluation_challenge,\\n            logN\\n        );\\n\\n        // Compute the Shplonk constant term contributions from A\\u2080(\\u00b1r)\\n        mem.constantTermAccumulator = foldPosEvaluations[0] * mem.posInvertedDenominator;\\n        mem.constantTermAccumulator =\\n            mem.constantTermAccumulator + (proof.geminiAEvaluations[0] * tp.shplonkNu * mem.negInvertedDenominator);\\n        mem.batchingChallenge = tp.shplonkNu.sqr();\\n\\n        // Compute Shplonk constant term contributions from A\\u2097(\\u00b1r^{2\\u02e1}) for l = 1, ..., m-1;\\n        // Compute scalar multipliers for each fold commitment\\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; ++i) {\\n            bool dummy_round = i >= (logN - 1);\\n\\n            if (!dummy_round) {\\n                // Update inverted denominators\\n                mem.posInvertedDenominator = (tp.shplonkZ - powers_of_evaluation_challenge[i + 1]).invert();\\n                mem.negInvertedDenominator = (tp.shplonkZ + powers_of_evaluation_challenge[i + 1]).invert();\\n\\n                // Compute the scalar multipliers for A\\u2097(\\u00b1 r^{2\\u02e1}) and [A\\u2097]\\n                mem.scalingFactorPos = mem.batchingChallenge * mem.posInvertedDenominator;\\n                mem.scalingFactorNeg = mem.batchingChallenge * tp.shplonkNu * mem.negInvertedDenominator;\\n                // [A\\u2097] is multiplied by -v^{2l}/(z-r^{2^l}) - v^{2l+1} /(z+ r^{2^l})\\n                scalars[NUMBER_OF_ENTITIES + 1 + i] = mem.scalingFactorNeg.neg() + mem.scalingFactorPos.neg();\\n\\n                // Accumulate the const term contribution given by\\n                // v^{2l} * A\\u2097(r^{2\\u02e1}) /(z-r^{2^l}) + v^{2l+1} * A\\u2097(-r^{2\\u02e1}) /(z+ r^{2^l})\\n                Fr accumContribution = mem.scalingFactorNeg * proof.geminiAEvaluations[i + 1];\\n                accumContribution = accumContribution + mem.scalingFactorPos * foldPosEvaluations[i + 1];\\n                mem.constantTermAccumulator = mem.constantTermAccumulator + accumContribution;\\n                // Update the running power of v\\n                mem.batchingChallenge = mem.batchingChallenge * tp.shplonkNu * tp.shplonkNu;\\n            }\\n\\n            commitments[NUMBER_OF_ENTITIES + 1 + i] = convertProofPoint(proof.geminiFoldComms[i]);\\n        }\\n\\n        // Finalise the batch opening claim\\n        commitments[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N] = Honk.G1Point({x: 1, y: 2});\\n        scalars[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N] = mem.constantTermAccumulator;\\n\\n        Honk.G1Point memory quotient_commitment = convertProofPoint(proof.kzgQuotient);\\n\\n        commitments[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 1] = quotient_commitment;\\n        scalars[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 1] = tp.shplonkZ; // evaluation challenge\\n\\n        Honk.G1Point memory P_0 = batchMul(commitments, scalars);\\n        Honk.G1Point memory P_1 = negateInplace(quotient_commitment);\\n\\n        return pairing(P_0, P_1);\\n    }\\n\\n    // This implementation is the same as above with different constants\\n    function batchMul(\\n        Honk.G1Point[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory base,\\n        Fr[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory scalars\\n    ) internal view returns (Honk.G1Point memory result) {\\n        uint256 limit = NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2;\\n        assembly {\\n            let success := 0x01\\n            let free := mload(0x40)\\n\\n            // Write the original into the accumulator\\n            // Load into memory for ecMUL, leave offset for eccAdd result\\n            // base is an array of pointers, so we have to dereference them\\n            mstore(add(free, 0x40), mload(mload(base)))\\n            mstore(add(free, 0x60), mload(add(0x20, mload(base))))\\n            // Add scalar\\n            mstore(add(free, 0x80), mload(scalars))\\n            success := and(success, staticcall(gas(), 7, add(free, 0x40), 0x60, free, 0x40))\\n\\n            let count := 0x01\\n            for {} lt(count, limit) { count := add(count, 1) } {\\n                // Get loop offsets\\n                let base_base := add(base, mul(count, 0x20))\\n                let scalar_base := add(scalars, mul(count, 0x20))\\n\\n                mstore(add(free, 0x40), mload(mload(base_base)))\\n                mstore(add(free, 0x60), mload(add(0x20, mload(base_base))))\\n                // Add scalar\\n                mstore(add(free, 0x80), mload(scalar_base))\\n\\n                success := and(success, staticcall(gas(), 7, add(free, 0x40), 0x60, add(free, 0x40), 0x40))\\n                // accumulator = accumulator + accumulator_2\\n                success := and(success, staticcall(gas(), 6, free, 0x80, free, 0x40))\\n            }\\n\\n            // Return the result - i hate this\\n            mstore(result, mload(free))\\n            mstore(add(result, 0x20), mload(add(free, 0x20)))\\n        }\\n    }\\n}\\n\\ncontract DepositVerifier is BaseHonkVerifier(N, LOG_N, NUMBER_OF_PUBLIC_INPUTS) {\\n     function loadVerificationKey() internal pure override returns (Honk.VerificationKey memory) {\\n       return HonkVerificationKey.loadVerificationKey();\\n    }\\n}\\n\",\"keccak256\":\"0xec8b7a5c481d4db36cade2cd915ba23df6712dcad5573bbc52ccb611ce8a9131\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ea50d0e414610030575b600080fd5b61004361003e36600461504f565b610057565b604051901515815260200160405180910390f35b60006100666101b86020615138565b8414610085576040516376ba560560e11b815260040160405180910390fd5b600061008f6101a3565b9050600061009d87876101b8565b604083015190915084146100c45760405163fa06659360e01b815260040160405180910390fd5b60006100dd828787866000015187604001516001610466565b905061012c868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250508451606081015160809091015190925090506001610516565b815160a00152600061013e838361062b565b90508061015e576040516313f8744360e31b815260040160405180910390fd5b600061016b848685610732565b90508061018b576040516352ec174560e11b815260040160405180910390fd5b8180156101955750805b9a9950505050505050505050565b6101ab61491c565b6101b3610fbd565b905090565b6101c0614cd3565b6101d66101d160806000858761514f565b6118a4565b81526101ea6101d16101006080858761514f565b60208201526102026101d1610180610100858761514f565b604082015261021a6101d1610200610180858761514f565b60a08201526102326101d1610280610200858761514f565b60c082015261024a6101d1610300610280858761514f565b60608201526102626101d1610380610300858761514f565b60e082015261027a6101d1610400610380858761514f565b608082015261040060005b601c8110156103135760005b600881101561030a576102bd8684876102ab826020615179565b926102b89392919061514f565b61197a565b84610100015183601c81106102d4576102d461518c565b602002015182600881106102ea576102ea61518c565b6020020181815250506020836103009190615179565b9250600101610291565b50600101610285565b5060005b6028811015610368576103318583866102ab826020615179565b83610120015182602881106103485761034861518c565b60200201818152505060208261035e9190615179565b9150600101610317565b5060005b6103786001601c6151a2565b8110156103ce5761039d858386610390826080615179565b926101d19392919061514f565b83610140015182601b81106103b4576103b461518c565b60200201526103c4608083615179565b915060010161036c565b5060005b601c811015610423576103ec8583866102ab826020615179565b83610160015182601c81106104035761040361518c565b6020020181815250506020826104199190615179565b91506001016103d2565b50610435848285610390826080615179565b610180830152610446816080615179565b9050610459848285610390826080615179565b6101a08301525092915050565b61046e614d90565b600061047f888888888888876119d7565b908352905061048e8189611a5f565b602084019190915290506104a181611bfc565b604084019190915290506104b58882611c5f565b606084019190915290506104c98882611d36565b608084019190915290506104dd8882611dc4565b60a084019190915290506104f18882611f34565b60c084019190915290506105058882611fa8565b5060e0830152509695505050505050565b6000600180826105608661055b896105566105518a7f0000000000000000000000000000000000000000000000000000000000000000615179565b612000565b612020565b61203b565b9050600061057f8761057a8a6105566105518b6001615179565b612056565b905060005b7f00000000000000000000000000000000000000000000000000000000000000008110156106135760006105d08b83815181106105c3576105c361518c565b6020026020010151612000565b90506105e086610556868461203b565b95506105f085610556858461203b565b94506105fc848b61203b565b9350610608838b612056565b925050600101610584565b5061061e8484612088565b9998505050505050505050565b6000806001815b7f000000000000000000000000000000000000000000000000000000000000000081101561070657600086610100015182601c81106106735761067361518c565b6020020151905060006106868286612097565b9050806106a6576040516313f8744360e31b815260040160405180910390fd5b6000876060015184601c81106106be576106be61518c565b602002015190506106cf83826120b5565b95506106f6886040015185601c81106106ea576106ea61518c565b60200201518683612269565b9450505050806001019050610632565b5060006107228661012001518660000151876020015185612295565b90508281145b9695505050505050565b60006107836040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006107928460a00151612304565b905061079c614e1e565b6107a4614e3d565b60e08601516107c4906107bf908560005b6020020151612056565b612369565b60a085015260e08601516107e4906107bf908560005b602002015161203b565b60c080860182905260a0860151908801516108039261055b9190612020565b845260a08601516108319061081790612369565b6105568660a0015161057a8a60c001518960c00151612020565b602085015260018252610180880151610849906123d9565b8152600160608501819052600060808601525b602381116109035761087e6108748660000151612425565b8660600151612020565b8382604681106108905761089061518c565b602002015260808501516101208a01516108d3919061055b906108b46001866151a2565b602881106108c4576108c461518c565b60200201518860600151612020565b8560800181815250506108ee85606001518860800151612020565b60608601526108fc816151b5565b905061085c565b50600061091260236001615179565b90505b602881116109935761092d6108748660200151612425565b83826046811061093f5761093f61518c565b602002015260808501516101208a0151610963919061055b906108b46001866151a2565b85608001818152505061097e85606001518860800151612020565b606086015261098c816151b5565b9050610915565b50606087015181600160200201526080870151816002602002015260a0870151816003602002015260c0870151816004602002015260e0870151816005602002015261010087015181600660200201526101208701518160076020020152610140870151816008602002015261016087015181600960200201526101a087015181600a602002015261018087015181600b60200201526101c087015181600c60200201526101e087015181600d602002015261020087015181600e602002015261022087015181600f60200201526102408701518160106020020152610260870151816011602002015261028087015181601260200201526102a087015181601360200201526102c087015181601460200201526102e08701518160156020020152610300870151816016602002015261032087015181601760200201526103408701518160186020020152610360870151816019602002015261038087015181601a60200201526103a087015181601b60200201528751610b14906123d9565b6103808201526020880151610b28906123d9565b6103a08201526040880151610b3c906123d9565b6103c08201526060880151610b50906123d9565b6103e08201526080880151610b64906123d9565b61040082015260e0880151610b78906123d9565b61042082015260a0880151610b8c906123d9565b61044082015260c0880151610ba0906123d9565b6104608201528751610bb1906123d9565b6104808201526020880151610bc5906123d9565b6104a08201526040880151610bd9906123d9565b6104c08201526060880151610bed906123d9565b6104e08201526080880151610c01906123d9565b610500820152606086015160808501516101608a0151600092610c47929091877f000000000000000000000000000000000000000000000000000000000000000061243f565b805160a0870151919250610c5a91612020565b604086018190526101608a01515160c0890151610c8a929161055b91610c809190612020565b8860c00151612020565b604086015260c0870151610c9d9061255d565b606086015260005b610cb16001601c6151a2565b811015610eb5576000610ce560017f00000000000000000000000000000000000000000000000000000000000000006151a2565b821015905080610e5b57610d186107bf8a60e0015188856001610d089190615179565b601c81106107b5576107b561518c565b60a088015260e0890151610d46906107bf9088610d36866001615179565b601c81106107da576107da61518c565b60c0880152606087015160a0880151610d5f9190612020565b60e0880152606087015160c08a0151610d7b91610c8091612020565b6101008801819052610d9d90610d9090612425565b61055b8960e00151612425565b8583610dab60286001615179565b610db59190615179565b60468110610dc557610dc561518c565b60200201526101008701516101608c0151600091610e0291610de8866001615179565b601c8110610df857610df861518c565b6020020151612020565b9050610e1e8161055b8a60e0015187876001610de89190615179565b9050610e2e88604001518261203b565b6040890152606088015160c08b0151610e5491610e4a91612020565b8b60c00151612020565b6060890152505b610e7f8b610140015183601b8110610e7557610e7561518c565b60200201516123d9565b8483610e8d60286001615179565b610e979190615179565b60468110610ea757610ea761518c565b602002015250600101610ca5565b5060408051808201909152600181526002602082015282610ed8601c6028615179565b60468110610ee857610ee861518c565b6020020152604085015183610eff601c6028615179565b60468110610f0f57610f0f61518c565b60200201526101a0890151600090610f26906123d9565b90508083610f36601c6028615179565b610f41906001615179565b60468110610f5157610f5161518c565b602002015260e088015184610f68601c6028615179565b610f73906001615179565b60468110610f8357610f8361518c565b60200201526000610f948486612569565b90506000610fa18361263c565b9050610fad82826126b4565b9c9b505050505050505050505050565b610fc561491c565b50604080516103c0810182526101008082526008602080840191909152600383850152835180850185527f08dbbddedaf64ee8decef3c386e365712391deb46d24ee93929354b9481c99cd81527f1ef73310e1a629ee1dca12b4525b84856d4b32af4379975ce3abf9b029d45efe818301526060840152835180850185527f180253fd74458f495d11e366220e0b8b1ace2ea1acd2460888383b402273bb7a81527f152f2175d510f4c6b7dd34dcd65c1565eebe2a46bf6bf5d3b730364b9f528f51818301526080840152835180850185527f0706286ec8caeaf9a630bbb670fc97508fd6af1fa6a98ea51122cdf981e184c481527f1d0dd40a1b56a77dfc3e7f3512765f7884bf76d8abe61655a26d496b75c3c6ce8183015260a0840152835180850185527f0d6425ab78b54bdc2e8420fe0d9515520d37a1f6d04dece2f57af185179e6a6181527f100a4864a063b3af3c46bcd8f6673d65a96da80bfc434ed118dab343be4f927a8183015260c0840152835180850185527f0ade7885903164e54a3ccc2429615001c0ff3e0ec5a4acb371a25d5e15d670e981527f0522e70c6ed93b9b7578729b8310c267d0deb1c9695c3a233dd997ba701f67af8183015260e0840152835180850185527f22d2dc9c8a8d8d683f0e911d1d07bc066c0933c107ef9564fdca1cf2559d1a0081527f2b0dcf7d83ecf249f51717d2a2aac1af660c2eec742b86551a361ce26382c7698183015291830191909152825180840184527f2594d00a131b347f472a021eac09e25eacba35749a9ba8f8c7f4a726ff63a91081527f2499be5abe1cf5463534a1d0613f82449f1989f1186f2d0b67295bda7f8a0f5581830152610120830152825180840184527f1ea52a7c58f78261ca684a542381ead453ce8dbceb58c95e3564b8d67c518e1d81527f09875c09d2c36ba3caab25772ec7c0bf1d5e81447c510e06e1b88920aa250d3681830152610140830152825180840184527f1f497cbf5284ff29a2d336e599199929a17181c7934fc3fdbd352eac5cb521b981527f13ea38a0bd2aa751a490a724fac818072bd9c0c6beda1fdee6d4ff0432ba9e1b81830152610160830152825180840184527f26131fc1251eb7746e72a19f9f9b250f079744ec926fc2a41fb8a0489d1fb44481527f03588be01690f20304e3d200c3b81a867f03abc37431898437d94c0822213fbb81830152610180830152825180840184527f0384638dd92e0abd1d0455ad4b429bee5960e2f4e0eef28e946561e55a4d980781527f0edd0d417777cdfe14def171f26ffd8849f800a9aa2563c403966bb405f3a5d3818301526101a0830152825180840184527f2342ad3c9f80d265726011de0e98f729369164805b4229a3bf7e04c500d94cdf81527f1756f15def234f58df4a8f68b4f10b26ecda7e6ecebaa8862001746309ea9248818301526101c0830152825180840184527f2c20e6cb1cfaf478d9673a371652e5133aed49a04ffe951f2dc443984785c94681527f1baeded16e0fdb3baf90557e93d7dcbfd0761e64d7967bda2811966fbbfaa636818301526101e0830152825180840184527f138d1fb08ddfa477283ae2dec71c3ed717dae8411f3f37b27bf5fe9488d1e9be81527f02676f66a1177457c55d836bfdf72f4d0d9b367e008e96f9ec265085bf8c1d2081830152610200830152825180840184527f1882013328407779c80f6f7065e661c4a9ef0f06af192c10b13c5e2601a1f8d381527f02ddba1dcb884d05cf49175fcef625cfadffdf89ed5ce3ae5db1f167da530a5481830152610220830152825180840184527f198a1735a9fe5fb6fbaa6d1b2e25108d1e3435ac9d56b8187c88de53b48b7bb981527f1fa57aeaa19667215424dbbfaaac52f9d480a3128fe09f493aa747a1b004854281830152610240830152825180840184527f2b95f58e44085fde26fe49518d4608b25dc00c111ded19ae4b89737e3bccf3c981527f03b870c5743e68c8544ab4818213dede89ad8e640ed43a6538d1eeab011ae16b81830152610260830152825180840184527f01ae22bf031b8c1930dec03b8f4704c49c28cd98474dca7d07875473949ef99881527f03f6eee33948202497991c8673119d4abf66d70d68481c6b80976a643a5b932581830152610280830152825180840184527f22446f485968f51280dc48cc30abf8171154f4910b8798ba65479bdf88c8c46181527f0e13564c484a1b26820e2601e39196e1b936eb5dd4b9cfeb2cd330b28ff915f3818301526102a0830152825180840184527f1b5ff984e06c61d45bbe6f3f6a0e799d975e986b0916547be10ca43147839e0281527f25e0f2d4bb40608a68f3ee8da180c87ca8c87bc35ea252b4a68aa64e54a36bf6818301526102c0830152825180840184527f2cab3861baed5b5ccd0830a5e20c9aab77cd8f4f568bf79b0376d9036133c57781527f07dd4372e0ddf9927f4e175f9d2472040e16b1dbb7661e1abb1090ccb205dd99818301526102e0830152825180840184527f1fb7c5d789d32e42a08e41296286139f603c7607ce186d0cce6e472dfe02147381527f09d80a7c25410f51739aadc54ad122874e4551efc35bd23807ecf23a79ef418a81830152610300830152825180840184527f108788a192d4d3c38e445629bb550acf212f9b2049b6fb1cc76900bd482fb5b081527f195266ac0788c227762333892ad282a4679450ae72e8e8b4a1ead0e63d4f4e0481830152610320830152825180840184527f192a87ba208ab02639f2453bde4d15e8c489e522f16c07fd8e312a10142484d881527f0978af3f655d807c77436eec1810420c3170702a20ae32933baa816253797b1581830152610340830152825180840184527f1a552bd8d3265d1f23e7ff166cf20fffa5c0688c867cfd3a2ea65452d8ad60a481527f1cb1414f7b9f8edb7c7a0d61f66e24e632a4050d9b3be0d6c35109aa9969303981830152610360830152825180840184526001815260028183015261038083015282518084019093527f29c8a94ab2f7f2c7110344ab367552bfe2cf1e4b374083e44458530da00b67f683527f2c5020e20f85671e916492988dd560862e6cd38a99501c4d5d3ff71b72a79891908301526103a081019190915290565b6118ac614e77565b608082146118f75760405162461bcd60e51b81526020600482015260136024820152721a5b9d985b1a5908189e5d195cc81c1bda5b9d606a1b60448201526064015b60405180910390fd5b60408051608081019091528061191160206000868861514f565b61191a916151ce565b815260209081019061193090604090868861514f565b611939916151ce565b815260200161194c60606040868861514f565b611955916151ce565b815260200161196860806060868861514f565b611971916151ce565b90529392505050565b6000602082146119c35760405162461bcd60e51b815260206004820152601460248201527334b73b30b634b210313cba32b99039b1b0b630b960611b60448201526064016118ee565b6119d061055183856151ce565b9392505050565b611a106040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000611a208989898989896128be565b604086019190915260208501919091529083529250611a3f838a612ce9565b608085019190915260608401919091529199919850909650505050505050565b611a67614e9f565b6000611a71614ebe565b84815260e0848101805151602080850191909152815181015160408086019190915282518101516060808701919091529251830151608080870191909152880180515160a0870152805183015160c08701528051820151948601949094529251909101516101008401529051611b0891611aed918491016151ec565b60405160208183030381529060405280519060200120612000565b9150611b1382612db6565b6020850152835260015b611b2960026019615237565b811015611ba957611b4683604051602001611aed91815260200190565b9250611b5183612db6565b85611b5d846002615138565b60198110611b6d57611b6d61518c565b6020020186611b7d856002615138565b611b88906001615179565b60198110611b9857611b9861518c565b602002019190915252600101611b1d565b50611bc082604051602001611aed91815260200190565b91506000611bcd83612db6565b85611bda600160196151a2565b60198110611bea57611bea61518c565b60200201919091525050509250929050565b611c04614edd565b6000805b601c811015611c5857611c2784604051602001611aed91815260200190565b93506000611c3485612db6565b8584601c8110611c4657611c4661518c565b60200201919091525050600101611c08565b5090929050565b611c67614edd565b6000805b601c811015611d2d57611c7c614ebe565b84815260005b6008811015611ce65786610100015183601c8110611ca257611ca261518c565b60200201518160088110611cb857611cb861518c565b602002015182611cc9836001615179565b60098110611cd957611cd961518c565b6020020152600101611c82565b50611cfb81604051602001611aed91906151ec565b94506000611d0886612db6565b8685601c8110611d1a57611d1a61518c565b6020020191909152505050600101611c6b565b50909391925050565b600080611d41614efc565b83815260005b6028811015611d95578561012001518160288110611d6757611d6761518c565b602002015182611d78836001615179565b60298110611d8857611d8861518c565b6020020152600101611d47565b50611daa81604051602001611aed919061524b565b91506000611db783612db6565b5096929550919350505050565b600080611dcf614f1b565b83815260005b611de16001601c6151a2565b811015611f1f5785610140015181601b8110611dff57611dff61518c565b60200201515182611e11836004615138565b611e1c906001615179565b606d8110611e2c57611e2c61518c565b602002015261014086015181601b8110611e4857611e4861518c565b60200201516020015182826004611e5f9190615138565b611e6a906002615179565b606d8110611e7a57611e7a61518c565b602002015261014086015181601b8110611e9657611e9661518c565b60200201516040015182611eab836004615138565b611eb6906003615179565b606d8110611ec657611ec661518c565b602002015261014086015181601b8110611ee257611ee261518c565b60200201516060015182611ef7836004615138565b611f02906004615179565b606d8110611f1257611f1261518c565b6020020152600101611dd5565b50611daa81604051602001611aed9190615280565b600080611f3f614f3a565b83815260005b601c811015611f935785610160015181601c8110611f6557611f6561518c565b602002015182611f76836001615179565b601d8110611f8657611f8661518c565b6020020152600101611f45565b50611daa81604051602001611aed91906152b5565b600080611fb3614f59565b83815261018085018051516020808401919091528151810151604080850191909152825181015160608086019190915292519092015160808401529051611daa91611aed918491016152ea565b600061201a6000805160206154328339815191528361531e565b92915050565b60006000805160206154328339815191528284099392505050565b60006000805160206154328339815191528284089392505050565b600060008051602061543283398151915261207f836000805160206154328339815191526151a2565b84089392505050565b60006119d08361055684612369565b815160009081906120aa908560016107da565b929092149392505050565b60408051610100810182527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffec5181526102d060208201527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffff1191810191909152609060608201527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffff71608082015260f060a08201527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593effffd3160c08201526113b060e08201526000906001825b600881101561219d57612193826105568784612056565b915060010161217c565b506121a6614f77565b60005b60088110156122095760008482600881106121c6576121c661518c565b602002015190506121db816105568985612056565b90506121e681612369565b9050808383600881106121fb576121fb61518c565b6020020152506001016121a9565b5060005b600881101561225e57600087826008811061222a5761222a61518c565b6020020151905061224781848460088110610df857610df861518c565b9050612253868261203b565b95505060010161220d565b506107288483612020565b600080612280600161055b85610556896001612056565b905061228c8482612020565b95945050505050565b600061229f614f96565b6122aa868285612df0565b6122b686868386612fa1565b6122c28686838661318e565b6122cd868285613395565b6122d8868285613587565b6122e4868683866138ec565b6122ef8682856141a7565b6122fa868285614583565b6107288185614885565b61230c614edd565b81815260015b601c811015612363576123448261232a6001846151a2565b601c811061233a5761233a61518c565b602002015161255d565b8282601c81106123565761235661518c565b6020020152600101612312565b50919050565b60008082905060006040516020815260208082015260206040820152826060820152600260008051602061543283398151915203608082015260008051602061543283398151915260a08201526020600060c08360055afa9050806123cd57600080fd5b50506000519392505050565b6040805180820190915260008082526020820152604051806040016040528060888460200151901b846000015117815260200160888460600151901b8460400151178152509050919050565b600061201a826000805160206154328339815191526151a2565b612447614edd565b601c5b80156125535760008461245e6001846151a2565b601c811061246e5761246e61518c565b602002015190506000886124836001856151a2565b601c81106124935761249361518c565b6020020151905060006124ef6124b36124ac858c612020565b6002612020565b61057a8a6124c26001896151a2565b601c81106124d2576124d261518c565b60200201516105566124e98861055660018a612056565b87612056565b9050612510816105566107bf61250a87610556600189612056565b8661203b565b905085841161253f5797508780856125296001876151a2565b601c81106125395761253961518c565b60200201525b5050508061254c90615332565b905061244a565b5095945050505050565b600061201a8283612020565b6040805180820190915260008082526020820152600061258b601c6028615179565b612596906002615179565b90506001604051855151604082015285516020015160608201528451608082015260408160606040840160075afa8216915060015b838110156126245760208102870160208202870181515160408501528151602001516060850152805160808501525050604080830160606040850160075afa8316925060408260808460065afa909216916001016125cb565b50805184526020810151602085015250505092915050565b60408051808201909152600080825260208201527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4782602001517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476126a191906151a2565b6126ab919061531e565b60208301525090565b81516020808401518351848301516040805194850195909552938301919091527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c260608301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed60808301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60a08301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60c083015260e08201526101008101919091527f260e01b251f6f1c7e7ff4e580791dee8ea51d87a358e038b4efe30fac09383c16101208201527f0118c4d5b837bcc2bc89b5b398b5974e9f5944073b32078b7e231fec938883b06101408201527f04fc6369f7110fe3d25156c1bb9a72859cf2a04641f99ba4ee413c80da6a5fe46101608201527f22febda3c0c0632a56475b4214e5615e11e6dd3f96e6cea2854a87d4dacc5e5561018082015260009081906101a001604051602081830303815290604052905060008060086001600160a01b03168360405161284c9190615349565b600060405180830381855afa9150503d8060008114612887576040519150601f19603f3d011682016040523d82523d6000602084013e61288c565b606091505b50915091506000818060200190518101906128a79190615378565b90508280156128b35750805b979650505050505050565b6000808080806128cf876003615179565b6128da90600c615179565b67ffffffffffffffff8111156128f2576128f261539a565b60405190808252806020026020018201604052801561291b578160200160208202803683370190505b5090508760001b816000815181106129355761293561518c565b6020026020010181815250508660001b816001815181106129585761295861518c565b6020026020010181815250508560001b8160028151811061297b5761297b61518c565b60200260200101818152505060005b878110156129dc578a8a828181106129a4576129a461518c565b90506020020135828260036129b99190615179565b815181106129c9576129c961518c565b602090810291909101015260010161298a565b508a5151816129ec896003615179565b815181106129fc576129fc61518c565b6020908102919091018101919091528b51015181612a1b896003615179565b612a26906001615179565b81518110612a3657612a3661518c565b60209081029190910101528a516040015181612a53896003615179565b612a5e906002615179565b81518110612a6e57612a6e61518c565b60209081029190910101528a516060015181612a8b896003615179565b612a96906003615179565b81518110612aa657612aa661518c565b6020908102919091018101919091528b01515181612ac5896003615179565b612ad0906004615179565b81518110612ae057612ae061518c565b6020908102919091018101919091528b810151015181612b01896003615179565b612b0c906005615179565b81518110612b1c57612b1c61518c565b6020908102919091018101919091528b01516040015181612b3e896003615179565b612b49906006615179565b81518110612b5957612b5961518c565b6020908102919091018101919091528b01516060015181612b7b896003615179565b612b86906007615179565b81518110612b9657612b9661518c565b602090810291909101015260408b01515181612bb3896003615179565b612bbe906008615179565b81518110612bce57612bce61518c565b60209081029190910181019190915260408c0151015181612bf0896003615179565b612bfb906009615179565b81518110612c0b57612c0b61518c565b60209081029190910101526040808c0151015181612c2a896003615179565b612c3590600a615179565b81518110612c4557612c4561518c565b602090810291909101015260408b01516060015181612c65896003615179565b612c7090600b615179565b81518110612c8057612c8061518c565b602002602001018181525050612ca081604051602001611aed91906153b0565b9150612cab82612db6565b6040805160208101869052929750909550612cc69101611aed565b91506000612cd383612db6565b50959c949b509499509097509195505050505050565b6000806000612cf6614fb5565b85815260a0858101805151602080850191909152815181015160408086019190915282518101516060808701919091529251830151608086015260c0808a0180515195870195909552845183015190860152835181015160e086015292518201516101008501528188018051516101208601528051820151610140860152805184015161016086015251909101516101808401529051612d9c91611aed918491016153e6565b9150612da782612db6565b90979096509194509092505050565b600080826fffffffffffffffffffffffffffffffff8116608082901c612ddb82612000565b9450612de681612000565b9350505050915091565b6000612dfd8460076148eb565b90507f183227397098d014dc2822db40c0ac2e9419f4243cdcb848a1f0fac9f80000006000612e60612e5a612e33856003612056565b610556612e4f612e448b60006148eb565b6105568c601c6148eb565b6105568b601b6148eb565b83612020565b9050612ee1612ed6612ebd612ea4612e8b8561055b612e808d60026148eb565b6105568e601b6148eb565b61055b612e998c60036148eb565b6105568d601c6148eb565b61055b612eb28b60046148eb565b6105568c601d6148eb565b61055b612ecb8a60056148eb565b6105568b601e6148eb565b61055b8860016148eb565b9050612f008161055b612ef5866001612056565b6105568a60266148eb565b9050612f0c8184612020565b9050612f188185612020565b85525060009050612f54612f49612f3e612f3388601b6148eb565b61055b89601e6148eb565b61057a8860236148eb565b61055b8760006148eb565b9050612f6581610556846002612056565b9050612f7681610556846001612056565b9050612f828183612020565b9050612f8e8184612020565b9050808460015b60200201525050505050565b6000806000612fd9612fcf612fb789601b6148eb565b61055b612fc58b60116148eb565b8a60600151612020565b876080015161203b565b905061301281610556613008612ff08b601c6148eb565b61055b612ffe8d60126148eb565b8c60600151612020565b896080015161203b565b9050613037816105566130086130298b601d6148eb565b61055b612ffe8d60136148eb565b905061305c8161055661300861304e8b601e6148eb565b61055b612ffe8d60146148eb565b925060009050613081612fcf61307389601b6148eb565b61055b612fc58b600d6148eb565b90506130a6816105566130086130988b601c6148eb565b61055b612ffe8d600e6148eb565b90506130cb816105566130086130bd8b601d6148eb565b61055b612ffe8d600f6148eb565b90506130f0816105566130086130e28b601e6148eb565b61055b612ffe8d60106148eb565b91506000905061311861311261310789601f6148eb565b61055b8a60196148eb565b84612020565b905061314d8161057a61314761312f8b60276148eb565b61055b61313d8d601a6148eb565b8c60a00151612020565b85612020565b90506131598185612020565b604086015250600061317d61314761317289601a6148eb565b6105568a60276148eb565b606090950194909452505050505050565b6000806131ed6131d56131bd6131a86130088a60156148eb565b61055b6131b68b60166148eb565b8a51612020565b61055b6131cb8a60176148eb565b8960200151612020565b61055b6131e38960186148eb565b8860400151612020565b9150600061322561320c61320289601b6148eb565b886080015161203b565b61055b61321a8a60036148eb565b6105568b60236148eb565b9050600061325061323789601c6148eb565b61055b6132458b60006148eb565b6105568c60246148eb565b9050600061327b6132628a601d6148eb565b61055b6132708c60016148eb565b6105568d60256148eb565b90506132bb6132a36132958561055b868d60000151612020565b61055b848c60200151612020565b61055b6132b18c60046148eb565b8b60400151612020565b935050505060006132d06131128860206148eb565b905060006132e26131128960206148eb565b9050600061331b6133026132f78b60226148eb565b61055b8c60066148eb565b61057a6133108c60226148eb565b6105568d60066148eb565b9050600061334061333a61332f8789612020565b6105568d60206148eb565b83612056565b905061334c8188612020565b905060006133756133676133618d60066148eb565b87612020565b61057a6133618e60216148eb565b60808a018390529050808960055b60200201525050505050505050505050565b60006133a360006001612056565b905060006133b360006002612056565b905060006133c360006003612056565b905060006133e06133d588601c6148eb565b61057a89601b6148eb565b905060006133fd6133f289601d6148eb565b61057a8a601c6148eb565b9050600061341a61340f8a601e6148eb565b61057a8b601d6148eb565b9050600061343761342c8b60236148eb565b61057a8c601e6148eb565b90508361344881610556818b61203b565b905061345881610556878a61203b565b905061346881610556878961203b565b9050613479816105568d60086148eb565b9050613485818a612020565b60c08b0152508261349a81610556818b61203b565b90506134aa81610556868a61203b565b90506134ba81610556868961203b565b90506134cb816105568d60086148eb565b90506134d7818a612020565b60e08b015250816134ec81610556818b61203b565b90506134fc81610556858a61203b565b905061350c81610556858961203b565b905061351d816105568d60086148eb565b9050613529818a612020565b6101008b0152508061353f81610556818b61203b565b905061354f81610556848a61203b565b905061355f81610556848961203b565b9050613570816105568d60086148eb565b905061357c818a612020565b9050808a6009613383565b6135c76040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6135d284601c6148eb565b81526135df84601d6148eb565b60208201526135ef8460236148eb565b60408201526135ff8460266148eb565b606082015261360f8460256148eb565b608082015261361f8460246148eb565b60a082015260006136318560026148eb565b905060006136408660006148eb565b9050600061365684604001518560000151612056565b9050600061366c85602001518660200151612020565b606086015190915086906000906136839080612020565b905060006136a261369c89602001518a60600151612020565b88612020565b905060006136c26136bb8a60a001518b6040015161203b565b8a5161203b565b90506136d16133618288612020565b90506136f86136f26136ec6136e68487612056565b88612056565b8461203b565b8361203b565b905061372061371561370a8387612020565b6105568f60096148eb565b61055660018a612056565b6101408c015250505050602085015160808601516000916137409161203b565b9050600061375f613755886060015188612020565b8860200151612056565b905060006137856137708487612020565b61055b6131478b60a001518c60000151612056565b90506137ad6137a2613797838c612020565b6105568e60096148eb565b610556600189612056565b6101608b015250600091506137cf90506137c883601161203b565b8751612020565b905060006137dd838461203b565b90506137e9818261203b565b905060006137f8836009612020565b905061382261381c6131126138158b60a001518c6000015161203b565b8b5161203b565b82612056565b60c0890181905260009061383e9061369c9061370a908d612020565b90506138518b600a60200201518261203b565b6101408c0152505086516000925061387991506137c890613872908061203b565b885161203b565b905060006138bb613896836105568a600001518b60a00151612056565b602089015161057a906138a9908061203b565b6105568b602001518c6080015161203b565b90506138d889600b602002015161055b61369c61370a858d612020565b89600b602002015250505050505050505050565b613996604051806102c00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6139cb6139b26139a787601b6148eb565b6105568860246148eb565b61055b6139c08860236148eb565b61055689601c6148eb565b8152613a10613a056139ec6139e188601b6148eb565b61055689601e6148eb565b61055b6139fa89601c6148eb565b6105568a601d6148eb565b61057a8760256148eb565b60408201819052613a2590600160441b612020565b60408201819052613a3b9061057a8760266148eb565b604082018190528151613a4e919061203b565b60408201819052613a64906105568760056148eb565b60408201528051613a7990600160441b612020565b808252613a999061055b613a8e8860236148eb565b6105568960246148eb565b80825260208201819052613ab59061057a612f3388601d6148eb565b60208201819052613acb906105568760046148eb565b6020820152805160608201819052613ae89061055b87601e6148eb565b60608201819052613b0c9061057a613b018860256148eb565b61055b8960266148eb565b60608201819052613b22906105568760006148eb565b8160600181815250506000613b4c613b428360200151846040015161203b565b836060015161203b565b9050613b5d816105568860036148eb565b9050613b75613b6d8760246148eb565b614000612020565b60808301819052613b8b9061055b8860236148eb565b60808301819052613b9e90614000612020565b60808301819052613bb49061055b88601d6148eb565b60808301819052613bc790614000612020565b60808301819052613bdd9061055b88601c6148eb565b60808301819052613bf090614000612020565b60808301819052613c069061055b88601b6148eb565b60808301819052613c1c9061057a88601e6148eb565b60808301819052613c32906105568860056148eb565b6080830152613c45613b6d8760256148eb565b60a08301819052613c5b9061055b8860246148eb565b60a08301819052613c6e90614000612020565b60a08301819052613c849061055b8860236148eb565b60a08301819052613c9790614000612020565b60a08301819052613cad9061055b88601e6148eb565b60a08301819052613cc090614000612020565b60a08301819052613cd69061055b88601d6148eb565b60a08301819052613cec9061057a8860266148eb565b60a08301819052613d02906105568860006148eb565b60a083018190526080830151600091613d1b919061203b565b9050613d2c816105568960046148eb565b9050613d46613d3c88601d6148eb565b8760400151612020565b60c08401819052613d5f9061055b6131cb8a601c6148eb565b60c08401819052613d7f9061055b613d788a601b6148eb565b8951612020565b60c08401819052613d959061055b8960016148eb565b60c0840181905260e08401819052613db29061057a89601e6148eb565b60c0840152613dc56133d58860236148eb565b610140840152613de4613dd98860266148eb565b61057a89601e6148eb565b610120840152610140830151613e0990613dfe9080612020565b846101400151612056565b610280840152610140830151613e4c90613e4190613e3a9061055660016000805160206154328339815191526151a2565b600161203b565b846101200151612020565b6101608401819052613e8390613e7590610556613e6a8b60026148eb565b6105568c60036148eb565b6105566133618a600a6148eb565b6101a0860152610280830151613ea590613e7590610556613e6a8b60026148eb565b6101c086015260c0830151613ecd90610556613ec28a60026148eb565b6105568b60036148eb565b6101e08401526000613eed613ee389601e6148eb565b8560e00151612056565b9050613efc61381c8283612020565b6101a0850152613f106131e38960256148eb565b6101008501819052613f349061055b613f2a8b60246148eb565b8a60200151612020565b6101008501819052613f4e9061055b6131b68b60236148eb565b610100850152613f6d613f628960266148eb565b856101000151612056565b6101008501526000613f8361340f8a60256148eb565b9050613fd9613fb2612e5a613e3a886101400151600160008051602061543283398151915261055691906151a2565b610556613e3a886101000151600160008051602061543283398151915261055691906151a2565b610180860152610100850151613ffe90613ff39080612020565b866101000151612056565b6101c08601526101808501516140319061401d906105568c60076148eb565b61055661402b8c600a6148eb565b89612020565b6101e08801526102808501516140509061401d906105568c60076148eb565b6102008801526101c085015161406f9061401d906105568c60076148eb565b6102208801526101a085015161408a906105568b60076148eb565b6102008601526140a961409e8a60246148eb565b61057a8b601c6148eb565b6102208601526101408501516140e99061340f906140de90613e3a9061055660016000805160206154328339815191526151a2565b876102200151612020565b61024086018190526101e086015161026087018190526141209161055b906105566141158e60056148eb565b6105568f60026148eb565b610260860181905260c0860151614144919061055b906105566141158e60006148eb565b610260860181905261020086015161415c919061203b565b6102608601819052614172906136ec908661203b565b6102a0860181905261418c9061055661402b8c600a6148eb565b6102a0860181905287600c6020020152505050505050505050565b61422e60405180610220016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61424761423c85601b6148eb565b61055b8660026148eb565b815261426261425785601c6148eb565b61055b8660036148eb565b602082015261428061427585601d6148eb565b61055b8660046148eb565b604082015261429e61429385601e6148eb565b61055b8660056148eb565b606082015280516142d0906142c9906142c2906142bb9080612020565b8451612020565b8351612020565b8251612020565b6080820152602081015161430e90614304906142fa906142f09080612020565b8460200151612020565b8360200151612020565b8260200151612020565b60a0820152604081015161434c90614342906143389061432e9080612020565b8460400151612020565b8360400151612020565b8260400151612020565b60c0820152606081015161438a90614380906143769061436c9080612020565b8460600151612020565b8360600151612020565b8260600151612020565b60e0820152608081015160a08201516143a3919061203b565b61010082015260c081015160e08201516143bd919061203b565b61012082015260a08101516143e1906143d6908061203b565b82610120015161203b565b61014082015260e0810151614405906143fa908061203b565b82610100015161203b565b61016082015261012081015161441b908061203b565b6101e0820181905261443c90614431908061203b565b82610160015161203b565b6101e0820152610100810151614452908061203b565b6101a0820181905261447390614468908061203b565b82610140015161203b565b6101a0820181905261016082015161448a9161203b565b6101808201526101408101516101e08201516144a6919061203b565b6101c08201526144ba612e5a85600b6148eb565b61020082018190526102408401516101808301516144e59261055b916105569061057a8a60236148eb565b8360126020020152614515836013602002015161055b836102000151610556856101a0015161057a8a60246148eb565b8360136020020152614545836014602002015161055b836102000151610556856101c0015161057a8a60256148eb565b8360146020020152614575836015602002015161055b836102000151610556856101e0015161057a8a60266148eb565b836015602002015250505050565b6145e060405180610160016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600060405180608001604052806146167f10dc6e9c006ea38b04b1e03b4bd9490c0d03f98929ca1d7fb56821fd19d3b6e7612000565b81526020016146447f0c28145b6a44df3e0149b3d0a30b3bb599df9756d4dd9b84a86b38cfb45a740b612000565b81526020016146717e544b8338791518b2c7645a50392798b21f75bb60e3596170067d00141cac15612000565b815260200161469f7f222c01175718386f2e2e82eb122789e352e105a3b8fa852613bc534433ee428b612000565b905290506146bc6146b186601b6148eb565b61055b8760026148eb565b61012083018190526146f0906146e590613e41906146da9080612020565b856101200151612020565b836101200151612020565b82526146fd85601c6148eb565b602083015261470d85601d6148eb565b604083015261471d85601e6148eb565b60608301528151602083015161474591613b429161473b919061203b565b846040015161203b565b608083015261475861311286600c6148eb565b610140830152815161477a9061477090836000610df8565b836080015161203b565b60a08301526147a6846016602002015161055b8461014001516105568660a0015161057a8b60236148eb565b6102c085015260208201516147c19061477090836001610df8565b60c08301526147ed846017602002015161055b8461014001516105568660c0015161057a8b60246148eb565b6102e085015260408201516148089061477090836002610df8565b60e0830152614834846018602002015161055b8461014001516105568660e0015161057a8b60256148eb565b610300850152606082015161484f9061477090836003610df8565b61010083015261487d846019602002015161055b84610140015161055686610100015161057a8b60266148eb565b846019612f95565b60006148928184816107da565b905060015b601a8110156148e4576148da8261055b8684601a81106148b9576148b961518c565b6020020151866148ca6001876151a2565b60198110610df857610df861518c565b9150600101614897565b5092915050565b6000828260278111156149005761490061541b565b602881106149105761491061518c565b60200201519392505050565b604051806103c0016040528060008152602001600081526020016000815260200161495a604051806040016040528060008152602001600081525090565b815260200161497c604051806040016040528060008152602001600081525090565b815260200161499e604051806040016040528060008152602001600081525090565b81526020016149c0604051806040016040528060008152602001600081525090565b81526020016149e2604051806040016040528060008152602001600081525090565b8152602001614a04604051806040016040528060008152602001600081525090565b8152602001614a26604051806040016040528060008152602001600081525090565b8152602001614a48604051806040016040528060008152602001600081525090565b8152602001614a6a604051806040016040528060008152602001600081525090565b8152602001614a8c604051806040016040528060008152602001600081525090565b8152602001614aae604051806040016040528060008152602001600081525090565b8152602001614ad0604051806040016040528060008152602001600081525090565b8152602001614af2604051806040016040528060008152602001600081525090565b8152602001614b14604051806040016040528060008152602001600081525090565b8152602001614b36604051806040016040528060008152602001600081525090565b8152602001614b58604051806040016040528060008152602001600081525090565b8152602001614b7a604051806040016040528060008152602001600081525090565b8152602001614b9c604051806040016040528060008152602001600081525090565b8152602001614bbe604051806040016040528060008152602001600081525090565b8152602001614be0604051806040016040528060008152602001600081525090565b8152602001614c02604051806040016040528060008152602001600081525090565b8152602001614c24604051806040016040528060008152602001600081525090565b8152602001614c46604051806040016040528060008152602001600081525090565b8152602001614c68604051806040016040528060008152602001600081525090565b8152602001614c8a604051806040016040528060008152602001600081525090565b8152602001614cac604051806040016040528060008152602001600081525090565b8152602001614cce604051806040016040528060008152602001600081525090565b905290565b604051806101c00160405280614ce7614e77565b8152602001614cf4614e77565b8152602001614d01614e77565b8152602001614d0e614e77565b8152602001614d1b614e77565b8152602001614d28614e77565b8152602001614d35614e77565b8152602001614d42614e77565b8152602001614d4f614fd4565b8152602001614d5c615002565b8152602001614d69615021565b8152602001614d76614edd565b8152602001614d83614e77565b8152602001614cce614e77565b604051806101000160405280614dd56040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001614de2614e9f565b8152602001614def614edd565b8152602001614dfc614edd565b8152602001600081526020016000815260200160008152602001600081525090565b604051806108c001604052806046906020820280368337509192915050565b604051806108c001604052806046905b6040805180820190915260008082526020820152815260200190600190039081614e4d5790505090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518061032001604052806019906020820280368337509192915050565b6040518061012001604052806009906020820280368337509192915050565b604051806103800160405280601c906020820280368337509192915050565b6040518061052001604052806029906020820280368337509192915050565b60405180610da00160405280606d906020820280368337509192915050565b604051806103a00160405280601d906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b6040518061010001604052806008906020820280368337509192915050565b604051806103400160405280601a906020820280368337509192915050565b604051806101a00160405280600d906020820280368337509192915050565b604051806103800160405280601c905b614fec614f77565b815260200190600190039081614fe45790505090565b6040518061050001604052806028906020820280368337509192915050565b604051806103600160405280601b905b615039614e77565b8152602001906001900390816150315790505090565b6000806000806040858703121561506557600080fd5b843567ffffffffffffffff81111561507c57600080fd5b8501601f8101871361508d57600080fd5b803567ffffffffffffffff8111156150a457600080fd5b8760208284010111156150b657600080fd5b60209182019550935085013567ffffffffffffffff8111156150d757600080fd5b8501601f810187136150e857600080fd5b803567ffffffffffffffff8111156150ff57600080fd5b8760208260051b840101111561511457600080fd5b949793965060200194505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761201a5761201a615122565b6000808585111561515f57600080fd5b8386111561516c57600080fd5b5050820193919092039150565b8082018082111561201a5761201a615122565b634e487b7160e01b600052603260045260246000fd5b8181038181111561201a5761201a615122565b6000600182016151c7576151c7615122565b5060010190565b8035602083101561201a57600019602084900360031b1b1692915050565b60008183825b60098110156152115781518352602092830192909101906001016151f2565b5050506101208201905092915050565b634e487b7160e01b600052601260045260246000fd5b60008261524657615246615221565b500490565b60008183825b6029811015615270578151835260209283019290910190600101615251565b5050506105208201905092915050565b60008183825b606d8110156152a5578151835260209283019290910190600101615286565b505050610da08201905092915050565b60008183825b601d8110156152da5781518352602092830192909101906001016152bb565b5050506103a08201905092915050565b60008183825b600581101561530f5781518352602092830192909101906001016152f0565b50505060a08201905092915050565b60008261532d5761532d615221565b500690565b60008161534157615341615122565b506000190190565b6000825160005b8181101561536a5760208186018101518583015201615350565b506000920191825250919050565b60006020828403121561538a57600080fd5b815180151581146119d057600080fd5b634e487b7160e01b600052604160045260246000fd5b8151600090829060208501835b828110156153db5781518452602093840193909101906001016153bd565b509195945050505050565b60008183825b600d81101561540b5781518352602092830192909101906001016153ec565b5050506101a08201905092915050565b634e487b7160e01b600052602160045260246000fdfe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a2646970667358221220044543bff8b2b24a30dd6804f222d548d6645c1434ef091c4d1bcddf5e75476564736f6c634300081b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}