{
  "language": "Solidity",
  "sources": {
    "@layerzerolabs/lz-evm-messagelib-v2/contracts/interfaces/IExecutor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { Origin } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\";\n\nimport { IWorker } from \"./IWorker.sol\";\nimport { ILayerZeroExecutor } from \"./ILayerZeroExecutor.sol\";\nimport { ILayerZeroReadExecutor } from \"./ILayerZeroReadExecutor.sol\";\n\ninterface IExecutor is IWorker, ILayerZeroExecutor, ILayerZeroReadExecutor {\n    struct DstConfigParam {\n        uint32 dstEid;\n        uint64 lzReceiveBaseGas;\n        uint64 lzComposeBaseGas;\n        uint16 multiplierBps;\n        uint128 floorMarginUSD;\n        uint128 nativeCap;\n    }\n\n    struct DstConfig {\n        uint64 lzReceiveBaseGas;\n        uint16 multiplierBps;\n        uint128 floorMarginUSD; // uses priceFeed PRICE_RATIO_DENOMINATOR\n        uint128 nativeCap;\n        uint64 lzComposeBaseGas;\n    }\n\n    struct ExecutionParams {\n        address receiver;\n        Origin origin;\n        bytes32 guid;\n        bytes message;\n        bytes extraData;\n        uint256 gasLimit;\n    }\n\n    struct NativeDropParams {\n        address receiver;\n        uint256 amount;\n    }\n\n    event DstConfigSet(DstConfigParam[] params);\n    event NativeDropApplied(Origin origin, uint32 dstEid, address oapp, NativeDropParams[] params, bool[] success);\n\n    function dstConfig(uint32 _dstEid) external view returns (uint64, uint16, uint128, uint128, uint64);\n}\n"
    },
    "@layerzerolabs/lz-evm-messagelib-v2/contracts/interfaces/IExecutorFeeLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { IExecutor } from \"./IExecutor.sol\";\n\ninterface IExecutorFeeLib {\n    struct FeeParams {\n        address priceFeed;\n        uint32 dstEid;\n        address sender;\n        uint256 calldataSize;\n        uint16 defaultMultiplierBps;\n    }\n\n    struct FeeParamsForRead {\n        address priceFeed;\n        address sender;\n        uint16 defaultMultiplierBps;\n    }\n\n    error Executor_NoOptions();\n    error Executor_NativeAmountExceedsCap(uint256 amount, uint256 cap);\n    error Executor_UnsupportedOptionType(uint8 optionType);\n    error Executor_InvalidExecutorOptions(uint256 cursor);\n    error Executor_ZeroLzReceiveGasProvided();\n    error Executor_ZeroLzComposeGasProvided();\n    error Executor_ZeroCalldataSizeProvided();\n    error Executor_EidNotSupported(uint32 eid);\n\n    function getFeeOnSend(\n        FeeParams calldata _params,\n        IExecutor.DstConfig calldata _dstConfig,\n        bytes calldata _options\n    ) external returns (uint256 fee);\n\n    function getFee(\n        FeeParams calldata _params,\n        IExecutor.DstConfig calldata _dstConfig,\n        bytes calldata _options\n    ) external view returns (uint256 fee);\n\n    function getFeeOnSend(\n        FeeParamsForRead calldata _params,\n        IExecutor.DstConfig calldata _dstConfig,\n        bytes calldata _options\n    ) external returns (uint256 fee);\n\n    function getFee(\n        FeeParamsForRead calldata _params,\n        IExecutor.DstConfig calldata _dstConfig,\n        bytes calldata _options\n    ) external view returns (uint256 fee);\n\n    function version() external view returns (uint64 major, uint8 minor);\n}\n"
    },
    "@layerzerolabs/lz-evm-messagelib-v2/contracts/interfaces/ILayerZeroExecutor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface ILayerZeroExecutor {\n    // @notice query price and assign jobs at the same time\n    // @param _dstEid - the destination endpoint identifier\n    // @param _sender - the source sending contract address. executors may apply price discrimination to senders\n    // @param _calldataSize - dynamic data size of message + caller params\n    // @param _options - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\n    function assignJob(\n        uint32 _dstEid,\n        address _sender,\n        uint256 _calldataSize,\n        bytes calldata _options\n    ) external returns (uint256 price);\n\n    // @notice query the executor price for relaying the payload and its proof to the destination chain\n    // @param _dstEid - the destination endpoint identifier\n    // @param _sender - the source sending contract address. executors may apply price discrimination to senders\n    // @param _calldataSize - dynamic data size of message + caller params\n    // @param _options - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\n    function getFee(\n        uint32 _dstEid,\n        address _sender,\n        uint256 _calldataSize,\n        bytes calldata _options\n    ) external view returns (uint256 price);\n}\n"
    },
    "@layerzerolabs/lz-evm-messagelib-v2/contracts/interfaces/ILayerZeroReadExecutor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface ILayerZeroReadExecutor {\n    // @notice query price and assign jobs at the same time\n    // @param _sender - the source sending contract address. executors may apply price discrimination to senders\n    // @param _options - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\n    function assignJob(address _sender, bytes calldata _options) external returns (uint256 fee);\n\n    // @notice query the executor price for executing the payload on this chain\n    // @param _sender - the source sending contract address. executors may apply price discrimination to senders\n    // @param _options - optional parameters for extra service plugins, e.g. sending dust tokens\n    function getFee(address _sender, bytes calldata _options) external view returns (uint256 fee);\n}\n"
    },
    "@layerzerolabs/lz-evm-messagelib-v2/contracts/interfaces/ILayerZeroTreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface ILayerZeroTreasury {\n    function getFee(\n        address _sender,\n        uint32 _dstEid,\n        uint256 _totalNativeFee,\n        bool _payInLzToken\n    ) external view returns (uint256 fee);\n\n    function payFee(\n        address _sender,\n        uint32 _dstEid,\n        uint256 _totalNativeFee,\n        bool _payInLzToken\n    ) external payable returns (uint256 fee);\n}\n"
    },
    "@layerzerolabs/lz-evm-messagelib-v2/contracts/interfaces/IWorker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IWorker {\n    event SetWorkerLib(address workerLib);\n    event SetPriceFeed(address priceFeed);\n    event SetDefaultMultiplierBps(uint16 multiplierBps);\n    event SetSupportedOptionTypes(uint32 dstEid, uint8[] optionTypes);\n    event Withdraw(address lib, address to, uint256 amount);\n\n    error Worker_NotAllowed();\n    error Worker_OnlyMessageLib();\n    error Worker_RoleRenouncingDisabled();\n\n    function setPriceFeed(address _priceFeed) external;\n\n    function priceFeed() external view returns (address);\n\n    function setDefaultMultiplierBps(uint16 _multiplierBps) external;\n\n    function defaultMultiplierBps() external view returns (uint16);\n\n    function withdrawFee(address _lib, address _to, uint256 _amount) external;\n\n    function setSupportedOptionTypes(uint32 _eid, uint8[] calldata _optionTypes) external;\n\n    function getSupportedOptionTypes(uint32 _eid) external view returns (uint8[] memory);\n}\n"
    },
    "@layerzerolabs/lz-evm-messagelib-v2/contracts/libs/SafeCall.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.20;\n\n/// @dev copied from https://github.com/nomad-xyz/ExcessivelySafeCall/blob/main/src/ExcessivelySafeCall.sol.\nlibrary SafeCall {\n    /// @notice calls a contract with a specified gas limit and value and captures the return data\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _value The value in wei to send to the remote contract\n    /// to memory.\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function safeCall(\n        address _target,\n        uint256 _gas,\n        uint256 _value,\n        uint16 _maxCopy,\n        bytes memory _calldata\n    ) internal returns (bool, bytes memory) {\n        // check that target has code\n        uint size;\n        assembly {\n            size := extcodesize(_target)\n        }\n        if (size == 0) {\n            return (false, new bytes(0));\n        }\n\n        // set up for assembly call\n        uint256 _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly {\n            _success := call(\n                _gas, // gas\n                _target, // recipient\n                _value, // ether value\n                add(_calldata, 0x20), // inloc\n                mload(_calldata), // inlen\n                0, // outloc\n                0 // outlen\n            )\n            // limit our copy to 100 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) {\n                _toCopy := _maxCopy\n            }\n            // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n            // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n\n    /// @notice Use when you _really_ really _really_ don't trust the called\n    /// contract. This prevents the called contract from causing reversion of\n    /// the caller in as many ways as we can.\n    /// @dev The main difference between this and a solidity low-level call is\n    /// that we limit the number of bytes that the callee can cause to be\n    /// copied to caller memory. This prevents stupid things like malicious\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\n    /// to memory.\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function safeStaticCall(\n        address _target,\n        uint256 _gas,\n        uint16 _maxCopy,\n        bytes memory _calldata\n    ) internal view returns (bool, bytes memory) {\n        // check that target has code\n        uint size;\n        assembly {\n            size := extcodesize(_target)\n        }\n        if (size == 0) {\n            return (false, new bytes(0));\n        }\n\n        // set up for assembly call\n        uint256 _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly {\n            _success := staticcall(\n                _gas, // gas\n                _target, // recipient\n                add(_calldata, 0x20), // inloc\n                mload(_calldata), // inlen\n                0, // outloc\n                0 // outlen\n            )\n            // limit our copy to 256 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) {\n                _toCopy := _maxCopy\n            }\n            // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n            // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-messagelib-v2/contracts/MessageLibBase.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\n/// @dev simply a container of endpoint address and local eid\nabstract contract MessageLibBase {\n    address internal immutable endpoint;\n    uint32 internal immutable localEid;\n\n    error LZ_MessageLib_OnlyEndpoint();\n\n    modifier onlyEndpoint() {\n        if (endpoint != msg.sender) revert LZ_MessageLib_OnlyEndpoint();\n        _;\n    }\n\n    constructor(address _endpoint, uint32 _localEid) {\n        endpoint = _endpoint;\n        localEid = _localEid;\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-messagelib-v2/contracts/SendLibBase.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Transfer } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Transfer.sol\";\n\nimport { ILayerZeroExecutor } from \"./interfaces/ILayerZeroExecutor.sol\";\nimport { ILayerZeroTreasury } from \"./interfaces/ILayerZeroTreasury.sol\";\nimport { SafeCall } from \"./libs/SafeCall.sol\";\nimport { MessageLibBase } from \"./MessageLibBase.sol\";\n\nstruct WorkerOptions {\n    uint8 workerId;\n    bytes options;\n}\n\nstruct SetDefaultExecutorConfigParam {\n    uint32 eid;\n    ExecutorConfig config;\n}\n\nstruct ExecutorConfig {\n    uint32 maxMessageSize;\n    address executor;\n}\n\n/// @dev base contract for both SendLibBaseE1 and SendLibBaseE2\nabstract contract SendLibBase is MessageLibBase, Ownable {\n    using SafeCall for address;\n\n    address private constant DEFAULT_CONFIG = address(0);\n    uint16 internal constant TREASURY_MAX_COPY = 32;\n\n    uint256 internal immutable treasuryGasLimit;\n    uint256 internal treasuryNativeFeeCap;\n\n    // config\n    address public treasury;\n    mapping(address oapp => mapping(uint32 eid => ExecutorConfig)) public executorConfigs;\n\n    // accumulated fees for workers and treasury\n    mapping(address worker => uint256) public fees;\n\n    event ExecutorFeePaid(address executor, uint256 fee);\n    event TreasurySet(address treasury);\n    event DefaultExecutorConfigsSet(SetDefaultExecutorConfigParam[] params);\n    event ExecutorConfigSet(address oapp, uint32 eid, ExecutorConfig config);\n    event TreasuryNativeFeeCapSet(uint256 newTreasuryNativeFeeCap);\n\n    error LZ_MessageLib_InvalidMessageSize(uint256 actual, uint256 max);\n    error LZ_MessageLib_InvalidAmount(uint256 requested, uint256 available);\n    error LZ_MessageLib_TransferFailed();\n    error LZ_MessageLib_InvalidExecutor();\n    error LZ_MessageLib_ZeroMessageSize();\n\n    constructor(\n        address _endpoint,\n        uint32 _localEid,\n        uint256 _treasuryGasLimit,\n        uint256 _treasuryNativeFeeCap\n    ) MessageLibBase(_endpoint, _localEid) {\n        treasuryGasLimit = _treasuryGasLimit;\n        treasuryNativeFeeCap = _treasuryNativeFeeCap;\n    }\n\n    function setDefaultExecutorConfigs(SetDefaultExecutorConfigParam[] calldata _params) external onlyOwner {\n        for (uint256 i = 0; i < _params.length; ++i) {\n            SetDefaultExecutorConfigParam calldata param = _params[i];\n\n            if (param.config.executor == address(0x0)) revert LZ_MessageLib_InvalidExecutor();\n            if (param.config.maxMessageSize == 0) revert LZ_MessageLib_ZeroMessageSize();\n\n            executorConfigs[DEFAULT_CONFIG][param.eid] = param.config;\n        }\n        emit DefaultExecutorConfigsSet(_params);\n    }\n\n    /// @dev the new value can not be greater than the old value, i.e. down only\n    function setTreasuryNativeFeeCap(uint256 _newTreasuryNativeFeeCap) external onlyOwner {\n        // assert the new value is no greater than the old value\n        if (_newTreasuryNativeFeeCap > treasuryNativeFeeCap)\n            revert LZ_MessageLib_InvalidAmount(_newTreasuryNativeFeeCap, treasuryNativeFeeCap);\n        treasuryNativeFeeCap = _newTreasuryNativeFeeCap;\n        emit TreasuryNativeFeeCapSet(_newTreasuryNativeFeeCap);\n    }\n\n    // ============================ View ===================================\n    // @dev get the executor config and if not set, return the default config\n    function getExecutorConfig(address _oapp, uint32 _remoteEid) public view returns (ExecutorConfig memory rtnConfig) {\n        ExecutorConfig storage defaultConfig = executorConfigs[DEFAULT_CONFIG][_remoteEid];\n        ExecutorConfig storage customConfig = executorConfigs[_oapp][_remoteEid];\n\n        uint32 maxMessageSize = customConfig.maxMessageSize;\n        rtnConfig.maxMessageSize = maxMessageSize != 0 ? maxMessageSize : defaultConfig.maxMessageSize;\n\n        address executor = customConfig.executor;\n        rtnConfig.executor = executor != address(0x0) ? executor : defaultConfig.executor;\n    }\n\n    // ======================= Internal =======================\n    function _assertMessageSize(uint256 _actual, uint256 _max) internal pure {\n        if (_actual > _max) revert LZ_MessageLib_InvalidMessageSize(_actual, _max);\n    }\n\n    function _payExecutor(\n        address _executor,\n        uint32 _dstEid,\n        address _sender,\n        uint256 _msgSize,\n        bytes memory _executorOptions\n    ) internal returns (uint256 executorFee) {\n        executorFee = ILayerZeroExecutor(_executor).assignJob(_dstEid, _sender, _msgSize, _executorOptions);\n        if (executorFee > 0) {\n            fees[_executor] += executorFee;\n        }\n        emit ExecutorFeePaid(_executor, executorFee);\n    }\n\n    function _payTreasury(\n        address _sender,\n        uint32 _dstEid,\n        uint256 _totalNativeFee,\n        bool _payInLzToken\n    ) internal returns (uint256 treasuryNativeFee, uint256 lzTokenFee) {\n        if (treasury != address(0x0)) {\n            bytes memory callData = abi.encodeCall(\n                ILayerZeroTreasury.payFee,\n                (_sender, _dstEid, _totalNativeFee, _payInLzToken)\n            );\n            (bool success, bytes memory result) = treasury.safeCall(treasuryGasLimit, 0, TREASURY_MAX_COPY, callData);\n\n            (treasuryNativeFee, lzTokenFee) = _parseTreasuryResult(_totalNativeFee, _payInLzToken, success, result);\n            // fee should be in lzTokenFee if payInLzToken, otherwise in native\n            if (treasuryNativeFee > 0) {\n                fees[treasury] += treasuryNativeFee;\n            }\n        }\n    }\n\n    /// @dev the abstract process for quote() is:\n    /// 0/ split out the executor options and options of other workers\n    /// 1/ quote workers\n    /// 2/ quote executor\n    /// 3/ quote treasury\n    /// @return nativeFee, lzTokenFee\n    function _quote(\n        address _sender,\n        uint32 _dstEid,\n        uint256 _msgSize,\n        bool _payInLzToken,\n        bytes calldata _options\n    ) internal view returns (uint256, uint256) {\n        (bytes memory executorOptions, WorkerOptions[] memory validationOptions) = _splitOptions(_options);\n\n        // quote the verifier used in the library. for ULN, it is a list of DVNs\n        uint256 nativeFee = _quoteVerifier(_sender, _dstEid, validationOptions);\n\n        // quote executor\n        ExecutorConfig memory config = getExecutorConfig(_sender, _dstEid);\n        // assert msg size\n        _assertMessageSize(_msgSize, config.maxMessageSize);\n\n        nativeFee += ILayerZeroExecutor(config.executor).getFee(_dstEid, _sender, _msgSize, executorOptions);\n\n        // quote treasury\n        (uint256 treasuryNativeFee, uint256 lzTokenFee) = _quoteTreasury(_sender, _dstEid, nativeFee, _payInLzToken);\n        nativeFee += treasuryNativeFee;\n\n        return (nativeFee, lzTokenFee);\n    }\n\n    /// @dev this interface should be DoS-free if the user is paying with native. properties\n    /// 1/ treasury can return an overly high lzToken fee\n    /// 2/ if treasury returns an overly high native fee, it will be capped by maxNativeFee,\n    ///    which can be reasoned with the configurations\n    /// 3/ the owner can not configure the treasury in a way that force this function to revert\n    function _quoteTreasury(\n        address _sender,\n        uint32 _dstEid,\n        uint256 _totalNativeFee,\n        bool _payInLzToken\n    ) internal view returns (uint256 nativeFee, uint256 lzTokenFee) {\n        // treasury must be set, and it has to be a contract\n        if (treasury != address(0x0)) {\n            bytes memory callData = abi.encodeCall(\n                ILayerZeroTreasury.getFee,\n                (_sender, _dstEid, _totalNativeFee, _payInLzToken)\n            );\n            (bool success, bytes memory result) = treasury.safeStaticCall(\n                treasuryGasLimit,\n                TREASURY_MAX_COPY,\n                callData\n            );\n\n            return _parseTreasuryResult(_totalNativeFee, _payInLzToken, success, result);\n        }\n    }\n\n    function _parseTreasuryResult(\n        uint256 _totalNativeFee,\n        bool _payInLzToken,\n        bool _success,\n        bytes memory _result\n    ) internal view returns (uint256 nativeFee, uint256 lzTokenFee) {\n        // failure, charges nothing\n        if (!_success || _result.length < TREASURY_MAX_COPY) return (0, 0);\n\n        // parse the result\n        uint256 treasureFeeQuote = abi.decode(_result, (uint256));\n        if (_payInLzToken) {\n            lzTokenFee = treasureFeeQuote;\n        } else {\n            // pay in native\n            // we must prevent high-treasuryFee Dos attack\n            // nativeFee = min(treasureFeeQuote, maxNativeFee)\n            // opportunistically raise the maxNativeFee to be the same as _totalNativeFee\n            // can't use the _totalNativeFee alone because the oapp can use custom workers to force the fee to 0.\n            // maxNativeFee = max (_totalNativeFee, treasuryNativeFeeCap)\n            uint256 maxNativeFee = _totalNativeFee > treasuryNativeFeeCap ? _totalNativeFee : treasuryNativeFeeCap;\n\n            // min (treasureFeeQuote, nativeFeeCap)\n            nativeFee = treasureFeeQuote > maxNativeFee ? maxNativeFee : treasureFeeQuote;\n        }\n    }\n\n    /// @dev authenticated by msg.sender only\n    function _debitFee(uint256 _amount) internal {\n        uint256 fee = fees[msg.sender];\n        if (_amount > fee) revert LZ_MessageLib_InvalidAmount(_amount, fee);\n        unchecked {\n            fees[msg.sender] = fee - _amount;\n        }\n    }\n\n    function _setTreasury(address _treasury) internal {\n        treasury = _treasury;\n        emit TreasurySet(_treasury);\n    }\n\n    function _setExecutorConfig(uint32 _remoteEid, address _oapp, ExecutorConfig memory _config) internal {\n        executorConfigs[_oapp][_remoteEid] = _config;\n        emit ExecutorConfigSet(_oapp, _remoteEid, _config);\n    }\n\n    // ======================= Virtual =======================\n    /// @dev these two functions will be overridden with specific logics of the library function\n    function _quoteVerifier(\n        address _oapp,\n        uint32 _eid,\n        WorkerOptions[] memory _options\n    ) internal view virtual returns (uint256 nativeFee);\n\n    /// @dev this function will split the options into executorOptions and validationOptions\n    function _splitOptions(\n        bytes calldata _options\n    ) internal view virtual returns (bytes memory executorOptions, WorkerOptions[] memory validationOptions);\n}\n"
    },
    "@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/DVNOptions.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nimport { BytesLib } from \"solidity-bytes-utils/contracts/BytesLib.sol\";\n\nimport { BitMap256 } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\";\nimport { CalldataBytesLib } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\";\n\nlibrary DVNOptions {\n    using CalldataBytesLib for bytes;\n    using BytesLib for bytes;\n\n    uint8 internal constant WORKER_ID = 2;\n    uint8 internal constant OPTION_TYPE_PRECRIME = 1;\n\n    error DVN_InvalidDVNIdx();\n    error DVN_InvalidDVNOptions(uint256 cursor);\n\n    /// @dev group dvn options by its idx\n    /// @param _options [dvn_id][dvn_option][dvn_id][dvn_option]...\n    ///        dvn_option = [option_size][dvn_idx][option_type][option]\n    ///        option_size = len(dvn_idx) + len(option_type) + len(option)\n    ///        dvn_id: uint8, dvn_idx: uint8, option_size: uint16, option_type: uint8, option: bytes\n    /// @return dvnOptions the grouped options, still share the same format of _options\n    /// @return dvnIndices the dvn indices\n    function groupDVNOptionsByIdx(\n        bytes memory _options\n    ) internal pure returns (bytes[] memory dvnOptions, uint8[] memory dvnIndices) {\n        if (_options.length == 0) return (dvnOptions, dvnIndices);\n\n        uint8 numDVNs = getNumDVNs(_options);\n\n        // if there is only 1 dvn, we can just return the whole options\n        if (numDVNs == 1) {\n            dvnOptions = new bytes[](1);\n            dvnOptions[0] = _options;\n\n            dvnIndices = new uint8[](1);\n            dvnIndices[0] = _options.toUint8(3); // dvn idx\n            return (dvnOptions, dvnIndices);\n        }\n\n        // otherwise, we need to group the options by dvn_idx\n        dvnIndices = new uint8[](numDVNs);\n        dvnOptions = new bytes[](numDVNs);\n        unchecked {\n            uint256 cursor = 0;\n            uint256 start = 0;\n            uint8 lastDVNIdx = 255; // 255 is an invalid dvn_idx\n\n            while (cursor < _options.length) {\n                ++cursor; // skip worker_id\n\n                // optionLength asserted in getNumDVNs (skip check)\n                uint16 optionLength = _options.toUint16(cursor);\n                cursor += 2;\n\n                // dvnIdx asserted in getNumDVNs (skip check)\n                uint8 dvnIdx = _options.toUint8(cursor);\n\n                // dvnIdx must equal to the lastDVNIdx for the first option\n                // so it is always skipped in the first option\n                // this operation slices out options whenever the scan finds a different lastDVNIdx\n                if (lastDVNIdx == 255) {\n                    lastDVNIdx = dvnIdx;\n                } else if (dvnIdx != lastDVNIdx) {\n                    uint256 len = cursor - start - 3; // 3 is for worker_id and option_length\n                    bytes memory opt = _options.slice(start, len);\n                    _insertDVNOptions(dvnOptions, dvnIndices, lastDVNIdx, opt);\n\n                    // reset the start and lastDVNIdx\n                    start += len;\n                    lastDVNIdx = dvnIdx;\n                }\n\n                cursor += optionLength;\n            }\n\n            // skip check the cursor here because the cursor is asserted in getNumDVNs\n            // if we have reached the end of the options, we need to process the last dvn\n            uint256 size = cursor - start;\n            bytes memory op = _options.slice(start, size);\n            _insertDVNOptions(dvnOptions, dvnIndices, lastDVNIdx, op);\n\n            // revert dvnIndices to start from 0\n            for (uint8 i = 0; i < numDVNs; ++i) {\n                --dvnIndices[i];\n            }\n        }\n    }\n\n    function _insertDVNOptions(\n        bytes[] memory _dvnOptions,\n        uint8[] memory _dvnIndices,\n        uint8 _dvnIdx,\n        bytes memory _newOptions\n    ) internal pure {\n        // dvnIdx starts from 0 but default value of dvnIndices is 0,\n        // so we tell if the slot is empty by adding 1 to dvnIdx\n        if (_dvnIdx == 255) revert DVN_InvalidDVNIdx();\n        uint8 dvnIdxAdj = _dvnIdx + 1;\n\n        for (uint256 j = 0; j < _dvnIndices.length; ++j) {\n            uint8 index = _dvnIndices[j];\n            if (dvnIdxAdj == index) {\n                _dvnOptions[j] = abi.encodePacked(_dvnOptions[j], _newOptions);\n                break;\n            } else if (index == 0) {\n                // empty slot, that means it is the first time we see this dvn\n                _dvnIndices[j] = dvnIdxAdj;\n                _dvnOptions[j] = _newOptions;\n                break;\n            }\n        }\n    }\n\n    /// @dev get the number of unique dvns\n    /// @param _options the format is the same as groupDVNOptionsByIdx\n    function getNumDVNs(bytes memory _options) internal pure returns (uint8 numDVNs) {\n        uint256 cursor = 0;\n        BitMap256 bitmap;\n\n        // find number of unique dvn_idx\n        unchecked {\n            while (cursor < _options.length) {\n                ++cursor; // skip worker_id\n\n                uint16 optionLength = _options.toUint16(cursor);\n                cursor += 2;\n                if (optionLength < 2) revert DVN_InvalidDVNOptions(cursor); // at least 1 byte for dvn_idx and 1 byte for option_type\n\n                uint8 dvnIdx = _options.toUint8(cursor);\n\n                // if dvnIdx is not set, increment numDVNs\n                // max num of dvns is 255, 255 is an invalid dvn_idx\n                // The order of the dvnIdx is not required to be sequential, as enforcing the order may weaken\n                // the composability of the options. e.g. if we refrain from enforcing the order, an OApp that has\n                // already enforced certain options can append additional options to the end of the enforced\n                // ones without restrictions.\n                if (dvnIdx == 255) revert DVN_InvalidDVNIdx();\n                if (!bitmap.get(dvnIdx)) {\n                    ++numDVNs;\n                    bitmap = bitmap.set(dvnIdx);\n                }\n\n                cursor += optionLength;\n            }\n        }\n        if (cursor != _options.length) revert DVN_InvalidDVNOptions(cursor);\n    }\n\n    /// @dev decode the next dvn option from _options starting from the specified cursor\n    /// @param _options the format is the same as groupDVNOptionsByIdx\n    /// @param _cursor the cursor to start decoding\n    /// @return optionType the type of the option\n    /// @return option the option\n    /// @return cursor the cursor to start decoding the next option\n    function nextDVNOption(\n        bytes calldata _options,\n        uint256 _cursor\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint256 cursor) {\n        unchecked {\n            // skip worker id\n            cursor = _cursor + 1;\n\n            // read option size\n            uint16 size = _options.toU16(cursor);\n            cursor += 2;\n\n            // read option type\n            optionType = _options.toU8(cursor + 1); // skip dvn_idx\n\n            // startCursor and endCursor are used to slice the option from _options\n            uint256 startCursor = cursor + 2; // skip option type and dvn_idx\n            uint256 endCursor = cursor + size;\n            option = _options[startCursor:endCursor];\n            cursor += size;\n        }\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/UlnOptions.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nimport { SafeCast } from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nimport { ExecutorOptions } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\";\n\nimport { DVNOptions } from \"./DVNOptions.sol\";\n\nlibrary UlnOptions {\n    using SafeCast for uint256;\n\n    uint16 internal constant TYPE_1 = 1; // legacy options type 1\n    uint16 internal constant TYPE_2 = 2; // legacy options type 2\n    uint16 internal constant TYPE_3 = 3;\n\n    error LZ_ULN_InvalidWorkerOptions(uint256 cursor);\n    error LZ_ULN_InvalidWorkerId(uint8 workerId);\n    error LZ_ULN_InvalidLegacyType1Option();\n    error LZ_ULN_InvalidLegacyType2Option();\n    error LZ_ULN_UnsupportedOptionType(uint16 optionType);\n\n    /// @dev decode the options into executorOptions and dvnOptions\n    /// @param _options the options can be either legacy options (type 1 or 2) or type 3 options\n    /// @return executorOptions the executor options, share the same format of type 3 options\n    /// @return dvnOptions the dvn options, share the same format of type 3 options\n    function decode(\n        bytes calldata _options\n    ) internal pure returns (bytes memory executorOptions, bytes memory dvnOptions) {\n        // at least 2 bytes for the option type, but can have no options\n        if (_options.length < 2) revert LZ_ULN_InvalidWorkerOptions(0);\n\n        uint16 optionsType = uint16(bytes2(_options[0:2]));\n        uint256 cursor = 2;\n\n        // type3 options: [worker_option][worker_option]...\n        // worker_option: [worker_id][option_size][option]\n        // worker_id: uint8, option_size: uint16, option: bytes\n        if (optionsType == TYPE_3) {\n            unchecked {\n                uint256 start = cursor;\n                uint8 lastWorkerId; // worker_id starts from 1, so 0 is an invalid worker_id\n\n                // heuristic: we assume that the options are mostly EXECUTOR options only\n                // checking the workerID can reduce gas usage for most cases\n                while (cursor < _options.length) {\n                    uint8 workerId = uint8(bytes1(_options[cursor:cursor + 1]));\n                    if (workerId == 0) revert LZ_ULN_InvalidWorkerId(0);\n\n                    // workerId must equal to the lastWorkerId for the first option\n                    // so it is always skipped in the first option\n                    // this operation slices out options whenever the the scan finds a different workerId\n                    if (lastWorkerId == 0) {\n                        lastWorkerId = workerId;\n                    } else if (workerId != lastWorkerId) {\n                        bytes calldata op = _options[start:cursor]; // slice out the last worker's options\n                        (executorOptions, dvnOptions) = _insertWorkerOptions(\n                            executorOptions,\n                            dvnOptions,\n                            lastWorkerId,\n                            op\n                        );\n\n                        // reset the start cursor and lastWorkerId\n                        start = cursor;\n                        lastWorkerId = workerId;\n                    }\n\n                    ++cursor; // for workerId\n\n                    uint16 size = uint16(bytes2(_options[cursor:cursor + 2]));\n                    if (size == 0) revert LZ_ULN_InvalidWorkerOptions(cursor);\n                    cursor += size + 2;\n                }\n\n                // the options length must be the same as the cursor at the end\n                if (cursor != _options.length) revert LZ_ULN_InvalidWorkerOptions(cursor);\n\n                // if we have reached the end of the options and the options are not empty\n                // we need to process the last worker's options\n                if (_options.length > 2) {\n                    bytes calldata op = _options[start:cursor];\n                    (executorOptions, dvnOptions) = _insertWorkerOptions(executorOptions, dvnOptions, lastWorkerId, op);\n                }\n            }\n        } else {\n            executorOptions = decodeLegacyOptions(optionsType, _options);\n        }\n    }\n\n    function _insertWorkerOptions(\n        bytes memory _executorOptions,\n        bytes memory _dvnOptions,\n        uint8 _workerId,\n        bytes calldata _newOptions\n    ) private pure returns (bytes memory, bytes memory) {\n        if (_workerId == ExecutorOptions.WORKER_ID) {\n            _executorOptions = _executorOptions.length == 0\n                ? _newOptions\n                : abi.encodePacked(_executorOptions, _newOptions);\n        } else if (_workerId == DVNOptions.WORKER_ID) {\n            _dvnOptions = _dvnOptions.length == 0 ? _newOptions : abi.encodePacked(_dvnOptions, _newOptions);\n        } else {\n            revert LZ_ULN_InvalidWorkerId(_workerId);\n        }\n        return (_executorOptions, _dvnOptions);\n    }\n\n    /// @dev decode the legacy options (type 1 or 2) into executorOptions\n    /// @param _optionType the legacy option type\n    /// @param _options the legacy options, which still has the option type in the first 2 bytes\n    /// @return executorOptions the executor options, share the same format of type 3 options\n    /// Data format:\n    /// legacy type 1: [extraGas]\n    /// legacy type 2: [extraGas][dstNativeAmt][dstNativeAddress]\n    /// extraGas: uint256, dstNativeAmt: uint256, dstNativeAddress: bytes\n    function decodeLegacyOptions(\n        uint16 _optionType,\n        bytes calldata _options\n    ) internal pure returns (bytes memory executorOptions) {\n        if (_optionType == TYPE_1) {\n            if (_options.length != 34) revert LZ_ULN_InvalidLegacyType1Option();\n\n            // execution gas\n            uint128 executionGas = uint256(bytes32(_options[2:2 + 32])).toUint128();\n\n            // dont use the encode function in the ExecutorOptions lib for saving gas by calling abi.encodePacked once\n            // the result is a lzReceive option: [executor_id][option_size][option_type][execution_gas]\n            // option_type: uint8, execution_gas: uint128\n            // option_size = len(option_type) + len(execution_gas) = 1 + 16 = 17\n            executorOptions = abi.encodePacked(\n                ExecutorOptions.WORKER_ID,\n                uint16(17), // 16 + 1, 16 for option_length, + 1 for option_type\n                ExecutorOptions.OPTION_TYPE_LZRECEIVE,\n                executionGas\n            );\n        } else if (_optionType == TYPE_2) {\n            // receiver size <= 32\n            if (_options.length <= 66 || _options.length > 98) revert LZ_ULN_InvalidLegacyType2Option();\n\n            // execution gas\n            uint128 executionGas = uint256(bytes32(_options[2:2 + 32])).toUint128();\n\n            // nativeDrop (amount + receiver)\n            uint128 amount = uint256(bytes32(_options[34:34 + 32])).toUint128(); // offset 2 + 32\n            bytes32 receiver;\n            unchecked {\n                uint256 receiverLen = _options.length - 66; // offset 2 + 32 + 32\n                receiver = bytes32(_options[66:]);\n                receiver = receiver >> (8 * (32 - receiverLen)); // padding 0 to the left\n            }\n\n            // dont use the encode function in the ExecutorOptions lib for saving gas by calling abi.encodePacked once\n            // the result has one lzReceive option and one nativeDrop option:\n            //      [executor_id][lzReceive_option_size][option_type][execution_gas] +\n            //      [executor_id][nativeDrop_option_size][option_type][nativeDrop_amount][receiver]\n            // option_type: uint8, execution_gas: uint128, nativeDrop_amount: uint128, receiver: bytes32\n            // lzReceive_option_size = len(option_type) + len(execution_gas) = 1 + 16 = 17\n            // nativeDrop_option_size = len(option_type) + len(nativeDrop_amount) + len(receiver) = 1 + 16 + 32 = 49\n            executorOptions = abi.encodePacked(\n                ExecutorOptions.WORKER_ID,\n                uint16(17), // 16 + 1, 16 for option_length, + 1 for option_type\n                ExecutorOptions.OPTION_TYPE_LZRECEIVE,\n                executionGas,\n                ExecutorOptions.WORKER_ID,\n                uint16(49), // 48 + 1, 32 + 16 for option_length, + 1 for option_type\n                ExecutorOptions.OPTION_TYPE_NATIVE_DROP,\n                amount,\n                receiver\n            );\n        } else {\n            revert LZ_ULN_UnsupportedOptionType(_optionType);\n        }\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/interfaces/IOAppCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { ILayerZeroEndpointV2 } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\";\n\n/**\n * @title IOAppCore\n */\ninterface IOAppCore {\n    // Custom error messages\n    error OnlyPeer(uint32 eid, bytes32 sender);\n    error NoPeer(uint32 eid);\n    error InvalidEndpointCall();\n    error InvalidDelegate();\n\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\n    event PeerSet(uint32 eid, bytes32 peer);\n\n    /**\n     * @notice Retrieves the OApp version information.\n     * @return senderVersion The version of the OAppSender.sol contract.\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\n     */\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\n\n    /**\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\n     * @return iEndpoint The LayerZero endpoint as an interface.\n     */\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\n\n    /**\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\n     * @param _eid The endpoint ID.\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\n     */\n    function peers(uint32 _eid) external view returns (bytes32 peer);\n\n    /**\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\n     * @param _eid The endpoint ID.\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\n     */\n    function setPeer(uint32 _eid, bytes32 _peer) external;\n\n    /**\n     * @notice Sets the delegate address for the OApp Core.\n     * @param _delegate The address of the delegate to be set.\n     */\n    function setDelegate(address _delegate) external;\n}\n"
    },
    "@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IOAppCore, ILayerZeroEndpointV2 } from \"./interfaces/IOAppCore.sol\";\n\n/**\n * @title OAppCore\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\n */\nabstract contract OAppCore is IOAppCore, Ownable {\n    // The LayerZero endpoint associated with the given OApp\n    ILayerZeroEndpointV2 public immutable endpoint;\n\n    // Mapping to store peers associated with corresponding endpoints\n    mapping(uint32 eid => bytes32 peer) public peers;\n\n    /**\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\n     *\n     * @dev The delegate typically should be set as the owner of the contract.\n     */\n    constructor(address _endpoint, address _delegate) {\n        endpoint = ILayerZeroEndpointV2(_endpoint);\n\n        if (_delegate == address(0)) revert InvalidDelegate();\n        endpoint.setDelegate(_delegate);\n    }\n\n    /**\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\n     * @param _eid The endpoint ID.\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\n     *\n     * @dev Only the owner/admin of the OApp can call this function.\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\n     * @dev Set this to bytes32(0) to remove the peer address.\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\n     */\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\n        _setPeer(_eid, _peer);\n    }\n\n    /**\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\n     * @param _eid The endpoint ID.\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\n     *\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\n     * @dev Set this to bytes32(0) to remove the peer address.\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\n     */\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\n        peers[_eid] = _peer;\n        emit PeerSet(_eid, _peer);\n    }\n\n    /**\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\n     * ie. the peer is set to bytes32(0).\n     * @param _eid The endpoint ID.\n     * @return peer The address of the peer associated with the specified endpoint.\n     */\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\n        bytes32 peer = peers[_eid];\n        if (peer == bytes32(0)) revert NoPeer(_eid);\n        return peer;\n    }\n\n    /**\n     * @notice Sets the delegate address for the OApp.\n     * @param _delegate The address of the delegate to be set.\n     *\n     * @dev Only the owner/admin of the OApp can call this function.\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\n     */\n    function setDelegate(address _delegate) public onlyOwner {\n        endpoint.setDelegate(_delegate);\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppSender.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { SafeERC20, IERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\";\nimport { OAppCore } from \"./OAppCore.sol\";\n\n/**\n * @title OAppSender\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\n */\nabstract contract OAppSender is OAppCore {\n    using SafeERC20 for IERC20;\n\n    // Custom error messages\n    error NotEnoughNative(uint256 msgValue);\n    error LzTokenUnavailable();\n\n    // @dev The version of the OAppSender implementation.\n    // @dev Version is bumped when changes are made to this contract.\n    uint64 internal constant SENDER_VERSION = 1;\n\n    /**\n     * @notice Retrieves the OApp version information.\n     * @return senderVersion The version of the OAppSender.sol contract.\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\n     *\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\n     * ie. this is a SEND only OApp.\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\n     */\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\n        return (SENDER_VERSION, 0);\n    }\n\n    /**\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\n     * @param _dstEid The destination endpoint ID.\n     * @param _message The message payload.\n     * @param _options Additional options for the message.\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\n     * @return fee The calculated MessagingFee for the message.\n     *      - nativeFee: The native fee for the message.\n     *      - lzTokenFee: The LZ token fee for the message.\n     */\n    function _quote(\n        uint32 _dstEid,\n        bytes memory _message,\n        bytes memory _options,\n        bool _payInLzToken\n    ) internal view virtual returns (MessagingFee memory fee) {\n        return\n            endpoint.quote(\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\n                address(this)\n            );\n    }\n\n    /**\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\n     * @param _dstEid The destination endpoint ID.\n     * @param _message The message payload.\n     * @param _options Additional options for the message.\n     * @param _fee The calculated LayerZero fee for the message.\n     *      - nativeFee: The native fee.\n     *      - lzTokenFee: The lzToken fee.\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\n     * @return receipt The receipt for the sent message.\n     *      - guid: The unique identifier for the sent message.\n     *      - nonce: The nonce of the sent message.\n     *      - fee: The LayerZero fee incurred for the message.\n     */\n    function _lzSend(\n        uint32 _dstEid,\n        bytes memory _message,\n        bytes memory _options,\n        MessagingFee memory _fee,\n        address _refundAddress\n    ) internal virtual returns (MessagingReceipt memory receipt) {\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\n        uint256 messageValue = _payNative(_fee.nativeFee);\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\n\n        return\n            // solhint-disable-next-line check-send-result\n            endpoint.send{ value: messageValue }(\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\n                _refundAddress\n            );\n    }\n\n    /**\n     * @dev Internal function to pay the native fee associated with the message.\n     * @param _nativeFee The native fee to be paid.\n     * @return nativeFee The amount of native currency paid.\n     *\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\n     * this will need to be overridden because msg.value would contain multiple lzFees.\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\n     */\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\n        return _nativeFee;\n    }\n\n    /**\n     * @dev Internal function to pay the LZ token fee associated with the message.\n     * @param _lzTokenFee The LZ token fee to be paid.\n     *\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\n     */\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\n        address lzToken = endpoint.lzToken();\n        if (lzToken == address(0)) revert LzTokenUnavailable();\n\n        // Pay LZ token fee by sending tokens to the endpoint.\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-oapp-v2/contracts/oft/interfaces/IOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { MessagingReceipt, MessagingFee } from \"../../oapp/OAppSender.sol\";\n\n/**\n * @dev Struct representing token parameters for the OFT send() operation.\n */\nstruct SendParam {\n    uint32 dstEid; // Destination endpoint ID.\n    bytes32 to; // Recipient address.\n    uint256 amountLD; // Amount to send in local decimals.\n    uint256 minAmountLD; // Minimum amount to send in local decimals.\n    bytes extraOptions; // Additional options supplied by the caller to be used in the LayerZero message.\n    bytes composeMsg; // The composed message for the send() operation.\n    bytes oftCmd; // The OFT command to be executed, unused in default OFT implementations.\n}\n\n/**\n * @dev Struct representing OFT limit information.\n * @dev These amounts can change dynamically and are up the the specific oft implementation.\n */\nstruct OFTLimit {\n    uint256 minAmountLD; // Minimum amount in local decimals that can be sent to the recipient.\n    uint256 maxAmountLD; // Maximum amount in local decimals that can be sent to the recipient.\n}\n\n/**\n * @dev Struct representing OFT receipt information.\n */\nstruct OFTReceipt {\n    uint256 amountSentLD; // Amount of tokens ACTUALLY debited from the sender in local decimals.\n    // @dev In non-default implementations, the amountReceivedLD COULD differ from this value.\n    uint256 amountReceivedLD; // Amount of tokens to be received on the remote side.\n}\n\n/**\n * @dev Struct representing OFT fee details.\n * @dev Future proof mechanism to provide a standardized way to communicate fees to things like a UI.\n */\nstruct OFTFeeDetail {\n    int256 feeAmountLD; // Amount of the fee in local decimals.\n    string description; // Description of the fee.\n}\n\n/**\n * @title IOFT\n * @dev Interface for the OftChain (OFT) token.\n * @dev Does not inherit ERC20 to accommodate usage by OFTAdapter as well.\n * @dev This specific interface ID is '0x02e49c2c'.\n */\ninterface IOFT {\n    // Custom error messages\n    error InvalidLocalDecimals();\n    error SlippageExceeded(uint256 amountLD, uint256 minAmountLD);\n\n    // Events\n    event OFTSent(\n        bytes32 indexed guid, // GUID of the OFT message.\n        uint32 dstEid, // Destination Endpoint ID.\n        address indexed fromAddress, // Address of the sender on the src chain.\n        uint256 amountSentLD, // Amount of tokens sent in local decimals.\n        uint256 amountReceivedLD // Amount of tokens received in local decimals.\n    );\n    event OFTReceived(\n        bytes32 indexed guid, // GUID of the OFT message.\n        uint32 srcEid, // Source Endpoint ID.\n        address indexed toAddress, // Address of the recipient on the dst chain.\n        uint256 amountReceivedLD // Amount of tokens received in local decimals.\n    );\n\n    /**\n     * @notice Retrieves interfaceID and the version of the OFT.\n     * @return interfaceId The interface ID.\n     * @return version The version.\n     *\n     * @dev interfaceId: This specific interface ID is '0x02e49c2c'.\n     * @dev version: Indicates a cross-chain compatible msg encoding with other OFTs.\n     * @dev If a new feature is added to the OFT cross-chain msg encoding, the version will be incremented.\n     * ie. localOFT version(x,1) CAN send messages to remoteOFT version(x,1)\n     */\n    function oftVersion() external view returns (bytes4 interfaceId, uint64 version);\n\n    /**\n     * @notice Retrieves the address of the token associated with the OFT.\n     * @return token The address of the ERC20 token implementation.\n     */\n    function token() external view returns (address);\n\n    /**\n     * @notice Indicates whether the OFT contract requires approval of the 'token()' to send.\n     * @return requiresApproval Needs approval of the underlying token implementation.\n     *\n     * @dev Allows things like wallet implementers to determine integration requirements,\n     * without understanding the underlying token implementation.\n     */\n    function approvalRequired() external view returns (bool);\n\n    /**\n     * @notice Retrieves the shared decimals of the OFT.\n     * @return sharedDecimals The shared decimals of the OFT.\n     */\n    function sharedDecimals() external view returns (uint8);\n\n    /**\n     * @notice Provides a quote for OFT-related operations.\n     * @param _sendParam The parameters for the send operation.\n     * @return limit The OFT limit information.\n     * @return oftFeeDetails The details of OFT fees.\n     * @return receipt The OFT receipt information.\n     */\n    function quoteOFT(\n        SendParam calldata _sendParam\n    ) external view returns (OFTLimit memory, OFTFeeDetail[] memory oftFeeDetails, OFTReceipt memory);\n\n    /**\n     * @notice Provides a quote for the send() operation.\n     * @param _sendParam The parameters for the send() operation.\n     * @param _payInLzToken Flag indicating whether the caller is paying in the LZ token.\n     * @return fee The calculated LayerZero messaging fee from the send() operation.\n     *\n     * @dev MessagingFee: LayerZero msg fee\n     *  - nativeFee: The native fee.\n     *  - lzTokenFee: The lzToken fee.\n     */\n    function quoteSend(SendParam calldata _sendParam, bool _payInLzToken) external view returns (MessagingFee memory);\n\n    /**\n     * @notice Executes the send() operation.\n     * @param _sendParam The parameters for the send operation.\n     * @param _fee The fee information supplied by the caller.\n     *      - nativeFee: The native fee.\n     *      - lzTokenFee: The lzToken fee.\n     * @param _refundAddress The address to receive any excess funds from fees etc. on the src.\n     * @return receipt The LayerZero messaging receipt from the send() operation.\n     * @return oftReceipt The OFT receipt information.\n     *\n     * @dev MessagingReceipt: LayerZero msg receipt\n     *  - guid: The unique identifier for the sent message.\n     *  - nonce: The nonce of the sent message.\n     *  - fee: The LayerZero fee incurred for the message.\n     */\n    function send(\n        SendParam calldata _sendParam,\n        MessagingFee calldata _fee,\n        address _refundAddress\n    ) external payable returns (MessagingReceipt memory, OFTReceipt memory);\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/EndpointV2ViewUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nimport { Initializable } from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"./interfaces/ILayerZeroEndpointV2.sol\";\n\nenum ExecutionState {\n    NotExecutable, // executor: waits for PayloadVerified event and starts polling for executable\n    VerifiedButNotExecutable, // executor: starts active polling for executable\n    Executable,\n    Executed\n}\n\ncontract EndpointV2ViewUpgradeable is Initializable {\n    bytes32 public constant EMPTY_PAYLOAD_HASH = bytes32(0);\n    bytes32 public constant NIL_PAYLOAD_HASH = bytes32(type(uint256).max);\n\n    ILayerZeroEndpointV2 public endpoint;\n\n    function __EndpointV2View_init(address _endpoint) internal onlyInitializing {\n        __EndpointV2View_init_unchained(_endpoint);\n    }\n\n    function __EndpointV2View_init_unchained(address _endpoint) internal onlyInitializing {\n        endpoint = ILayerZeroEndpointV2(_endpoint);\n    }\n\n    function initializable(Origin memory _origin, address _receiver) public view returns (bool) {\n        try endpoint.initializable(_origin, _receiver) returns (bool _initializable) {\n            return _initializable;\n        } catch {\n            return false;\n        }\n    }\n\n    /// @dev check if a message is verifiable.\n    function verifiable(\n        Origin memory _origin,\n        address _receiver,\n        address _receiveLib,\n        bytes32 _payloadHash\n    ) public view returns (bool) {\n        if (!endpoint.isValidReceiveLibrary(_receiver, _origin.srcEid, _receiveLib)) return false;\n\n        if (!endpoint.verifiable(_origin, _receiver)) return false;\n\n        // checked in _inbound for verify\n        if (_payloadHash == EMPTY_PAYLOAD_HASH) return false;\n\n        return true;\n    }\n\n    /// @dev check if a message is executable.\n    /// @return ExecutionState of Executed, Executable, or NotExecutable\n    function executable(Origin memory _origin, address _receiver) public view returns (ExecutionState) {\n        bytes32 payloadHash = endpoint.inboundPayloadHash(_receiver, _origin.srcEid, _origin.sender, _origin.nonce);\n\n        // executed if the payload hash has been cleared and the nonce is less than or equal to lazyInboundNonce\n        if (\n            payloadHash == EMPTY_PAYLOAD_HASH &&\n            _origin.nonce <= endpoint.lazyInboundNonce(_receiver, _origin.srcEid, _origin.sender)\n        ) {\n            return ExecutionState.Executed;\n        }\n\n        // executable if nonce has not been executed and has not been nilified and nonce is less than or equal to inboundNonce\n        if (\n            payloadHash != NIL_PAYLOAD_HASH &&\n            _origin.nonce <= endpoint.inboundNonce(_receiver, _origin.srcEid, _origin.sender)\n        ) {\n            return ExecutionState.Executable;\n        }\n\n        // only start active executable polling if payload hash is not empty nor nil\n        if (payloadHash != EMPTY_PAYLOAD_HASH && payloadHash != NIL_PAYLOAD_HASH) {\n            return ExecutionState.VerifiedButNotExecutable;\n        }\n\n        // return NotExecutable as a catch-all\n        return ExecutionState.NotExecutable;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { IMessageLibManager } from \"./IMessageLibManager.sol\";\nimport { IMessagingComposer } from \"./IMessagingComposer.sol\";\nimport { IMessagingChannel } from \"./IMessagingChannel.sol\";\nimport { IMessagingContext } from \"./IMessagingContext.sol\";\n\nstruct MessagingParams {\n    uint32 dstEid;\n    bytes32 receiver;\n    bytes message;\n    bytes options;\n    bool payInLzToken;\n}\n\nstruct MessagingReceipt {\n    bytes32 guid;\n    uint64 nonce;\n    MessagingFee fee;\n}\n\nstruct MessagingFee {\n    uint256 nativeFee;\n    uint256 lzTokenFee;\n}\n\nstruct Origin {\n    uint32 srcEid;\n    bytes32 sender;\n    uint64 nonce;\n}\n\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\n\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\n\n    event PacketDelivered(Origin origin, address receiver);\n\n    event LzReceiveAlert(\n        address indexed receiver,\n        address indexed executor,\n        Origin origin,\n        bytes32 guid,\n        uint256 gas,\n        uint256 value,\n        bytes message,\n        bytes extraData,\n        bytes reason\n    );\n\n    event LzTokenSet(address token);\n\n    event DelegateSet(address sender, address delegate);\n\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\n\n    function send(\n        MessagingParams calldata _params,\n        address _refundAddress\n    ) external payable returns (MessagingReceipt memory);\n\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\n\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\n\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\n\n    function lzReceive(\n        Origin calldata _origin,\n        address _receiver,\n        bytes32 _guid,\n        bytes calldata _message,\n        bytes calldata _extraData\n    ) external payable;\n\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\n\n    function setLzToken(address _lzToken) external;\n\n    function lzToken() external view returns (address);\n\n    function nativeToken() external view returns (address);\n\n    function setDelegate(address _delegate) external;\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { Origin } from \"./ILayerZeroEndpointV2.sol\";\n\ninterface ILayerZeroReceiver {\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\n\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\n\n    function lzReceive(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) external payable;\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { IERC165 } from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\nimport { SetConfigParam } from \"./IMessageLibManager.sol\";\n\nenum MessageLibType {\n    Send,\n    Receive,\n    SendAndReceive\n}\n\ninterface IMessageLib is IERC165 {\n    function setConfig(address _oapp, SetConfigParam[] calldata _config) external;\n\n    function getConfig(uint32 _eid, address _oapp, uint32 _configType) external view returns (bytes memory config);\n\n    function isSupportedEid(uint32 _eid) external view returns (bool);\n\n    // message libs of same major version are compatible\n    function version() external view returns (uint64 major, uint8 minor, uint8 endpointVersion);\n\n    function messageLibType() external view returns (MessageLibType);\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nstruct SetConfigParam {\n    uint32 eid;\n    uint32 configType;\n    bytes config;\n}\n\ninterface IMessageLibManager {\n    struct Timeout {\n        address lib;\n        uint256 expiry;\n    }\n\n    event LibraryRegistered(address newLib);\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\n\n    function registerLibrary(address _lib) external;\n\n    function isRegisteredLibrary(address _lib) external view returns (bool);\n\n    function getRegisteredLibraries() external view returns (address[] memory);\n\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\n\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\n\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\n\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\n\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\n\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\n\n    function isSupportedEid(uint32 _eid) external view returns (bool);\n\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\n\n    /// ------------------- OApp interfaces -------------------\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\n\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\n\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\n\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\n\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\n\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\n\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\n\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\n\n    function getConfig(\n        address _oapp,\n        address _lib,\n        uint32 _eid,\n        uint32 _configType\n    ) external view returns (bytes memory config);\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IMessagingChannel {\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\n\n    function eid() external view returns (uint32);\n\n    // this is an emergency function if a message cannot be verified for some reasons\n    // required to provide _nextNonce to avoid race condition\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\n\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\n\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\n\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\n\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\n\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\n\n    function inboundPayloadHash(\n        address _receiver,\n        uint32 _srcEid,\n        bytes32 _sender,\n        uint64 _nonce\n    ) external view returns (bytes32);\n\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IMessagingComposer {\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\n    event LzComposeAlert(\n        address indexed from,\n        address indexed to,\n        address indexed executor,\n        bytes32 guid,\n        uint16 index,\n        uint256 gas,\n        uint256 value,\n        bytes message,\n        bytes extraData,\n        bytes reason\n    );\n\n    function composeQueue(\n        address _from,\n        address _to,\n        bytes32 _guid,\n        uint16 _index\n    ) external view returns (bytes32 messageHash);\n\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\n\n    function lzCompose(\n        address _from,\n        address _to,\n        bytes32 _guid,\n        uint16 _index,\n        bytes calldata _message,\n        bytes calldata _extraData\n    ) external payable;\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IMessagingContext {\n    function isSendingMessage() external view returns (bool);\n\n    function getSendContext() external view returns (uint32 dstEid, address sender);\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ISendLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { MessagingFee } from \"./ILayerZeroEndpointV2.sol\";\nimport { IMessageLib } from \"./IMessageLib.sol\";\n\nstruct Packet {\n    uint64 nonce;\n    uint32 srcEid;\n    address sender;\n    uint32 dstEid;\n    bytes32 receiver;\n    bytes32 guid;\n    bytes message;\n}\n\ninterface ISendLib is IMessageLib {\n    function send(\n        Packet calldata _packet,\n        bytes calldata _options,\n        bool _payInLzToken\n    ) external returns (MessagingFee memory, bytes memory encodedPacket);\n\n    function quote(\n        Packet calldata _packet,\n        bytes calldata _options,\n        bool _payInLzToken\n    ) external view returns (MessagingFee memory);\n\n    function setTreasury(address _treasury) external;\n\n    function withdrawFee(address _to, uint256 _amount) external;\n\n    function withdrawLzTokenFee(address _lzToken, address _to, uint256 _amount) external;\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nlibrary AddressCast {\n    error AddressCast_InvalidSizeForAddress();\n    error AddressCast_InvalidAddress();\n\n    function toBytes32(bytes calldata _addressBytes) internal pure returns (bytes32 result) {\n        if (_addressBytes.length > 32) revert AddressCast_InvalidAddress();\n        result = bytes32(_addressBytes);\n        unchecked {\n            uint256 offset = 32 - _addressBytes.length;\n            result = result >> (offset * 8);\n        }\n    }\n\n    function toBytes32(address _address) internal pure returns (bytes32 result) {\n        result = bytes32(uint256(uint160(_address)));\n    }\n\n    function toBytes(bytes32 _addressBytes32, uint256 _size) internal pure returns (bytes memory result) {\n        if (_size == 0 || _size > 32) revert AddressCast_InvalidSizeForAddress();\n        result = new bytes(_size);\n        unchecked {\n            uint256 offset = 256 - _size * 8;\n            assembly {\n                mstore(add(result, 32), shl(offset, _addressBytes32))\n            }\n        }\n    }\n\n    function toAddress(bytes32 _addressBytes32) internal pure returns (address result) {\n        result = address(uint160(uint256(_addressBytes32)));\n    }\n\n    function toAddress(bytes calldata _addressBytes) internal pure returns (address result) {\n        if (_addressBytes.length != 20) revert AddressCast_InvalidAddress();\n        result = address(bytes20(_addressBytes));\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nlibrary CalldataBytesLib {\n    function toU8(bytes calldata _bytes, uint256 _start) internal pure returns (uint8) {\n        return uint8(_bytes[_start]);\n    }\n\n    function toU16(bytes calldata _bytes, uint256 _start) internal pure returns (uint16) {\n        unchecked {\n            uint256 end = _start + 2;\n            return uint16(bytes2(_bytes[_start:end]));\n        }\n    }\n\n    function toU32(bytes calldata _bytes, uint256 _start) internal pure returns (uint32) {\n        unchecked {\n            uint256 end = _start + 4;\n            return uint32(bytes4(_bytes[_start:end]));\n        }\n    }\n\n    function toU64(bytes calldata _bytes, uint256 _start) internal pure returns (uint64) {\n        unchecked {\n            uint256 end = _start + 8;\n            return uint64(bytes8(_bytes[_start:end]));\n        }\n    }\n\n    function toU128(bytes calldata _bytes, uint256 _start) internal pure returns (uint128) {\n        unchecked {\n            uint256 end = _start + 16;\n            return uint128(bytes16(_bytes[_start:end]));\n        }\n    }\n\n    function toU256(bytes calldata _bytes, uint256 _start) internal pure returns (uint256) {\n        unchecked {\n            uint256 end = _start + 32;\n            return uint256(bytes32(_bytes[_start:end]));\n        }\n    }\n\n    function toAddr(bytes calldata _bytes, uint256 _start) internal pure returns (address) {\n        unchecked {\n            uint256 end = _start + 20;\n            return address(bytes20(_bytes[_start:end]));\n        }\n    }\n\n    function toB32(bytes calldata _bytes, uint256 _start) internal pure returns (bytes32) {\n        unchecked {\n            uint256 end = _start + 32;\n            return bytes32(_bytes[_start:end]);\n        }\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nlibrary Errors {\n    error LZ_LzTokenUnavailable();\n    error LZ_InvalidReceiveLibrary();\n    error LZ_InvalidNonce(uint64 nonce);\n    error LZ_InvalidArgument();\n    error LZ_InvalidExpiry();\n    error LZ_InvalidAmount(uint256 required, uint256 supplied);\n    error LZ_OnlyRegisteredOrDefaultLib();\n    error LZ_OnlyRegisteredLib();\n    error LZ_OnlyNonDefaultLib();\n    error LZ_Unauthorized();\n    error LZ_DefaultSendLibUnavailable();\n    error LZ_DefaultReceiveLibUnavailable();\n    error LZ_PathNotInitializable();\n    error LZ_PathNotVerifiable();\n    error LZ_OnlySendLib();\n    error LZ_OnlyReceiveLib();\n    error LZ_UnsupportedEid();\n    error LZ_UnsupportedInterface();\n    error LZ_AlreadyRegistered();\n    error LZ_SameValue();\n    error LZ_InvalidPayloadHash();\n    error LZ_PayloadHashNotFound(bytes32 expected, bytes32 actual);\n    error LZ_ComposeNotFound(bytes32 expected, bytes32 actual);\n    error LZ_ComposeExists();\n    error LZ_SendReentrancy();\n    error LZ_NotImplemented();\n    error LZ_InsufficientFee(\n        uint256 requiredNative,\n        uint256 suppliedNative,\n        uint256 requiredLzToken,\n        uint256 suppliedLzToken\n    );\n    error LZ_ZeroLzTokenFee();\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/libs/GUID.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nimport { AddressCast } from \"./AddressCast.sol\";\n\nlibrary GUID {\n    using AddressCast for address;\n\n    function generate(\n        uint64 _nonce,\n        uint32 _srcEid,\n        address _sender,\n        uint32 _dstEid,\n        bytes32 _receiver\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_nonce, _srcEid, _sender.toBytes32(), _dstEid, _receiver));\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Transfer.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nlibrary Transfer {\n    using SafeERC20 for IERC20;\n\n    address internal constant ADDRESS_ZERO = address(0);\n\n    error Transfer_NativeFailed(address _to, uint256 _value);\n    error Transfer_ToAddressIsZero();\n\n    function native(address _to, uint256 _value) internal {\n        if (_to == ADDRESS_ZERO) revert Transfer_ToAddressIsZero();\n        (bool success, ) = _to.call{ value: _value }(\"\");\n        if (!success) revert Transfer_NativeFailed(_to, _value);\n    }\n\n    function token(address _token, address _to, uint256 _value) internal {\n        if (_to == ADDRESS_ZERO) revert Transfer_ToAddressIsZero();\n        IERC20(_token).safeTransfer(_to, _value);\n    }\n\n    function nativeOrToken(address _token, address _to, uint256 _value) internal {\n        if (_token == ADDRESS_ZERO) {\n            native(_to, _value);\n        } else {\n            token(_token, _to, _value);\n        }\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/BitMaps.sol\npragma solidity ^0.8.20;\n\ntype BitMap256 is uint256;\n\nusing BitMaps for BitMap256 global;\n\nlibrary BitMaps {\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap256 bitmap, uint8 index) internal pure returns (bool) {\n        uint256 mask = 1 << index;\n        return BitMap256.unwrap(bitmap) & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap256 bitmap, uint8 index) internal pure returns (BitMap256) {\n        uint256 mask = 1 << index;\n        return BitMap256.wrap(BitMap256.unwrap(bitmap) | mask);\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nimport { CalldataBytesLib } from \"../../libs/CalldataBytesLib.sol\";\n\nlibrary ExecutorOptions {\n    using CalldataBytesLib for bytes;\n\n    uint8 internal constant WORKER_ID = 1;\n\n    uint8 internal constant OPTION_TYPE_LZRECEIVE = 1;\n    uint8 internal constant OPTION_TYPE_NATIVE_DROP = 2;\n    uint8 internal constant OPTION_TYPE_LZCOMPOSE = 3;\n    uint8 internal constant OPTION_TYPE_ORDERED_EXECUTION = 4;\n\n    error Executor_InvalidLzReceiveOption();\n    error Executor_InvalidNativeDropOption();\n    error Executor_InvalidLzComposeOption();\n\n    /// @dev decode the next executor option from the options starting from the specified cursor\n    /// @param _options [executor_id][executor_option][executor_id][executor_option]...\n    ///        executor_option = [option_size][option_type][option]\n    ///        option_size = len(option_type) + len(option)\n    ///        executor_id: uint8, option_size: uint16, option_type: uint8, option: bytes\n    /// @param _cursor the cursor to start decoding from\n    /// @return optionType the type of the option\n    /// @return option the option of the executor\n    /// @return cursor the cursor to start decoding the next executor option\n    function nextExecutorOption(\n        bytes calldata _options,\n        uint256 _cursor\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint256 cursor) {\n        unchecked {\n            // skip worker id\n            cursor = _cursor + 1;\n\n            // read option size\n            uint16 size = _options.toU16(cursor);\n            cursor += 2;\n\n            // read option type\n            optionType = _options.toU8(cursor);\n\n            // startCursor and endCursor are used to slice the option from _options\n            uint256 startCursor = cursor + 1; // skip option type\n            uint256 endCursor = cursor + size;\n            option = _options[startCursor:endCursor];\n            cursor += size;\n        }\n    }\n\n    function decodeLzReceiveOption(bytes calldata _option) internal pure returns (uint128 gas, uint128 value) {\n        if (_option.length != 16 && _option.length != 32) revert Executor_InvalidLzReceiveOption();\n        gas = _option.toU128(0);\n        value = _option.length == 32 ? _option.toU128(16) : 0;\n    }\n\n    function decodeNativeDropOption(bytes calldata _option) internal pure returns (uint128 amount, bytes32 receiver) {\n        if (_option.length != 48) revert Executor_InvalidNativeDropOption();\n        amount = _option.toU128(0);\n        receiver = _option.toB32(16);\n    }\n\n    function decodeLzComposeOption(\n        bytes calldata _option\n    ) internal pure returns (uint16 index, uint128 gas, uint128 value) {\n        if (_option.length != 18 && _option.length != 34) revert Executor_InvalidLzComposeOption();\n        index = _option.toU16(0);\n        gas = _option.toU128(2);\n        value = _option.length == 34 ? _option.toU128(18) : 0;\n    }\n\n    function encodeLzReceiveOption(uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\n        return _value == 0 ? abi.encodePacked(_gas) : abi.encodePacked(_gas, _value);\n    }\n\n    function encodeNativeDropOption(uint128 _amount, bytes32 _receiver) internal pure returns (bytes memory) {\n        return abi.encodePacked(_amount, _receiver);\n    }\n\n    function encodeLzComposeOption(uint16 _index, uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\n        return _value == 0 ? abi.encodePacked(_index, _gas) : abi.encodePacked(_index, _gas, _value);\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nimport { Packet } from \"../../interfaces/ISendLib.sol\";\nimport { AddressCast } from \"../../libs/AddressCast.sol\";\n\nlibrary PacketV1Codec {\n    using AddressCast for address;\n    using AddressCast for bytes32;\n\n    uint8 internal constant PACKET_VERSION = 1;\n\n    // header (version + nonce + path)\n    // version\n    uint256 private constant PACKET_VERSION_OFFSET = 0;\n    //    nonce\n    uint256 private constant NONCE_OFFSET = 1;\n    //    path\n    uint256 private constant SRC_EID_OFFSET = 9;\n    uint256 private constant SENDER_OFFSET = 13;\n    uint256 private constant DST_EID_OFFSET = 45;\n    uint256 private constant RECEIVER_OFFSET = 49;\n    // payload (guid + message)\n    uint256 private constant GUID_OFFSET = 81; // keccak256(nonce + path)\n    uint256 private constant MESSAGE_OFFSET = 113;\n\n    function encode(Packet memory _packet) internal pure returns (bytes memory encodedPacket) {\n        encodedPacket = abi.encodePacked(\n            PACKET_VERSION,\n            _packet.nonce,\n            _packet.srcEid,\n            _packet.sender.toBytes32(),\n            _packet.dstEid,\n            _packet.receiver,\n            _packet.guid,\n            _packet.message\n        );\n    }\n\n    function encodePacketHeader(Packet memory _packet) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                PACKET_VERSION,\n                _packet.nonce,\n                _packet.srcEid,\n                _packet.sender.toBytes32(),\n                _packet.dstEid,\n                _packet.receiver\n            );\n    }\n\n    function encodePayload(Packet memory _packet) internal pure returns (bytes memory) {\n        return abi.encodePacked(_packet.guid, _packet.message);\n    }\n\n    function header(bytes calldata _packet) internal pure returns (bytes calldata) {\n        return _packet[0:GUID_OFFSET];\n    }\n\n    function version(bytes calldata _packet) internal pure returns (uint8) {\n        return uint8(bytes1(_packet[PACKET_VERSION_OFFSET:NONCE_OFFSET]));\n    }\n\n    function nonce(bytes calldata _packet) internal pure returns (uint64) {\n        return uint64(bytes8(_packet[NONCE_OFFSET:SRC_EID_OFFSET]));\n    }\n\n    function srcEid(bytes calldata _packet) internal pure returns (uint32) {\n        return uint32(bytes4(_packet[SRC_EID_OFFSET:SENDER_OFFSET]));\n    }\n\n    function sender(bytes calldata _packet) internal pure returns (bytes32) {\n        return bytes32(_packet[SENDER_OFFSET:DST_EID_OFFSET]);\n    }\n\n    function senderAddressB20(bytes calldata _packet) internal pure returns (address) {\n        return sender(_packet).toAddress();\n    }\n\n    function dstEid(bytes calldata _packet) internal pure returns (uint32) {\n        return uint32(bytes4(_packet[DST_EID_OFFSET:RECEIVER_OFFSET]));\n    }\n\n    function receiver(bytes calldata _packet) internal pure returns (bytes32) {\n        return bytes32(_packet[RECEIVER_OFFSET:GUID_OFFSET]);\n    }\n\n    function receiverB20(bytes calldata _packet) internal pure returns (address) {\n        return receiver(_packet).toAddress();\n    }\n\n    function guid(bytes calldata _packet) internal pure returns (bytes32) {\n        return bytes32(_packet[GUID_OFFSET:MESSAGE_OFFSET]);\n    }\n\n    function message(bytes calldata _packet) internal pure returns (bytes calldata) {\n        return bytes(_packet[MESSAGE_OFFSET:]);\n    }\n\n    function payload(bytes calldata _packet) internal pure returns (bytes calldata) {\n        return bytes(_packet[GUID_OFFSET:]);\n    }\n\n    function payloadHash(bytes calldata _packet) internal pure returns (bytes32) {\n        return keccak256(payload(_packet));\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/MessagingContext.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nimport { IMessagingContext } from \"./interfaces/IMessagingContext.sol\";\nimport { Errors } from \"./libs/Errors.sol\";\n\n/// this contract acts as a non-reentrancy guard and a source of messaging context\n/// the context includes the remote eid and the sender address\n/// it separates the send and receive context to allow messaging receipts (send back on receive())\nabstract contract MessagingContext is IMessagingContext {\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private _sendContext = NOT_ENTERED;\n\n    /// @dev the sendContext is set to 8 bytes 0s + 4 bytes eid + 20 bytes sender\n    modifier sendContext(uint32 _dstEid, address _sender) {\n        if (_sendContext != NOT_ENTERED) revert Errors.LZ_SendReentrancy();\n        _sendContext = (uint256(_dstEid) << 160) | uint160(_sender);\n        _;\n        _sendContext = NOT_ENTERED;\n    }\n\n    /// @dev returns true if sending message\n    function isSendingMessage() public view returns (bool) {\n        return _sendContext != NOT_ENTERED;\n    }\n\n    /// @dev returns (eid, sender) if sending message, (0, 0) otherwise\n    function getSendContext() external view returns (uint32, address) {\n        return isSendingMessage() ? _getSendContext(_sendContext) : (0, address(0));\n    }\n\n    function _getSendContext(uint256 _context) internal pure returns (uint32, address) {\n        return (uint32(_context >> 160), address(uint160(_context)));\n    }\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { ILayerZeroEndpointV2 } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\";\n\n/**\n * @title IOAppCore\n */\ninterface IOAppCore {\n    // Custom error messages\n    error OnlyPeer(uint32 eid, bytes32 sender);\n    error NoPeer(uint32 eid);\n    error InvalidEndpointCall();\n    error InvalidDelegate();\n\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\n    event PeerSet(uint32 eid, bytes32 peer);\n\n    /**\n     * @notice Retrieves the OApp version information.\n     * @return senderVersion The version of the OAppSender.sol contract.\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\n     */\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\n\n    /**\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\n     * @return iEndpoint The LayerZero endpoint as an interface.\n     */\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\n\n    /**\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\n     * @param _eid The endpoint ID.\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\n     */\n    function peers(uint32 _eid) external view returns (bytes32 peer);\n\n    /**\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\n     * @param _eid The endpoint ID.\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\n     */\n    function setPeer(uint32 _eid, bytes32 _peer) external;\n\n    /**\n     * @notice Sets the delegate address for the OApp Core.\n     * @param _delegate The address of the delegate to be set.\n     */\n    function setDelegate(address _delegate) external;\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppMsgInspector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n/**\n * @title IOAppMsgInspector\n * @dev Interface for the OApp Message Inspector, allowing examination of message and options contents.\n */\ninterface IOAppMsgInspector {\n    // Custom error message for inspection failure\n    error InspectionFailed(bytes message, bytes options);\n\n    /**\n     * @notice Allows the inspector to examine LayerZero message contents and optionally throw a revert if invalid.\n     * @param _message The message payload to be inspected.\n     * @param _options Additional options or parameters for inspection.\n     * @return valid A boolean indicating whether the inspection passed (true) or failed (false).\n     *\n     * @dev Optionally done as a revert, OR use the boolean provided to handle the failure.\n     */\n    function inspect(bytes calldata _message, bytes calldata _options) external view returns (bool valid);\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppOptionsType3.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Struct representing enforced option parameters.\n */\nstruct EnforcedOptionParam {\n    uint32 eid; // Endpoint ID\n    uint16 msgType; // Message Type\n    bytes options; // Additional options\n}\n\n/**\n * @title IOAppOptionsType3\n * @dev Interface for the OApp with Type 3 Options, allowing the setting and combining of enforced options.\n */\ninterface IOAppOptionsType3 {\n    // Custom error message for invalid options\n    error InvalidOptions(bytes options);\n\n    // Event emitted when enforced options are set\n    event EnforcedOptionSet(EnforcedOptionParam[] _enforcedOptions);\n\n    /**\n     * @notice Sets enforced options for specific endpoint and message type combinations.\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\n     */\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) external;\n\n    /**\n     * @notice Combines options for a given endpoint and message type.\n     * @param _eid The endpoint ID.\n     * @param _msgType The OApp message type.\n     * @param _extraOptions Additional options passed by the caller.\n     * @return options The combination of caller specified options AND enforced options.\n     */\n    function combineOptions(\n        uint32 _eid,\n        uint16 _msgType,\n        bytes calldata _extraOptions\n    ) external view returns (bytes memory options);\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { ILayerZeroReceiver, Origin } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\";\n\ninterface IOAppReceiver is ILayerZeroReceiver {\n    /**\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\n     * @param _origin The origin information containing the source endpoint and sender address.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address on the src chain.\n     *  - nonce: The nonce of the message.\n     * @param _message The lzReceive payload.\n     * @param _sender The sender address.\n     * @return isSender Is a valid sender.\n     *\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\n     * @dev The default sender IS the OAppReceiver implementer.\n     */\n    function isComposeMsgSender(\n        Origin calldata _origin,\n        bytes calldata _message,\n        address _sender\n    ) external view returns (bool isSender);\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IOAppOptionsType3, EnforcedOptionParam } from \"../interfaces/IOAppOptionsType3.sol\";\n\n/**\n * @title OAppOptionsType3\n * @dev Abstract contract implementing the IOAppOptionsType3 interface with type 3 options.\n */\nabstract contract OAppOptionsType3 is IOAppOptionsType3, Ownable {\n    uint16 internal constant OPTION_TYPE_3 = 3;\n\n    // @dev The \"msgType\" should be defined in the child contract.\n    mapping(uint32 eid => mapping(uint16 msgType => bytes enforcedOption)) public enforcedOptions;\n\n    /**\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\n     *\n     * @dev Only the owner/admin of the OApp can call this function.\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\n     */\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) public virtual onlyOwner {\n        _setEnforcedOptions(_enforcedOptions);\n    }\n\n    /**\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\n     *\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\n     */\n    function _setEnforcedOptions(EnforcedOptionParam[] memory _enforcedOptions) internal virtual {\n        for (uint256 i = 0; i < _enforcedOptions.length; i++) {\n            // @dev Enforced options are only available for optionType 3, as type 1 and 2 dont support combining.\n            _assertOptionsType3(_enforcedOptions[i].options);\n            enforcedOptions[_enforcedOptions[i].eid][_enforcedOptions[i].msgType] = _enforcedOptions[i].options;\n        }\n\n        emit EnforcedOptionSet(_enforcedOptions);\n    }\n\n    /**\n     * @notice Combines options for a given endpoint and message type.\n     * @param _eid The endpoint ID.\n     * @param _msgType The OAPP message type.\n     * @param _extraOptions Additional options passed by the caller.\n     * @return options The combination of caller specified options AND enforced options.\n     *\n     * @dev If there is an enforced lzReceive option:\n     * - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether}\n     * - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.\n     * @dev This presence of duplicated options is handled off-chain in the verifier/executor.\n     */\n    function combineOptions(\n        uint32 _eid,\n        uint16 _msgType,\n        bytes calldata _extraOptions\n    ) public view virtual returns (bytes memory) {\n        bytes memory enforced = enforcedOptions[_eid][_msgType];\n\n        // No enforced options, pass whatever the caller supplied, even if it's empty or legacy type 1/2 options.\n        if (enforced.length == 0) return _extraOptions;\n\n        // No caller options, return enforced\n        if (_extraOptions.length == 0) return enforced;\n\n        // @dev If caller provided _extraOptions, must be type 3 as its the ONLY type that can be combined.\n        if (_extraOptions.length >= 2) {\n            _assertOptionsType3(_extraOptions);\n            // @dev Remove the first 2 bytes containing the type from the _extraOptions and combine with enforced.\n            return bytes.concat(enforced, _extraOptions[2:]);\n        }\n\n        // No valid set of options was found.\n        revert InvalidOptions(_extraOptions);\n    }\n\n    /**\n     * @dev Internal function to assert that options are of type 3.\n     * @param _options The options to be checked.\n     */\n    function _assertOptionsType3(bytes memory _options) internal pure virtual {\n        uint16 optionsType;\n        assembly {\n            optionsType := mload(add(_options, 2))\n        }\n        if (optionsType != OPTION_TYPE_3) revert InvalidOptions(_options);\n    }\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\n// solhint-disable-next-line no-unused-import\nimport { OAppSender, MessagingFee, MessagingReceipt } from \"./OAppSender.sol\";\n// @dev Import the 'Origin' so it's exposed to OApp implementers\n// solhint-disable-next-line no-unused-import\nimport { OAppReceiver, Origin } from \"./OAppReceiver.sol\";\nimport { OAppCore } from \"./OAppCore.sol\";\n\n/**\n * @title OApp\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\n */\nabstract contract OApp is OAppSender, OAppReceiver {\n    /**\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\n     */\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\n\n    /**\n     * @notice Retrieves the OApp version information.\n     * @return senderVersion The version of the OAppSender.sol implementation.\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\n     */\n    function oAppVersion()\n        public\n        pure\n        virtual\n        override(OAppSender, OAppReceiver)\n        returns (uint64 senderVersion, uint64 receiverVersion)\n    {\n        return (SENDER_VERSION, RECEIVER_VERSION);\n    }\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IOAppCore, ILayerZeroEndpointV2 } from \"./interfaces/IOAppCore.sol\";\n\n/**\n * @title OAppCore\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\n */\nabstract contract OAppCore is IOAppCore, Ownable {\n    // The LayerZero endpoint associated with the given OApp\n    ILayerZeroEndpointV2 public immutable endpoint;\n\n    // Mapping to store peers associated with corresponding endpoints\n    mapping(uint32 eid => bytes32 peer) public peers;\n\n    /**\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\n     *\n     * @dev The delegate typically should be set as the owner of the contract.\n     */\n    constructor(address _endpoint, address _delegate) {\n        endpoint = ILayerZeroEndpointV2(_endpoint);\n\n        if (_delegate == address(0)) revert InvalidDelegate();\n        endpoint.setDelegate(_delegate);\n    }\n\n    /**\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\n     * @param _eid The endpoint ID.\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\n     *\n     * @dev Only the owner/admin of the OApp can call this function.\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\n     * @dev Set this to bytes32(0) to remove the peer address.\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\n     */\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\n        _setPeer(_eid, _peer);\n    }\n\n    /**\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\n     * @param _eid The endpoint ID.\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\n     *\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\n     * @dev Set this to bytes32(0) to remove the peer address.\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\n     */\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\n        peers[_eid] = _peer;\n        emit PeerSet(_eid, _peer);\n    }\n\n    /**\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\n     * ie. the peer is set to bytes32(0).\n     * @param _eid The endpoint ID.\n     * @return peer The address of the peer associated with the specified endpoint.\n     */\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\n        bytes32 peer = peers[_eid];\n        if (peer == bytes32(0)) revert NoPeer(_eid);\n        return peer;\n    }\n\n    /**\n     * @notice Sets the delegate address for the OApp.\n     * @param _delegate The address of the delegate to be set.\n     *\n     * @dev Only the owner/admin of the OApp can call this function.\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\n     */\n    function setDelegate(address _delegate) public onlyOwner {\n        endpoint.setDelegate(_delegate);\n    }\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { IOAppReceiver, Origin } from \"./interfaces/IOAppReceiver.sol\";\nimport { OAppCore } from \"./OAppCore.sol\";\n\n/**\n * @title OAppReceiver\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\n */\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\n    // Custom error message for when the caller is not the registered endpoint/\n    error OnlyEndpoint(address addr);\n\n    // @dev The version of the OAppReceiver implementation.\n    // @dev Version is bumped when changes are made to this contract.\n    uint64 internal constant RECEIVER_VERSION = 2;\n\n    /**\n     * @notice Retrieves the OApp version information.\n     * @return senderVersion The version of the OAppSender.sol contract.\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\n     *\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\n     * ie. this is a RECEIVE only OApp.\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\n     */\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\n        return (0, RECEIVER_VERSION);\n    }\n\n    /**\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\n     * @dev _origin The origin information containing the source endpoint and sender address.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address on the src chain.\n     *  - nonce: The nonce of the message.\n     * @dev _message The lzReceive payload.\n     * @param _sender The sender address.\n     * @return isSender Is a valid sender.\n     *\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\n     * @dev The default sender IS the OAppReceiver implementer.\n     */\n    function isComposeMsgSender(\n        Origin calldata /*_origin*/,\n        bytes calldata /*_message*/,\n        address _sender\n    ) public view virtual returns (bool) {\n        return _sender == address(this);\n    }\n\n    /**\n     * @notice Checks if the path initialization is allowed based on the provided origin.\n     * @param origin The origin information containing the source endpoint and sender address.\n     * @return Whether the path has been initialized.\n     *\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\n     * @dev This defaults to assuming if a peer has been set, its initialized.\n     * Can be overridden by the OApp if there is other logic to determine this.\n     */\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\n        return peers[origin.srcEid] == origin.sender;\n    }\n\n    /**\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\n     * @dev _srcEid The source endpoint ID.\n     * @dev _sender The sender address.\n     * @return nonce The next nonce.\n     *\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\n     * @dev This is also enforced by the OApp.\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\n     */\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\n        return 0;\n    }\n\n    /**\n     * @dev Entry point for receiving messages or packets from the endpoint.\n     * @param _origin The origin information containing the source endpoint and sender address.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address on the src chain.\n     *  - nonce: The nonce of the message.\n     * @param _guid The unique identifier for the received LayerZero message.\n     * @param _message The payload of the received message.\n     * @param _executor The address of the executor for the received message.\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\n     *\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\n     */\n    function lzReceive(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) public payable virtual {\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\n\n        // Ensure that the sender matches the expected peer for the source endpoint.\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\n\n        // Call the internal OApp implementation of lzReceive.\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\n    }\n\n    /**\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\n     */\n    function _lzReceive(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) internal virtual;\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { SafeERC20, IERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\";\nimport { OAppCore } from \"./OAppCore.sol\";\n\n/**\n * @title OAppSender\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\n */\nabstract contract OAppSender is OAppCore {\n    using SafeERC20 for IERC20;\n\n    // Custom error messages\n    error NotEnoughNative(uint256 msgValue);\n    error LzTokenUnavailable();\n\n    // @dev The version of the OAppSender implementation.\n    // @dev Version is bumped when changes are made to this contract.\n    uint64 internal constant SENDER_VERSION = 1;\n\n    /**\n     * @notice Retrieves the OApp version information.\n     * @return senderVersion The version of the OAppSender.sol contract.\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\n     *\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\n     * ie. this is a SEND only OApp.\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\n     */\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\n        return (SENDER_VERSION, 0);\n    }\n\n    /**\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\n     * @param _dstEid The destination endpoint ID.\n     * @param _message The message payload.\n     * @param _options Additional options for the message.\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\n     * @return fee The calculated MessagingFee for the message.\n     *      - nativeFee: The native fee for the message.\n     *      - lzTokenFee: The LZ token fee for the message.\n     */\n    function _quote(\n        uint32 _dstEid,\n        bytes memory _message,\n        bytes memory _options,\n        bool _payInLzToken\n    ) internal view virtual returns (MessagingFee memory fee) {\n        return\n            endpoint.quote(\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\n                address(this)\n            );\n    }\n\n    /**\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\n     * @param _dstEid The destination endpoint ID.\n     * @param _message The message payload.\n     * @param _options Additional options for the message.\n     * @param _fee The calculated LayerZero fee for the message.\n     *      - nativeFee: The native fee.\n     *      - lzTokenFee: The lzToken fee.\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\n     * @return receipt The receipt for the sent message.\n     *      - guid: The unique identifier for the sent message.\n     *      - nonce: The nonce of the sent message.\n     *      - fee: The LayerZero fee incurred for the message.\n     */\n    function _lzSend(\n        uint32 _dstEid,\n        bytes memory _message,\n        bytes memory _options,\n        MessagingFee memory _fee,\n        address _refundAddress\n    ) internal virtual returns (MessagingReceipt memory receipt) {\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\n        uint256 messageValue = _payNative(_fee.nativeFee);\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\n\n        return\n            // solhint-disable-next-line check-send-result\n            endpoint.send{ value: messageValue }(\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\n                _refundAddress\n            );\n    }\n\n    /**\n     * @dev Internal function to pay the native fee associated with the message.\n     * @param _nativeFee The native fee to be paid.\n     * @return nativeFee The amount of native currency paid.\n     *\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\n     * this will need to be overridden because msg.value would contain multiple lzFees.\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\n     */\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\n        return _nativeFee;\n    }\n\n    /**\n     * @dev Internal function to pay the LZ token fee associated with the message.\n     * @param _lzTokenFee The LZ token fee to be paid.\n     *\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\n     */\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\n        address lzToken = endpoint.lzToken();\n        if (lzToken == address(0)) revert LzTokenUnavailable();\n\n        // Pay LZ token fee by sending tokens to the endpoint.\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\n    }\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/precrime/interfaces/IOAppPreCrimeSimulator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n// @dev Import the Origin so it's exposed to OAppPreCrimeSimulator implementers.\n// solhint-disable-next-line no-unused-import\nimport { InboundPacket, Origin } from \"../libs/Packet.sol\";\n\n/**\n * @title IOAppPreCrimeSimulator Interface\n * @dev Interface for the preCrime simulation functionality in an OApp.\n */\ninterface IOAppPreCrimeSimulator {\n    // @dev simulation result used in PreCrime implementation\n    error SimulationResult(bytes result);\n    error OnlySelf();\n\n    /**\n     * @dev Emitted when the preCrime contract address is set.\n     * @param preCrimeAddress The address of the preCrime contract.\n     */\n    event PreCrimeSet(address preCrimeAddress);\n\n    /**\n     * @dev Retrieves the address of the preCrime contract implementation.\n     * @return The address of the preCrime contract.\n     */\n    function preCrime() external view returns (address);\n\n    /**\n     * @dev Retrieves the address of the OApp contract.\n     * @return The address of the OApp contract.\n     */\n    function oApp() external view returns (address);\n\n    /**\n     * @dev Sets the preCrime contract address.\n     * @param _preCrime The address of the preCrime contract.\n     */\n    function setPreCrime(address _preCrime) external;\n\n    /**\n     * @dev Mocks receiving a packet, then reverts with a series of data to infer the state/result.\n     * @param _packets An array of LayerZero InboundPacket objects representing received packets.\n     */\n    function lzReceiveAndRevert(InboundPacket[] calldata _packets) external payable;\n\n    /**\n     * @dev checks if the specified peer is considered 'trusted' by the OApp.\n     * @param _eid The endpoint Id to check.\n     * @param _peer The peer to check.\n     * @return Whether the peer passed is considered 'trusted' by the OApp.\n     */\n    function isPeer(uint32 _eid, bytes32 _peer) external view returns (bool);\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/precrime/interfaces/IPreCrime.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\nstruct PreCrimePeer {\n    uint32 eid;\n    bytes32 preCrime;\n    bytes32 oApp;\n}\n\n// TODO not done yet\ninterface IPreCrime {\n    error OnlyOffChain();\n\n    // for simulate()\n    error PacketOversize(uint256 max, uint256 actual);\n    error PacketUnsorted();\n    error SimulationFailed(bytes reason);\n\n    // for preCrime()\n    error SimulationResultNotFound(uint32 eid);\n    error InvalidSimulationResult(uint32 eid, bytes reason);\n    error CrimeFound(bytes crime);\n\n    function getConfig(bytes[] calldata _packets, uint256[] calldata _packetMsgValues) external returns (bytes memory);\n\n    function simulate(\n        bytes[] calldata _packets,\n        uint256[] calldata _packetMsgValues\n    ) external payable returns (bytes memory);\n\n    function buildSimulationResult() external view returns (bytes memory);\n\n    function preCrime(\n        bytes[] calldata _packets,\n        uint256[] calldata _packetMsgValues,\n        bytes[] calldata _simulations\n    ) external;\n\n    function version() external view returns (uint64 major, uint8 minor);\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/precrime/libs/Packet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { Origin } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\";\nimport { PacketV1Codec } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\";\n\n/**\n * @title InboundPacket\n * @dev Structure representing an inbound packet received by the contract.\n */\nstruct InboundPacket {\n    Origin origin; // Origin information of the packet.\n    uint32 dstEid; // Destination endpointId of the packet.\n    address receiver; // Receiver address for the packet.\n    bytes32 guid; // Unique identifier of the packet.\n    uint256 value; // msg.value of the packet.\n    address executor; // Executor address for the packet.\n    bytes message; // Message payload of the packet.\n    bytes extraData; // Additional arbitrary data for the packet.\n}\n\n/**\n * @title PacketDecoder\n * @dev Library for decoding LayerZero packets.\n */\nlibrary PacketDecoder {\n    using PacketV1Codec for bytes;\n\n    /**\n     * @dev Decode an inbound packet from the given packet data.\n     * @param _packet The packet data to decode.\n     * @return packet An InboundPacket struct representing the decoded packet.\n     */\n    function decode(bytes calldata _packet) internal pure returns (InboundPacket memory packet) {\n        packet.origin = Origin(_packet.srcEid(), _packet.sender(), _packet.nonce());\n        packet.dstEid = _packet.dstEid();\n        packet.receiver = _packet.receiverB20();\n        packet.guid = _packet.guid();\n        packet.message = _packet.message();\n    }\n\n    /**\n     * @dev Decode multiple inbound packets from the given packet data and associated message values.\n     * @param _packets An array of packet data to decode.\n     * @param _packetMsgValues An array of associated message values for each packet.\n     * @return packets An array of InboundPacket structs representing the decoded packets.\n     */\n    function decode(\n        bytes[] calldata _packets,\n        uint256[] memory _packetMsgValues\n    ) internal pure returns (InboundPacket[] memory packets) {\n        packets = new InboundPacket[](_packets.length);\n        for (uint256 i = 0; i < _packets.length; i++) {\n            bytes calldata packet = _packets[i];\n            packets[i] = PacketDecoder.decode(packet);\n            // @dev Allows the verifier to specify the msg.value that gets passed in lzReceive.\n            packets[i].value = _packetMsgValues[i];\n        }\n    }\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/precrime/OAppPreCrimeSimulator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IPreCrime } from \"./interfaces/IPreCrime.sol\";\nimport { IOAppPreCrimeSimulator, InboundPacket, Origin } from \"./interfaces/IOAppPreCrimeSimulator.sol\";\n\n/**\n * @title OAppPreCrimeSimulator\n * @dev Abstract contract serving as the base for preCrime simulation functionality in an OApp.\n */\nabstract contract OAppPreCrimeSimulator is IOAppPreCrimeSimulator, Ownable {\n    // The address of the preCrime implementation.\n    address public preCrime;\n\n    /**\n     * @dev Retrieves the address of the OApp contract.\n     * @return The address of the OApp contract.\n     *\n     * @dev The simulator contract is the base contract for the OApp by default.\n     * @dev If the simulator is a separate contract, override this function.\n     */\n    function oApp() external view virtual returns (address) {\n        return address(this);\n    }\n\n    /**\n     * @dev Sets the preCrime contract address.\n     * @param _preCrime The address of the preCrime contract.\n     */\n    function setPreCrime(address _preCrime) public virtual onlyOwner {\n        preCrime = _preCrime;\n        emit PreCrimeSet(_preCrime);\n    }\n\n    /**\n     * @dev Interface for pre-crime simulations. Always reverts at the end with the simulation results.\n     * @param _packets An array of InboundPacket objects representing received packets to be delivered.\n     *\n     * @dev WARNING: MUST revert at the end with the simulation results.\n     * @dev Gives the preCrime implementation the ability to mock sending packets to the lzReceive function,\n     * WITHOUT actually executing them.\n     */\n    function lzReceiveAndRevert(InboundPacket[] calldata _packets) public payable virtual {\n        for (uint256 i = 0; i < _packets.length; i++) {\n            InboundPacket calldata packet = _packets[i];\n\n            // Ignore packets that are not from trusted peers.\n            if (!isPeer(packet.origin.srcEid, packet.origin.sender)) continue;\n\n            // @dev Because a verifier is calling this function, it doesnt have access to executor params:\n            //  - address _executor\n            //  - bytes calldata _extraData\n            // preCrime will NOT work for OApps that rely on these two parameters inside of their _lzReceive().\n            // They are instead stubbed to default values, address(0) and bytes(\"\")\n            // @dev Calling this.lzReceiveSimulate removes ability for assembly return 0 callstack exit,\n            // which would cause the revert to be ignored.\n            this.lzReceiveSimulate{ value: packet.value }(\n                packet.origin,\n                packet.guid,\n                packet.message,\n                packet.executor,\n                packet.extraData\n            );\n        }\n\n        // @dev Revert with the simulation results. msg.sender must implement IPreCrime.buildSimulationResult().\n        revert SimulationResult(IPreCrime(msg.sender).buildSimulationResult());\n    }\n\n    /**\n     * @dev Is effectively an internal function because msg.sender must be address(this).\n     * Allows resetting the call stack for 'internal' calls.\n     * @param _origin The origin information containing the source endpoint and sender address.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address on the src chain.\n     *  - nonce: The nonce of the message.\n     * @param _guid The unique identifier of the packet.\n     * @param _message The message payload of the packet.\n     * @param _executor The executor address for the packet.\n     * @param _extraData Additional data for the packet.\n     */\n    function lzReceiveSimulate(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) external payable virtual {\n        // @dev Ensure ONLY can be called 'internally'.\n        if (msg.sender != address(this)) revert OnlySelf();\n        _lzReceiveSimulate(_origin, _guid, _message, _executor, _extraData);\n    }\n\n    /**\n     * @dev Internal function to handle the OAppPreCrimeSimulator simulated receive.\n     * @param _origin The origin information.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address from the src chain.\n     *  - nonce: The nonce of the LayerZero message.\n     * @param _guid The GUID of the LayerZero message.\n     * @param _message The LayerZero message.\n     * @param _executor The address of the off-chain executor.\n     * @param _extraData Arbitrary data passed by the msg executor.\n     *\n     * @dev Enables the preCrime simulator to mock sending lzReceive() messages,\n     * routes the msg down from the OAppPreCrimeSimulator, and back up to the OAppReceiver.\n     */\n    function _lzReceiveSimulate(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) internal virtual;\n\n    /**\n     * @dev checks if the specified peer is considered 'trusted' by the OApp.\n     * @param _eid The endpoint Id to check.\n     * @param _peer The peer to check.\n     * @return Whether the peer passed is considered 'trusted' by the OApp.\n     */\n    function isPeer(uint32 _eid, bytes32 _peer) public view virtual returns (bool);\n}\n"
    },
    "@layerzerolabs/oft-evm/contracts/interfaces/IOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { MessagingReceipt, MessagingFee } from \"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\";\n\n/**\n * @dev Struct representing token parameters for the OFT send() operation.\n */\nstruct SendParam {\n    uint32 dstEid; // Destination endpoint ID.\n    bytes32 to; // Recipient address.\n    uint256 amountLD; // Amount to send in local decimals.\n    uint256 minAmountLD; // Minimum amount to send in local decimals.\n    bytes extraOptions; // Additional options supplied by the caller to be used in the LayerZero message.\n    bytes composeMsg; // The composed message for the send() operation.\n    bytes oftCmd; // The OFT command to be executed, unused in default OFT implementations.\n}\n\n/**\n * @dev Struct representing OFT limit information.\n * @dev These amounts can change dynamically and are up the specific oft implementation.\n */\nstruct OFTLimit {\n    uint256 minAmountLD; // Minimum amount in local decimals that can be sent to the recipient.\n    uint256 maxAmountLD; // Maximum amount in local decimals that can be sent to the recipient.\n}\n\n/**\n * @dev Struct representing OFT receipt information.\n */\nstruct OFTReceipt {\n    uint256 amountSentLD; // Amount of tokens ACTUALLY debited from the sender in local decimals.\n    // @dev In non-default implementations, the amountReceivedLD COULD differ from this value.\n    uint256 amountReceivedLD; // Amount of tokens to be received on the remote side.\n}\n\n/**\n * @dev Struct representing OFT fee details.\n * @dev Future proof mechanism to provide a standardized way to communicate fees to things like a UI.\n */\nstruct OFTFeeDetail {\n    int256 feeAmountLD; // Amount of the fee in local decimals.\n    string description; // Description of the fee.\n}\n\n/**\n * @title IOFT\n * @dev Interface for the OftChain (OFT) token.\n * @dev Does not inherit ERC20 to accommodate usage by OFTAdapter as well.\n * @dev This specific interface ID is '0x02e49c2c'.\n */\ninterface IOFT {\n    // Custom error messages\n    error InvalidLocalDecimals();\n    error SlippageExceeded(uint256 amountLD, uint256 minAmountLD);\n\n    // Events\n    event OFTSent(\n        bytes32 indexed guid, // GUID of the OFT message.\n        uint32 dstEid, // Destination Endpoint ID.\n        address indexed fromAddress, // Address of the sender on the src chain.\n        uint256 amountSentLD, // Amount of tokens sent in local decimals.\n        uint256 amountReceivedLD // Amount of tokens received in local decimals.\n    );\n    event OFTReceived(\n        bytes32 indexed guid, // GUID of the OFT message.\n        uint32 srcEid, // Source Endpoint ID.\n        address indexed toAddress, // Address of the recipient on the dst chain.\n        uint256 amountReceivedLD // Amount of tokens received in local decimals.\n    );\n\n    /**\n     * @notice Retrieves interfaceID and the version of the OFT.\n     * @return interfaceId The interface ID.\n     * @return version The version.\n     *\n     * @dev interfaceId: This specific interface ID is '0x02e49c2c'.\n     * @dev version: Indicates a cross-chain compatible msg encoding with other OFTs.\n     * @dev If a new feature is added to the OFT cross-chain msg encoding, the version will be incremented.\n     * ie. localOFT version(x,1) CAN send messages to remoteOFT version(x,1)\n     */\n    function oftVersion() external view returns (bytes4 interfaceId, uint64 version);\n\n    /**\n     * @notice Retrieves the address of the token associated with the OFT.\n     * @return token The address of the ERC20 token implementation.\n     */\n    function token() external view returns (address);\n\n    /**\n     * @notice Indicates whether the OFT contract requires approval of the 'token()' to send.\n     * @return requiresApproval Needs approval of the underlying token implementation.\n     *\n     * @dev Allows things like wallet implementers to determine integration requirements,\n     * without understanding the underlying token implementation.\n     */\n    function approvalRequired() external view returns (bool);\n\n    /**\n     * @notice Retrieves the shared decimals of the OFT.\n     * @return sharedDecimals The shared decimals of the OFT.\n     */\n    function sharedDecimals() external view returns (uint8);\n\n    /**\n     * @notice Provides a quote for OFT-related operations.\n     * @param _sendParam The parameters for the send operation.\n     * @return limit The OFT limit information.\n     * @return oftFeeDetails The details of OFT fees.\n     * @return receipt The OFT receipt information.\n     */\n    function quoteOFT(\n        SendParam calldata _sendParam\n    ) external view returns (OFTLimit memory, OFTFeeDetail[] memory oftFeeDetails, OFTReceipt memory);\n\n    /**\n     * @notice Provides a quote for the send() operation.\n     * @param _sendParam The parameters for the send() operation.\n     * @param _payInLzToken Flag indicating whether the caller is paying in the LZ token.\n     * @return fee The calculated LayerZero messaging fee from the send() operation.\n     *\n     * @dev MessagingFee: LayerZero msg fee\n     *  - nativeFee: The native fee.\n     *  - lzTokenFee: The lzToken fee.\n     */\n    function quoteSend(SendParam calldata _sendParam, bool _payInLzToken) external view returns (MessagingFee memory);\n\n    /**\n     * @notice Executes the send() operation.\n     * @param _sendParam The parameters for the send operation.\n     * @param _fee The fee information supplied by the caller.\n     *      - nativeFee: The native fee.\n     *      - lzTokenFee: The lzToken fee.\n     * @param _refundAddress The address to receive any excess funds from fees etc. on the src.\n     * @return receipt The LayerZero messaging receipt from the send() operation.\n     * @return oftReceipt The OFT receipt information.\n     *\n     * @dev MessagingReceipt: LayerZero msg receipt\n     *  - guid: The unique identifier for the sent message.\n     *  - nonce: The nonce of the sent message.\n     *  - fee: The LayerZero fee incurred for the message.\n     */\n    function send(\n        SendParam calldata _sendParam,\n        MessagingFee calldata _fee,\n        address _refundAddress\n    ) external payable returns (MessagingReceipt memory, OFTReceipt memory);\n}\n"
    },
    "@layerzerolabs/oft-evm/contracts/libs/OFTComposeMsgCodec.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nlibrary OFTComposeMsgCodec {\n    // Offset constants for decoding composed messages\n    uint8 private constant NONCE_OFFSET = 8;\n    uint8 private constant SRC_EID_OFFSET = 12;\n    uint8 private constant AMOUNT_LD_OFFSET = 44;\n    uint8 private constant COMPOSE_FROM_OFFSET = 76;\n\n    /**\n     * @dev Encodes a OFT composed message.\n     * @param _nonce The nonce value.\n     * @param _srcEid The source endpoint ID.\n     * @param _amountLD The amount in local decimals.\n     * @param _composeMsg The composed message.\n     * @return _msg The encoded Composed message.\n     */\n    function encode(\n        uint64 _nonce,\n        uint32 _srcEid,\n        uint256 _amountLD,\n        bytes memory _composeMsg // 0x[composeFrom][composeMsg]\n    ) internal pure returns (bytes memory _msg) {\n        _msg = abi.encodePacked(_nonce, _srcEid, _amountLD, _composeMsg);\n    }\n\n    /**\n     * @dev Retrieves the nonce for the composed message.\n     * @param _msg The message.\n     * @return The nonce value.\n     */\n    function nonce(bytes calldata _msg) internal pure returns (uint64) {\n        return uint64(bytes8(_msg[:NONCE_OFFSET]));\n    }\n\n    /**\n     * @dev Retrieves the source endpoint ID for the composed message.\n     * @param _msg The message.\n     * @return The source endpoint ID.\n     */\n    function srcEid(bytes calldata _msg) internal pure returns (uint32) {\n        return uint32(bytes4(_msg[NONCE_OFFSET:SRC_EID_OFFSET]));\n    }\n\n    /**\n     * @dev Retrieves the amount in local decimals from the composed message.\n     * @param _msg The message.\n     * @return The amount in local decimals.\n     */\n    function amountLD(bytes calldata _msg) internal pure returns (uint256) {\n        return uint256(bytes32(_msg[SRC_EID_OFFSET:AMOUNT_LD_OFFSET]));\n    }\n\n    /**\n     * @dev Retrieves the composeFrom value from the composed message.\n     * @param _msg The message.\n     * @return The composeFrom value.\n     */\n    function composeFrom(bytes calldata _msg) internal pure returns (bytes32) {\n        return bytes32(_msg[AMOUNT_LD_OFFSET:COMPOSE_FROM_OFFSET]);\n    }\n\n    /**\n     * @dev Retrieves the composed message.\n     * @param _msg The message.\n     * @return The composed message.\n     */\n    function composeMsg(bytes calldata _msg) internal pure returns (bytes memory) {\n        return _msg[COMPOSE_FROM_OFFSET:];\n    }\n\n    /**\n     * @dev Converts an address to bytes32.\n     * @param _addr The address to convert.\n     * @return The bytes32 representation of the address.\n     */\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    /**\n     * @dev Converts bytes32 to an address.\n     * @param _b The bytes32 value to convert.\n     * @return The address representation of bytes32.\n     */\n    function bytes32ToAddress(bytes32 _b) internal pure returns (address) {\n        return address(uint160(uint256(_b)));\n    }\n}\n"
    },
    "@layerzerolabs/oft-evm/contracts/libs/OFTMsgCodec.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nlibrary OFTMsgCodec {\n    // Offset constants for encoding and decoding OFT messages\n    uint8 private constant SEND_TO_OFFSET = 32;\n    uint8 private constant SEND_AMOUNT_SD_OFFSET = 40;\n\n    /**\n     * @dev Encodes an OFT LayerZero message.\n     * @param _sendTo The recipient address.\n     * @param _amountShared The amount in shared decimals.\n     * @param _composeMsg The composed message.\n     * @return _msg The encoded message.\n     * @return hasCompose A boolean indicating whether the message has a composed payload.\n     */\n    function encode(\n        bytes32 _sendTo,\n        uint64 _amountShared,\n        bytes memory _composeMsg\n    ) internal view returns (bytes memory _msg, bool hasCompose) {\n        hasCompose = _composeMsg.length > 0;\n        // @dev Remote chains will want to know the composed function caller ie. msg.sender on the src.\n        _msg = hasCompose\n            ? abi.encodePacked(_sendTo, _amountShared, addressToBytes32(msg.sender), _composeMsg)\n            : abi.encodePacked(_sendTo, _amountShared);\n    }\n\n    /**\n     * @dev Checks if the OFT message is composed.\n     * @param _msg The OFT message.\n     * @return A boolean indicating whether the message is composed.\n     */\n    function isComposed(bytes calldata _msg) internal pure returns (bool) {\n        return _msg.length > SEND_AMOUNT_SD_OFFSET;\n    }\n\n    /**\n     * @dev Retrieves the recipient address from the OFT message.\n     * @param _msg The OFT message.\n     * @return The recipient address.\n     */\n    function sendTo(bytes calldata _msg) internal pure returns (bytes32) {\n        return bytes32(_msg[:SEND_TO_OFFSET]);\n    }\n\n    /**\n     * @dev Retrieves the amount in shared decimals from the OFT message.\n     * @param _msg The OFT message.\n     * @return The amount in shared decimals.\n     */\n    function amountSD(bytes calldata _msg) internal pure returns (uint64) {\n        return uint64(bytes8(_msg[SEND_TO_OFFSET:SEND_AMOUNT_SD_OFFSET]));\n    }\n\n    /**\n     * @dev Retrieves the composed message from the OFT message.\n     * @param _msg The OFT message.\n     * @return The composed message.\n     */\n    function composeMsg(bytes calldata _msg) internal pure returns (bytes memory) {\n        return _msg[SEND_AMOUNT_SD_OFFSET:];\n    }\n\n    /**\n     * @dev Converts an address to bytes32.\n     * @param _addr The address to convert.\n     * @return The bytes32 representation of the address.\n     */\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    /**\n     * @dev Converts bytes32 to an address.\n     * @param _b The bytes32 value to convert.\n     * @return The address representation of bytes32.\n     */\n    function bytes32ToAddress(bytes32 _b) internal pure returns (address) {\n        return address(uint160(uint256(_b)));\n    }\n}\n"
    },
    "@layerzerolabs/oft-evm/contracts/OFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { IOFT, OFTCore } from \"./OFTCore.sol\";\n\n/**\n * @title OFT Contract\n * @dev OFT is an ERC-20 token that extends the functionality of the OFTCore contract.\n */\nabstract contract OFT is OFTCore, ERC20 {\n    /**\n     * @dev Constructor for the OFT contract.\n     * @param _name The name of the OFT.\n     * @param _symbol The symbol of the OFT.\n     * @param _lzEndpoint The LayerZero endpoint address.\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\n     */\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _lzEndpoint,\n        address _delegate\n    ) ERC20(_name, _symbol) OFTCore(decimals(), _lzEndpoint, _delegate) {}\n\n    /**\n     * @dev Retrieves the address of the underlying ERC20 implementation.\n     * @return The address of the OFT token.\n     *\n     * @dev In the case of OFT, address(this) and erc20 are the same contract.\n     */\n    function token() public view returns (address) {\n        return address(this);\n    }\n\n    /**\n     * @notice Indicates whether the OFT contract requires approval of the 'token()' to send.\n     * @return requiresApproval Needs approval of the underlying token implementation.\n     *\n     * @dev In the case of OFT where the contract IS the token, approval is NOT required.\n     */\n    function approvalRequired() external pure virtual returns (bool) {\n        return false;\n    }\n\n    /**\n     * @dev Burns tokens from the sender's specified balance.\n     * @param _from The address to debit the tokens from.\n     * @param _amountLD The amount of tokens to send in local decimals.\n     * @param _minAmountLD The minimum amount to send in local decimals.\n     * @param _dstEid The destination chain ID.\n     * @return amountSentLD The amount sent in local decimals.\n     * @return amountReceivedLD The amount received in local decimals on the remote.\n     */\n    function _debit(\n        address _from,\n        uint256 _amountLD,\n        uint256 _minAmountLD,\n        uint32 _dstEid\n    ) internal virtual override returns (uint256 amountSentLD, uint256 amountReceivedLD) {\n        (amountSentLD, amountReceivedLD) = _debitView(_amountLD, _minAmountLD, _dstEid);\n\n        // @dev In NON-default OFT, amountSentLD could be 100, with a 10% fee, the amountReceivedLD amount is 90,\n        // therefore amountSentLD CAN differ from amountReceivedLD.\n\n        // @dev Default OFT burns on src.\n        _burn(_from, amountSentLD);\n    }\n\n    /**\n     * @dev Credits tokens to the specified address.\n     * @param _to The address to credit the tokens to.\n     * @param _amountLD The amount of tokens to credit in local decimals.\n     * @dev _srcEid The source chain ID.\n     * @return amountReceivedLD The amount of tokens ACTUALLY received in local decimals.\n     */\n    function _credit(\n        address _to,\n        uint256 _amountLD,\n        uint32 /*_srcEid*/\n    ) internal virtual override returns (uint256 amountReceivedLD) {\n        if (_to == address(0x0)) _to = address(0xdead); // _mint(...) does not support address(0x0)\n        // @dev Default OFT mints on dst.\n        _mint(_to, _amountLD);\n        // @dev In the case of NON-default OFT, the _amountLD MIGHT not be == amountReceivedLD.\n        return _amountLD;\n    }\n}\n"
    },
    "@layerzerolabs/oft-evm/contracts/OFTCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { OApp, Origin } from \"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\";\nimport { OAppOptionsType3 } from \"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\";\nimport { IOAppMsgInspector } from \"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppMsgInspector.sol\";\n\nimport { OAppPreCrimeSimulator } from \"@layerzerolabs/oapp-evm/contracts/precrime/OAppPreCrimeSimulator.sol\";\n\nimport { IOFT, SendParam, OFTLimit, OFTReceipt, OFTFeeDetail, MessagingReceipt, MessagingFee } from \"./interfaces/IOFT.sol\";\nimport { OFTMsgCodec } from \"./libs/OFTMsgCodec.sol\";\nimport { OFTComposeMsgCodec } from \"./libs/OFTComposeMsgCodec.sol\";\n\n/**\n * @title OFTCore\n * @dev Abstract contract for the OftChain (OFT) token.\n */\nabstract contract OFTCore is IOFT, OApp, OAppPreCrimeSimulator, OAppOptionsType3 {\n    using OFTMsgCodec for bytes;\n    using OFTMsgCodec for bytes32;\n\n    // @notice Provides a conversion rate when swapping between denominations of SD and LD\n    //      - shareDecimals == SD == shared Decimals\n    //      - localDecimals == LD == local decimals\n    // @dev Considers that tokens have different decimal amounts on various chains.\n    // @dev eg.\n    //  For a token\n    //      - locally with 4 decimals --> 1.2345 => uint(12345)\n    //      - remotely with 2 decimals --> 1.23 => uint(123)\n    //      - The conversion rate would be 10 ** (4 - 2) = 100\n    //  @dev If you want to send 1.2345 -> (uint 12345), you CANNOT represent that value on the remote,\n    //  you can only display 1.23 -> uint(123).\n    //  @dev To preserve the dust that would otherwise be lost on that conversion,\n    //  we need to unify a denomination that can be represented on ALL chains inside of the OFT mesh\n    uint256 public immutable decimalConversionRate;\n\n    // @notice Msg types that are used to identify the various OFT operations.\n    // @dev This can be extended in child contracts for non-default oft operations\n    // @dev These values are used in things like combineOptions() in OAppOptionsType3.sol.\n    uint16 public constant SEND = 1;\n    uint16 public constant SEND_AND_CALL = 2;\n\n    // Address of an optional contract to inspect both 'message' and 'options'\n    address public msgInspector;\n    event MsgInspectorSet(address inspector);\n\n    /**\n     * @dev Constructor.\n     * @param _localDecimals The decimals of the token on the local chain (this chain).\n     * @param _endpoint The address of the LayerZero endpoint.\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\n     */\n    constructor(uint8 _localDecimals, address _endpoint, address _delegate) OApp(_endpoint, _delegate) {\n        if (_localDecimals < sharedDecimals()) revert InvalidLocalDecimals();\n        decimalConversionRate = 10 ** (_localDecimals - sharedDecimals());\n    }\n\n    /**\n     * @notice Retrieves interfaceID and the version of the OFT.\n     * @return interfaceId The interface ID.\n     * @return version The version.\n     *\n     * @dev interfaceId: This specific interface ID is '0x02e49c2c'.\n     * @dev version: Indicates a cross-chain compatible msg encoding with other OFTs.\n     * @dev If a new feature is added to the OFT cross-chain msg encoding, the version will be incremented.\n     * ie. localOFT version(x,1) CAN send messages to remoteOFT version(x,1)\n     */\n    function oftVersion() external pure virtual returns (bytes4 interfaceId, uint64 version) {\n        return (type(IOFT).interfaceId, 1);\n    }\n\n    /**\n     * @dev Retrieves the shared decimals of the OFT.\n     * @return The shared decimals of the OFT.\n     *\n     * @dev Sets an implicit cap on the amount of tokens, over uint64.max() will need some sort of outbound cap / totalSupply cap\n     * Lowest common decimal denominator between chains.\n     * Defaults to 6 decimal places to provide up to 18,446,744,073,709.551615 units (max uint64).\n     * For tokens exceeding this totalSupply(), they will need to override the sharedDecimals function with something smaller.\n     * ie. 4 sharedDecimals would be 1,844,674,407,370,955.1615\n     */\n    function sharedDecimals() public view virtual returns (uint8) {\n        return 6;\n    }\n\n    /**\n     * @dev Sets the message inspector address for the OFT.\n     * @param _msgInspector The address of the message inspector.\n     *\n     * @dev This is an optional contract that can be used to inspect both 'message' and 'options'.\n     * @dev Set it to address(0) to disable it, or set it to a contract address to enable it.\n     */\n    function setMsgInspector(address _msgInspector) public virtual onlyOwner {\n        msgInspector = _msgInspector;\n        emit MsgInspectorSet(_msgInspector);\n    }\n\n    /**\n     * @notice Provides a quote for OFT-related operations.\n     * @param _sendParam The parameters for the send operation.\n     * @return oftLimit The OFT limit information.\n     * @return oftFeeDetails The details of OFT fees.\n     * @return oftReceipt The OFT receipt information.\n     */\n    function quoteOFT(\n        SendParam calldata _sendParam\n    )\n        external\n        view\n        virtual\n        returns (OFTLimit memory oftLimit, OFTFeeDetail[] memory oftFeeDetails, OFTReceipt memory oftReceipt)\n    {\n        uint256 minAmountLD = 0; // Unused in the default implementation.\n        uint256 maxAmountLD = type(uint64).max; // Unused in the default implementation.\n        oftLimit = OFTLimit(minAmountLD, maxAmountLD);\n\n        // Unused in the default implementation; reserved for future complex fee details.\n        oftFeeDetails = new OFTFeeDetail[](0);\n\n        // @dev This is the same as the send() operation, but without the actual send.\n        // - amountSentLD is the amount in local decimals that would be sent from the sender.\n        // - amountReceivedLD is the amount in local decimals that will be credited to the recipient on the remote OFT instance.\n        // @dev The amountSentLD MIGHT not equal the amount the user actually receives. HOWEVER, the default does.\n        (uint256 amountSentLD, uint256 amountReceivedLD) = _debitView(\n            _sendParam.amountLD,\n            _sendParam.minAmountLD,\n            _sendParam.dstEid\n        );\n        oftReceipt = OFTReceipt(amountSentLD, amountReceivedLD);\n    }\n\n    /**\n     * @notice Provides a quote for the send() operation.\n     * @param _sendParam The parameters for the send() operation.\n     * @param _payInLzToken Flag indicating whether the caller is paying in the LZ token.\n     * @return msgFee The calculated LayerZero messaging fee from the send() operation.\n     *\n     * @dev MessagingFee: LayerZero msg fee\n     *  - nativeFee: The native fee.\n     *  - lzTokenFee: The lzToken fee.\n     */\n    function quoteSend(\n        SendParam calldata _sendParam,\n        bool _payInLzToken\n    ) external view virtual returns (MessagingFee memory msgFee) {\n        // @dev mock the amount to receive, this is the same operation used in the send().\n        // The quote is as similar as possible to the actual send() operation.\n        (, uint256 amountReceivedLD) = _debitView(_sendParam.amountLD, _sendParam.minAmountLD, _sendParam.dstEid);\n\n        // @dev Builds the options and OFT message to quote in the endpoint.\n        (bytes memory message, bytes memory options) = _buildMsgAndOptions(_sendParam, amountReceivedLD);\n\n        // @dev Calculates the LayerZero fee for the send() operation.\n        return _quote(_sendParam.dstEid, message, options, _payInLzToken);\n    }\n\n    /**\n     * @dev Executes the send operation.\n     * @param _sendParam The parameters for the send operation.\n     * @param _fee The calculated fee for the send() operation.\n     *      - nativeFee: The native fee.\n     *      - lzTokenFee: The lzToken fee.\n     * @param _refundAddress The address to receive any excess funds.\n     * @return msgReceipt The receipt for the send operation.\n     * @return oftReceipt The OFT receipt information.\n     *\n     * @dev MessagingReceipt: LayerZero msg receipt\n     *  - guid: The unique identifier for the sent message.\n     *  - nonce: The nonce of the sent message.\n     *  - fee: The LayerZero fee incurred for the message.\n     */\n    function send(\n        SendParam calldata _sendParam,\n        MessagingFee calldata _fee,\n        address _refundAddress\n    ) external payable virtual returns (MessagingReceipt memory msgReceipt, OFTReceipt memory oftReceipt) {\n        return _send(_sendParam, _fee, _refundAddress);\n    }\n\n    /**\n     * @dev Internal function to execute the send operation.\n     * @param _sendParam The parameters for the send operation.\n     * @param _fee The calculated fee for the send() operation.\n     *      - nativeFee: The native fee.\n     *      - lzTokenFee: The lzToken fee.\n     * @param _refundAddress The address to receive any excess funds.\n     * @return msgReceipt The receipt for the send operation.\n     * @return oftReceipt The OFT receipt information.\n     *\n     * @dev MessagingReceipt: LayerZero msg receipt\n     *  - guid: The unique identifier for the sent message.\n     *  - nonce: The nonce of the sent message.\n     *  - fee: The LayerZero fee incurred for the message.\n     */\n    function _send(\n        SendParam calldata _sendParam,\n        MessagingFee calldata _fee,\n        address _refundAddress\n    ) internal virtual returns (MessagingReceipt memory msgReceipt, OFTReceipt memory oftReceipt) {\n        // @dev Applies the token transfers regarding this send() operation.\n        // - amountSentLD is the amount in local decimals that was ACTUALLY sent/debited from the sender.\n        // - amountReceivedLD is the amount in local decimals that will be received/credited to the recipient on the remote OFT instance.\n        (uint256 amountSentLD, uint256 amountReceivedLD) = _debit(\n            msg.sender,\n            _sendParam.amountLD,\n            _sendParam.minAmountLD,\n            _sendParam.dstEid\n        );\n\n        // @dev Builds the options and OFT message to quote in the endpoint.\n        (bytes memory message, bytes memory options) = _buildMsgAndOptions(_sendParam, amountReceivedLD);\n\n        // @dev Sends the message to the LayerZero endpoint and returns the LayerZero msg receipt.\n        msgReceipt = _lzSend(_sendParam.dstEid, message, options, _fee, _refundAddress);\n        // @dev Formulate the OFT receipt.\n        oftReceipt = OFTReceipt(amountSentLD, amountReceivedLD);\n\n        emit OFTSent(msgReceipt.guid, _sendParam.dstEid, msg.sender, amountSentLD, amountReceivedLD);\n    }\n\n    /**\n     * @dev Internal function to build the message and options.\n     * @param _sendParam The parameters for the send() operation.\n     * @param _amountLD The amount in local decimals.\n     * @return message The encoded message.\n     * @return options The encoded options.\n     */\n    function _buildMsgAndOptions(\n        SendParam calldata _sendParam,\n        uint256 _amountLD\n    ) internal view virtual returns (bytes memory message, bytes memory options) {\n        bool hasCompose;\n        // @dev This generated message has the msg.sender encoded into the payload so the remote knows who the caller is.\n        (message, hasCompose) = OFTMsgCodec.encode(\n            _sendParam.to,\n            _toSD(_amountLD),\n            // @dev Must be include a non empty bytes if you want to compose, EVEN if you dont need it on the remote.\n            // EVEN if you dont require an arbitrary payload to be sent... eg. '0x01'\n            _sendParam.composeMsg\n        );\n        // @dev Change the msg type depending if its composed or not.\n        uint16 msgType = hasCompose ? SEND_AND_CALL : SEND;\n        // @dev Combine the callers _extraOptions with the enforced options via the OAppOptionsType3.\n        options = combineOptions(_sendParam.dstEid, msgType, _sendParam.extraOptions);\n\n        // @dev Optionally inspect the message and options depending if the OApp owner has set a msg inspector.\n        // @dev If it fails inspection, needs to revert in the implementation. ie. does not rely on return boolean\n        address inspector = msgInspector; // caches the msgInspector to avoid potential double storage read\n        if (inspector != address(0)) IOAppMsgInspector(inspector).inspect(message, options);\n    }\n\n    /**\n     * @dev Internal function to handle the receive on the LayerZero endpoint.\n     * @param _origin The origin information.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address from the src chain.\n     *  - nonce: The nonce of the LayerZero message.\n     * @param _guid The unique identifier for the received LayerZero message.\n     * @param _message The encoded message.\n     * @dev _executor The address of the executor.\n     * @dev _extraData Additional data.\n     */\n    function _lzReceive(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address /*_executor*/, // @dev unused in the default implementation.\n        bytes calldata /*_extraData*/ // @dev unused in the default implementation.\n    ) internal virtual override {\n        // @dev The src sending chain doesnt know the address length on this chain (potentially non-evm)\n        // Thus everything is bytes32() encoded in flight.\n        address toAddress = _message.sendTo().bytes32ToAddress();\n        // @dev Credit the amountLD to the recipient and return the ACTUAL amount the recipient received in local decimals\n        uint256 amountReceivedLD = _credit(toAddress, _toLD(_message.amountSD()), _origin.srcEid);\n\n        if (_message.isComposed()) {\n            // @dev Proprietary composeMsg format for the OFT.\n            bytes memory composeMsg = OFTComposeMsgCodec.encode(\n                _origin.nonce,\n                _origin.srcEid,\n                amountReceivedLD,\n                _message.composeMsg()\n            );\n\n            // @dev Stores the lzCompose payload that will be executed in a separate tx.\n            // Standardizes functionality for executing arbitrary contract invocation on some non-evm chains.\n            // @dev The off-chain executor will listen and process the msg based on the src-chain-callers compose options passed.\n            // @dev The index is used when a OApp needs to compose multiple msgs on lzReceive.\n            // For default OFT implementation there is only 1 compose msg per lzReceive, thus its always 0.\n            endpoint.sendCompose(toAddress, _guid, 0 /* the index of the composed message*/, composeMsg);\n        }\n\n        emit OFTReceived(_guid, _origin.srcEid, toAddress, amountReceivedLD);\n    }\n\n    /**\n     * @dev Internal function to handle the OAppPreCrimeSimulator simulated receive.\n     * @param _origin The origin information.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address from the src chain.\n     *  - nonce: The nonce of the LayerZero message.\n     * @param _guid The unique identifier for the received LayerZero message.\n     * @param _message The LayerZero message.\n     * @param _executor The address of the off-chain executor.\n     * @param _extraData Arbitrary data passed by the msg executor.\n     *\n     * @dev Enables the preCrime simulator to mock sending lzReceive() messages,\n     * routes the msg down from the OAppPreCrimeSimulator, and back up to the OAppReceiver.\n     */\n    function _lzReceiveSimulate(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) internal virtual override {\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\n    }\n\n    /**\n     * @dev Check if the peer is considered 'trusted' by the OApp.\n     * @param _eid The endpoint ID to check.\n     * @param _peer The peer to check.\n     * @return Whether the peer passed is considered 'trusted' by the OApp.\n     *\n     * @dev Enables OAppPreCrimeSimulator to check whether a potential Inbound Packet is from a trusted source.\n     */\n    function isPeer(uint32 _eid, bytes32 _peer) public view virtual override returns (bool) {\n        return peers[_eid] == _peer;\n    }\n\n    /**\n     * @dev Internal function to remove dust from the given local decimal amount.\n     * @param _amountLD The amount in local decimals.\n     * @return amountLD The amount after removing dust.\n     *\n     * @dev Prevents the loss of dust when moving amounts between chains with different decimals.\n     * @dev eg. uint(123) with a conversion rate of 100 becomes uint(100).\n     */\n    function _removeDust(uint256 _amountLD) internal view virtual returns (uint256 amountLD) {\n        return (_amountLD / decimalConversionRate) * decimalConversionRate;\n    }\n\n    /**\n     * @dev Internal function to convert an amount from shared decimals into local decimals.\n     * @param _amountSD The amount in shared decimals.\n     * @return amountLD The amount in local decimals.\n     */\n    function _toLD(uint64 _amountSD) internal view virtual returns (uint256 amountLD) {\n        return _amountSD * decimalConversionRate;\n    }\n\n    /**\n     * @dev Internal function to convert an amount from local decimals into shared decimals.\n     * @param _amountLD The amount in local decimals.\n     * @return amountSD The amount in shared decimals.\n     */\n    function _toSD(uint256 _amountLD) internal view virtual returns (uint64 amountSD) {\n        return uint64(_amountLD / decimalConversionRate);\n    }\n\n    /**\n     * @dev Internal function to mock the amount mutation from a OFT debit() operation.\n     * @param _amountLD The amount to send in local decimals.\n     * @param _minAmountLD The minimum amount to send in local decimals.\n     * @dev _dstEid The destination endpoint ID.\n     * @return amountSentLD The amount sent, in local decimals.\n     * @return amountReceivedLD The amount to be received on the remote chain, in local decimals.\n     *\n     * @dev This is where things like fees would be calculated and deducted from the amount to be received on the remote.\n     */\n    function _debitView(\n        uint256 _amountLD,\n        uint256 _minAmountLD,\n        uint32 /*_dstEid*/\n    ) internal view virtual returns (uint256 amountSentLD, uint256 amountReceivedLD) {\n        // @dev Remove the dust so nothing is lost on the conversion between chains with different decimals for the token.\n        amountSentLD = _removeDust(_amountLD);\n        // @dev The amount to send is the same as amount received in the default implementation.\n        amountReceivedLD = amountSentLD;\n\n        // @dev Check for slippage.\n        if (amountReceivedLD < _minAmountLD) {\n            revert SlippageExceeded(amountReceivedLD, _minAmountLD);\n        }\n    }\n\n    /**\n     * @dev Internal function to perform a debit operation.\n     * @param _from The address to debit.\n     * @param _amountLD The amount to send in local decimals.\n     * @param _minAmountLD The minimum amount to send in local decimals.\n     * @param _dstEid The destination endpoint ID.\n     * @return amountSentLD The amount sent in local decimals.\n     * @return amountReceivedLD The amount received in local decimals on the remote.\n     *\n     * @dev Defined here but are intended to be overriden depending on the OFT implementation.\n     * @dev Depending on OFT implementation the _amountLD could differ from the amountReceivedLD.\n     */\n    function _debit(\n        address _from,\n        uint256 _amountLD,\n        uint256 _minAmountLD,\n        uint32 _dstEid\n    ) internal virtual returns (uint256 amountSentLD, uint256 amountReceivedLD);\n\n    /**\n     * @dev Internal function to perform a credit operation.\n     * @param _to The address to credit.\n     * @param _amountLD The amount to credit in local decimals.\n     * @param _srcEid The source endpoint ID.\n     * @return amountReceivedLD The amount ACTUALLY received in local decimals.\n     *\n     * @dev Defined here but are intended to be overriden depending on the OFT implementation.\n     * @dev Depending on OFT implementation the _amountLD could differ from the amountReceivedLD.\n     */\n    function _credit(\n        address _to,\n        uint256 _amountLD,\n        uint32 _srcEid\n    ) internal virtual returns (uint256 amountReceivedLD);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\n     *\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\n     */\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\n        return INITIALIZABLE_STORAGE;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        bytes32 slot = _initializableStorageSlot();\n        assembly {\n            $.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n\n    /**\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\n     */\n    function toUint(bool b) internal pure returns (uint256 u) {\n        assembly (\"memory-safe\") {\n            u := iszero(iszero(b))\n        }\n    }\n}\n"
    },
    "contracts/IStargate.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\n// Solidity does not support splitting import across multiple lines\n// solhint-disable-next-line max-line-length\nimport {IOFT, SendParam, MessagingFee, MessagingReceipt, OFTReceipt} from \"@layerzerolabs/lz-evm-oapp-v2/contracts/oft/interfaces/IOFT.sol\";\n\n/// @notice Stargate implementation type.\nenum StargateType {\n    Pool,\n    OFT\n}\n\n/// @notice Ticket data for bus ride.\nstruct Ticket {\n    uint72 ticketId;\n    bytes passengerBytes;\n}\n\n/// @title Interface for Stargate.\n/// @notice Defines an API for sending tokens to destination chains.\ninterface IStargate is IOFT {\n    /// @dev This function is same as `send` in OFT interface but returns the ticket data if in the bus ride mode,\n    /// which allows the caller to ride and drive the bus in the same transaction.\n    function sendToken(\n        SendParam calldata _sendParam,\n        MessagingFee calldata _fee,\n        address _refundAddress\n    )\n        external\n        payable\n        returns (\n            MessagingReceipt memory msgReceipt,\n            OFTReceipt memory oftReceipt,\n            Ticket memory ticket\n        );\n\n    /// @notice Returns the Stargate implementation type.\n    function stargateType() external pure returns (StargateType);\n}\n"
    },
    "contracts/IStargatePool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport {IStargate, SendParam, MessagingReceipt, MessagingFee, OFTReceipt} from \"./IStargate.sol\";\n\n/// @title An interface for Stargate Pools\n/// @notice Stargate Pools are a type of IStargate that allows users to pool token liquidity.\ninterface IStargatePool is IStargate {\n    /// @notice Deposit token into the pool\n    /// @param _receiver The account to mint the LP tokens to\n    /// @param _amountLD The amount of tokens to deposit in LD\n    /// @return amountLD The actual amount of tokens deposited in LD\n    function deposit(\n        address _receiver,\n        uint256 _amountLD\n    ) external payable returns (uint256 amountLD);\n\n    /// @notice Redeem an amount of LP tokens from the senders account, claiming rewards.\n    /// @param _amountLD The amount of LP tokens to redeem\n    /// @param _receiver The account to transfer the\n    function redeem(\n        uint256 _amountLD,\n        address _receiver\n    ) external returns (uint256 amountLD);\n\n    /// @notice Get how many LP tokens are redeemable for a given account\n    /// @param _owner The address of the account to check\n    /// @return amountLD The amount of LP tokens redeemable, in LD\n    function redeemable(\n        address _owner\n    ) external view returns (uint256 amountLD);\n\n    /// @notice Redeem LP tokens and send the withdrawn tokens to a destination endpoint.\n    /// @param _sendParam The SendParam payload describing the redeem and send\n    /// @param _fee The MessagingFee to perform redeemSend\n    /// @param _refundAddress The address to refund excess LayerZero messaging fees.\n    /// @return receipt The MessagingReceipt describing the result of redeemSend\n    /// @return oftReceipt The OFTReceipt describing the result of redeemSend\n    function redeemSend(\n        SendParam calldata _sendParam,\n        MessagingFee calldata _fee,\n        address _refundAddress\n    )\n        external\n        payable\n        returns (MessagingReceipt memory receipt, OFTReceipt memory oftReceipt);\n\n    /// @notice Quote the messaging fee for a redeemSend operation\n    /// @param _sendParam The SendParam payload describing the redeem and send\n    /// @param _payInLzToken Whether to pay the fee in LZ token\n    /// @return messagingFee The MessagingFee for the redeemSend operation\n    function quoteRedeemSend(\n        SendParam calldata _sendParam,\n        bool _payInLzToken\n    ) external view returns (MessagingFee memory messagingFee);\n\n    /// @notice Get the Total Value Locked in the pool.\n    /// @return The total value locked\n    function tvl() external view returns (uint256);\n\n    /// @notice Get the available balance of the pool\n    function poolBalance() external view returns (uint256);\n\n    /// @notice Get the address of the LP token\n    /// @return The address of the LP token contract.\n    function lpToken() external view returns (address);\n}\n"
    },
    "contracts/mocks/ExecutorOptions.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nimport \"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\";\n\nlibrary ExecutorOptions {\n    using CalldataBytesLib for bytes;\n\n    uint8 internal constant WORKER_ID = 1;\n\n    uint8 internal constant OPTION_TYPE_LZRECEIVE = 1;\n    uint8 internal constant OPTION_TYPE_NATIVE_DROP = 2;\n    uint8 internal constant OPTION_TYPE_LZCOMPOSE = 3;\n    uint8 internal constant OPTION_TYPE_ORDERED_EXECUTION = 4;\n    uint8 internal constant OPTION_TYPE_LZREAD = 5;\n\n    error Executor_InvalidLzReceiveOption();\n    error Executor_InvalidNativeDropOption();\n    error Executor_InvalidLzComposeOption();\n    error Executor_InvalidLzReadOption();\n\n    /// @dev decode the next executor option from the options starting from the specified cursor\n    /// @param _options [executor_id][executor_option][executor_id][executor_option]...\n    ///        executor_option = [option_size][option_type][option]\n    ///        option_size = len(option_type) + len(option)\n    ///        executor_id: uint8, option_size: uint16, option_type: uint8, option: bytes\n    /// @param _cursor the cursor to start decoding from\n    /// @return optionType the type of the option\n    /// @return option the option of the executor\n    /// @return cursor the cursor to start decoding the next executor option\n    function nextExecutorOption(\n        bytes calldata _options,\n        uint256 _cursor\n    )\n        internal\n        pure\n        returns (uint8 optionType, bytes calldata option, uint256 cursor)\n    {\n        unchecked {\n            // skip worker id\n            cursor = _cursor + 1;\n\n            // read option size\n            uint16 size = _options.toU16(cursor);\n            cursor += 2;\n\n            // read option type\n            optionType = _options.toU8(cursor);\n\n            // startCursor and endCursor are used to slice the option from _options\n            uint256 startCursor = cursor + 1; // skip option type\n            uint256 endCursor = cursor + size;\n            option = _options[startCursor:endCursor];\n            cursor += size;\n        }\n    }\n\n    function decodeLzReceiveOption(\n        bytes calldata _option\n    ) internal pure returns (uint128 gas, uint128 value) {\n        if (_option.length != 16 && _option.length != 32)\n            revert Executor_InvalidLzReceiveOption();\n        gas = _option.toU128(0);\n        value = _option.length == 32 ? _option.toU128(16) : 0;\n    }\n\n    function decodeNativeDropOption(\n        bytes calldata _option\n    ) internal pure returns (uint128 amount, bytes32 receiver) {\n        if (_option.length != 48) revert Executor_InvalidNativeDropOption();\n        amount = _option.toU128(0);\n        receiver = _option.toB32(16);\n    }\n\n    function decodeLzComposeOption(\n        bytes calldata _option\n    ) internal pure returns (uint16 index, uint128 gas, uint128 value) {\n        if (_option.length != 18 && _option.length != 34)\n            revert Executor_InvalidLzComposeOption();\n        index = _option.toU16(0);\n        gas = _option.toU128(2);\n        value = _option.length == 34 ? _option.toU128(18) : 0;\n    }\n\n    function decodeLzReadOption(\n        bytes calldata _option\n    ) internal pure returns (uint128 gas, uint32 calldataSize, uint128 value) {\n        if (_option.length != 20 && _option.length != 36)\n            revert Executor_InvalidLzReadOption();\n        gas = _option.toU128(0);\n        calldataSize = _option.toU32(16);\n        value = _option.length == 36 ? _option.toU128(20) : 0;\n    }\n\n    function encodeLzReceiveOption(\n        uint128 _gas,\n        uint128 _value\n    ) internal pure returns (bytes memory) {\n        return\n            _value == 0\n                ? abi.encodePacked(_gas)\n                : abi.encodePacked(_gas, _value);\n    }\n\n    function encodeNativeDropOption(\n        uint128 _amount,\n        bytes32 _receiver\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_amount, _receiver);\n    }\n\n    function encodeLzComposeOption(\n        uint16 _index,\n        uint128 _gas,\n        uint128 _value\n    ) internal pure returns (bytes memory) {\n        return\n            _value == 0\n                ? abi.encodePacked(_index, _gas)\n                : abi.encodePacked(_index, _gas, _value);\n    }\n\n    function encodeLzReadOption(\n        uint128 _gas,\n        uint32 _calldataSize,\n        uint128 _value\n    ) internal pure returns (bytes memory) {\n        return\n            _value == 0\n                ? abi.encodePacked(_gas, _calldataSize)\n                : abi.encodePacked(_gas, _calldataSize, _value);\n    }\n}\n"
    },
    "contracts/mocks/LZEndpoint.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.22;\n\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport {ILayerZeroEndpointV2, MessagingParams, MessagingReceipt, MessagingFee, Origin} from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\";\nimport {ExecutionState} from \"@layerzerolabs/lz-evm-protocol-v2/contracts/EndpointV2ViewUpgradeable.sol\";\nimport {ILayerZeroReceiver} from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\";\nimport {SetConfigParam} from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\";\nimport {MessagingContext} from \"@layerzerolabs/lz-evm-protocol-v2/contracts/MessagingContext.sol\";\nimport {Packet} from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ISendLib.sol\";\nimport {OFTMsgCodec} from \"@layerzerolabs/oft-evm/contracts/libs/OFTMsgCodec.sol\";\nimport {Origin} from \"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol\";\nimport {Errors} from \"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\";\nimport {GUID} from \"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/GUID.sol\";\nimport {PacketV1Codec} from \"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\";\nimport {WorkerOptions} from \"@layerzerolabs/lz-evm-messagelib-v2/contracts/SendLibBase.sol\";\nimport {IExecutorFeeLib} from \"@layerzerolabs/lz-evm-messagelib-v2/contracts/interfaces/IExecutorFeeLib.sol\";\nimport {DVNOptions} from \"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/DVNOptions.sol\";\nimport {UlnOptions} from \"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/UlnOptions.sol\";\nimport {CalldataBytesLib} from \"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\";\nimport {ExecutorOptions} from \"./ExecutorOptions.sol\";\n\ncontract EndpointV2Mock is ILayerZeroEndpointV2, MessagingContext {\n    using ExecutorOptions for bytes;\n    using OFTMsgCodec for bytes;\n    using OFTMsgCodec for bytes32;\n    using OFTMsgCodec for address;\n    using SafeCast for uint256;\n    using CalldataBytesLib for bytes;\n\n    bytes32 public constant EMPTY_PAYLOAD_HASH = bytes32(0);\n\n    uint32 public immutable eid;\n    mapping(address => address) public lzEndpointLookup;\n    mapping(address => bytes) public readResponseLookup;\n    uint32 public readChannelId;\n\n    mapping(address receiver => mapping(uint32 srcEid => mapping(bytes32 sender => uint64 nonce)))\n        public lazyInboundNonce;\n    mapping(address receiver => mapping(uint32 srcEid => mapping(bytes32 sender => mapping(uint64 inboundNonce => bytes32 payloadHash))))\n        public inboundPayloadHash;\n    mapping(address sender => mapping(uint32 dstEid => mapping(bytes32 receiver => uint64 nonce)))\n        public outboundNonce;\n\n    RelayerFeeConfig public relayerFeeConfig;\n    ProtocolFeeConfig protocolFeeConfig;\n    uint256 public verifierFee;\n\n    struct ProtocolFeeConfig {\n        uint256 zroFee;\n        uint256 nativeBP;\n    }\n\n    struct RelayerFeeConfig {\n        uint128 dstPriceRatio; // 10^10\n        uint128 dstGasPriceInWei;\n        uint128 dstNativeAmtCap;\n        uint64 baseGas;\n        uint64 gasPerByte;\n    }\n\n    uint8 internal constant _NOT_ENTERED = 1;\n    uint8 internal constant _ENTERED = 2;\n    uint8 internal _receive_entered_state = 1;\n    modifier receiveNonReentrant() {\n        require(\n            _receive_entered_state == _NOT_ENTERED,\n            \"LayerZeroMock: no receive reentrancy\"\n        );\n        _receive_entered_state = _ENTERED;\n        _;\n        _receive_entered_state = _NOT_ENTERED;\n    }\n\n    event ValueTransferFailed(address indexed to, uint256 indexed quantity);\n\n    constructor(uint32 _eid) {\n        eid = _eid;\n        // init config\n        relayerFeeConfig = RelayerFeeConfig({\n            dstPriceRatio: 1e10, // 1:1, same chain, same native coin\n            dstGasPriceInWei: 1e10,\n            dstNativeAmtCap: 1e19,\n            baseGas: 100,\n            gasPerByte: 1\n        });\n        protocolFeeConfig = ProtocolFeeConfig({zroFee: 1e18, nativeBP: 1000}); // BP 0.1\n        verifierFee = 1e16;\n    }\n\n    function send(\n        MessagingParams calldata _params,\n        address _refundAddress\n    )\n        public\n        payable\n        sendContext(_params.dstEid, msg.sender)\n        returns (MessagingReceipt memory receipt)\n    {\n        if (_params.payInLzToken) revert Errors.LZ_LzTokenUnavailable();\n\n        address lzEndpoint = lzEndpointLookup[\n            _params.receiver.bytes32ToAddress()\n        ];\n        require(\n            lzEndpoint != address(0),\n            \"LayerZeroMock: destination LayerZero Endpoint not found\"\n        );\n        bool isReadMessage = _params.dstEid == readChannelId;\n\n        // get the correct outbound nonce\n        uint64 latestNonce = _outbound(\n            msg.sender,\n            _params.dstEid,\n            _params.receiver\n        );\n\n        Packet memory packet = Packet({\n            nonce: latestNonce,\n            srcEid: eid,\n            sender: msg.sender,\n            dstEid: _params.dstEid,\n            receiver: _params.receiver,\n            guid: GUID.generate(\n                latestNonce,\n                eid,\n                msg.sender,\n                _params.dstEid,\n                _params.receiver\n            ),\n            message: _params.message\n        });\n        receipt.guid = packet.guid;\n        receipt.nonce = packet.nonce;\n        receipt.fee = _quote(_params, msg.sender);\n        require(\n            msg.value >= receipt.fee.nativeFee,\n            \"LayerZeroMock: not enough native for fees\"\n        );\n\n        // refund if they send too much\n        uint256 amount = msg.value - receipt.fee.nativeFee;\n        if (amount > 0) {\n            (bool success, ) = _refundAddress.call{value: amount}(\"\");\n            require(success, \"LayerZeroMock: failed to refund\");\n        }\n\n        uint256 totalGas;\n        uint256 dstAmount;\n        (totalGas, dstAmount) = executeNativeAirDropAndReturnLzGas(\n            _params.options\n        );\n\n        // TODO fix\n        // composed calls with correct gas\n\n        Origin memory origin = Origin({\n            // Flip src and dst for read messages\n            srcEid: isReadMessage ? packet.dstEid : packet.srcEid,\n            sender: packet.sender.addressToBytes32(),\n            nonce: packet.nonce\n        });\n\n        bytes32 payloadHash;\n        {\n            bytes memory payload = PacketV1Codec.encodePayload(packet);\n            payloadHash = keccak256(payload);\n        }\n\n        bytes memory receiveMessage;\n        if (isReadMessage) {\n            receiveMessage = readResponseLookup[\n                packet.receiver.bytes32ToAddress()\n            ];\n        } else {\n            receiveMessage = packet.message;\n        }\n\n        EndpointV2Mock(lzEndpoint).receivePayload{value: dstAmount}(\n            origin,\n            packet.receiver.bytes32ToAddress(),\n            payloadHash,\n            receiveMessage,\n            totalGas,\n            dstAmount,\n            packet.guid\n        );\n    }\n\n    function receivePayload(\n        Origin calldata _origin,\n        address _receiver,\n        bytes32 _payloadHash,\n        bytes calldata _message,\n        uint256 _gas,\n        uint256 _msgValue,\n        bytes32 _guid\n    ) external payable receiveNonReentrant {\n        inboundPayloadHash[_receiver][_origin.srcEid][_origin.sender][\n            _origin.nonce\n        ] = _payloadHash;\n        if (_msgValue > 0) {\n            try\n                ILayerZeroReceiver(_receiver).lzReceive{\n                    value: _msgValue,\n                    gas: _gas\n                }(_origin, _guid, _message, address(0), \"\")\n            {} catch (bytes memory /*reason*/) {}\n        } else {\n            try\n                ILayerZeroReceiver(_receiver).lzReceive{gas: _gas}(\n                    _origin,\n                    _guid,\n                    _message,\n                    address(0),\n                    \"\"\n                )\n            {} catch (bytes memory /*reason*/) {}\n        }\n    }\n\n    function getExecutorFee(\n        uint256 _payloadSize,\n        bytes calldata _options\n    ) public view returns (uint256) {\n        uint256 nativeFee;\n        // 2) get Executor fee\n        //  a) decodeLzReceiveOption\n        //  b) decodeNativeDropOption\n        //  c) decodeLzComposeOption\n        (uint256 totalDstAmount, uint256 totalGas) = _decodeExecutorOptions(\n            _options\n        );\n        uint256 remoteGasTotal = relayerFeeConfig.dstGasPriceInWei *\n            (relayerFeeConfig.baseGas + totalGas);\n        nativeFee += totalDstAmount + remoteGasTotal;\n\n        // tokenConversionRate = dstPrice / localPrice\n        // basePrice = totalRemoteToken * tokenConversionRate\n        uint256 basePrice = (nativeFee * relayerFeeConfig.dstPriceRatio) /\n            10 ** 10;\n\n        // pricePerByte = (dstGasPriceInWei * gasPerBytes) * tokenConversionRate\n        uint256 pricePerByte = ((relayerFeeConfig.dstGasPriceInWei *\n            relayerFeeConfig.gasPerByte *\n            relayerFeeConfig.dstPriceRatio) / 10 ** 10) * _payloadSize;\n\n        return basePrice + pricePerByte;\n    }\n\n    function _quote(\n        MessagingParams calldata _params,\n        address /*_sender*/\n    ) internal view returns (MessagingFee memory messagingFee) {\n        (bytes memory executorOptions, bytes memory dvnOptions) = UlnOptions\n            .decode(_params.options);\n\n        // 2) get Executor fee\n        uint256 executorFee = this.getExecutorFee(\n            _params.message.length,\n            executorOptions\n        );\n\n        // 1) get Verifier fee\n        // 3) get Treasury fee\n        uint256 treasuryAndVerifierFee = _getTreasuryAndVerifierFees(\n            executorFee,\n            verifierFee\n        );\n\n        messagingFee.lzTokenFee = 0;\n        messagingFee.nativeFee = executorFee + treasuryAndVerifierFee;\n    }\n\n    function _getTreasuryAndVerifierFees(\n        uint256 _executorFee,\n        uint256 _verifierFee\n    ) internal view returns (uint256) {\n        return\n            ((_executorFee + _verifierFee) * protocolFeeConfig.nativeBP) /\n            10000;\n    }\n\n    function _outbound(\n        address _sender,\n        uint32 _dstEid,\n        bytes32 _receiver\n    ) internal returns (uint64 nonce) {\n        unchecked {\n            nonce = ++outboundNonce[_sender][_dstEid][_receiver];\n        }\n    }\n\n    function setDestLzEndpoint(\n        address destAddr,\n        address lzEndpointAddr\n    ) external {\n        lzEndpointLookup[destAddr] = lzEndpointAddr;\n    }\n\n    function setReadResponse(\n        address destAddr,\n        bytes memory resolvedPayload\n    ) external {\n        readResponseLookup[destAddr] = resolvedPayload;\n    }\n\n    function setReadChannelId(uint32 _readChannelId) external {\n        readChannelId = _readChannelId;\n    }\n\n    function _decodeExecutorOptions(\n        bytes calldata _options\n    ) internal view returns (uint256 dstAmount, uint256 totalGas) {\n        if (_options.length == 0) {\n            revert IExecutorFeeLib.Executor_NoOptions();\n        }\n\n        uint256 cursor = 0;\n        totalGas = relayerFeeConfig.baseGas;\n\n        while (cursor < _options.length) {\n            (\n                uint8 optionType,\n                bytes calldata option,\n                uint256 newCursor\n            ) = _options.nextExecutorOption(cursor);\n            cursor = newCursor;\n\n            if (optionType == ExecutorOptions.OPTION_TYPE_LZRECEIVE) {\n                (uint128 gas, uint128 value) = ExecutorOptions\n                    .decodeLzReceiveOption(option);\n                dstAmount += value;\n                totalGas += gas;\n            } else if (optionType == ExecutorOptions.OPTION_TYPE_NATIVE_DROP) {\n                (uint128 nativeDropAmount, ) = ExecutorOptions\n                    .decodeNativeDropOption(option);\n                dstAmount += nativeDropAmount;\n            } else if (optionType == ExecutorOptions.OPTION_TYPE_LZCOMPOSE) {\n                (, uint128 gas, uint128 value) = ExecutorOptions\n                    .decodeLzComposeOption(option);\n                dstAmount += value;\n                totalGas += gas;\n            } else if (optionType == ExecutorOptions.OPTION_TYPE_LZREAD) {\n                (uint128 gas, , uint128 value) = ExecutorOptions\n                    .decodeLzReadOption(option);\n                dstAmount += value;\n                totalGas += gas;\n            } else {\n                revert IExecutorFeeLib.Executor_UnsupportedOptionType(\n                    optionType\n                );\n            }\n        }\n\n        if (cursor != _options.length)\n            revert IExecutorFeeLib.Executor_InvalidExecutorOptions(cursor);\n        if (dstAmount > relayerFeeConfig.dstNativeAmtCap)\n            revert IExecutorFeeLib.Executor_NativeAmountExceedsCap(\n                dstAmount,\n                relayerFeeConfig.dstNativeAmtCap\n            );\n    }\n\n    function splitOptions(\n        bytes calldata _options\n    ) internal pure returns (bytes memory, WorkerOptions[] memory) {\n        (bytes memory executorOpts, bytes memory dvnOpts) = decode(_options);\n\n        if (dvnOpts.length == 0) {\n            return (executorOpts, new WorkerOptions[](0));\n        }\n\n        WorkerOptions[] memory workerOpts = new WorkerOptions[](1);\n        workerOpts[0] = WorkerOptions(DVNOptions.WORKER_ID, dvnOpts);\n        return (executorOpts, workerOpts);\n    }\n\n    function decode(\n        bytes calldata _options\n    )\n        internal\n        pure\n        returns (bytes memory executorOptions, bytes memory dvnOptions)\n    {\n        // at least 2 bytes for the option type, but can have no options\n        if (_options.length < 2)\n            revert UlnOptions.LZ_ULN_InvalidWorkerOptions(0);\n\n        uint16 optionsType = uint16(bytes2(_options[0:2]));\n        uint256 cursor = 2;\n\n        // type3 options: [worker_option][worker_option]...\n        // worker_option: [worker_id][option_size][option]\n        // worker_id: uint8, option_size: uint16, option: bytes\n        if (optionsType == UlnOptions.TYPE_3) {\n            unchecked {\n                uint256 start = cursor;\n                uint8 lastWorkerId; // worker_id starts from 1, so 0 is an invalid worker_id\n\n                // heuristic: we assume that the options are mostly EXECUTOR options only\n                // checking the workerID can reduce gas usage for most cases\n                while (cursor < _options.length) {\n                    uint8 workerId = uint8(bytes1(_options[cursor:cursor + 1]));\n                    if (workerId == 0)\n                        revert UlnOptions.LZ_ULN_InvalidWorkerId(0);\n\n                    // workerId must equal to the lastWorkerId for the first option\n                    // so it is always skipped in the first option\n                    // this operation slices out options whenever the scan finds a different workerId\n                    if (lastWorkerId == 0) {\n                        lastWorkerId = workerId;\n                    } else if (workerId != lastWorkerId) {\n                        bytes calldata op = _options[start:cursor]; // slice out the last worker's options\n                        (executorOptions, dvnOptions) = _insertWorkerOptions(\n                            executorOptions,\n                            dvnOptions,\n                            lastWorkerId,\n                            op\n                        );\n\n                        // reset the start cursor and lastWorkerId\n                        start = cursor;\n                        lastWorkerId = workerId;\n                    }\n\n                    ++cursor; // for workerId\n\n                    uint16 size = uint16(bytes2(_options[cursor:cursor + 2]));\n                    if (size == 0)\n                        revert UlnOptions.LZ_ULN_InvalidWorkerOptions(cursor);\n                    cursor += size + 2;\n                }\n\n                // the options length must be the same as the cursor at the end\n                if (cursor != _options.length)\n                    revert UlnOptions.LZ_ULN_InvalidWorkerOptions(cursor);\n\n                // if we have reached the end of the options and the options are not empty\n                // we need to process the last worker's options\n                if (_options.length > 2) {\n                    bytes calldata op = _options[start:cursor];\n                    (executorOptions, dvnOptions) = _insertWorkerOptions(\n                        executorOptions,\n                        dvnOptions,\n                        lastWorkerId,\n                        op\n                    );\n                }\n            }\n        } else {\n            executorOptions = decodeLegacyOptions(optionsType, _options);\n        }\n    }\n\n    function _insertWorkerOptions(\n        bytes memory _executorOptions,\n        bytes memory _dvnOptions,\n        uint8 _workerId,\n        bytes calldata _newOptions\n    ) private pure returns (bytes memory, bytes memory) {\n        if (_workerId == ExecutorOptions.WORKER_ID) {\n            _executorOptions = _executorOptions.length == 0\n                ? _newOptions\n                : abi.encodePacked(_executorOptions, _newOptions);\n        } else if (_workerId == DVNOptions.WORKER_ID) {\n            _dvnOptions = _dvnOptions.length == 0\n                ? _newOptions\n                : abi.encodePacked(_dvnOptions, _newOptions);\n        } else {\n            revert UlnOptions.LZ_ULN_InvalidWorkerId(_workerId);\n        }\n        return (_executorOptions, _dvnOptions);\n    }\n\n    function decodeLegacyOptions(\n        uint16 _optionType,\n        bytes calldata _options\n    ) internal pure returns (bytes memory executorOptions) {\n        if (_optionType == UlnOptions.TYPE_1) {\n            if (_options.length != 34)\n                revert UlnOptions.LZ_ULN_InvalidLegacyType1Option();\n\n            // execution gas\n            uint128 executionGas = uint256(bytes32(_options[2:2 + 32]))\n                .toUint128();\n\n            // dont use the encode function in the ExecutorOptions lib for saving gas by calling abi.encodePacked once\n            // the result is a lzReceive option: [executor_id][option_size][option_type][execution_gas]\n            // option_type: uint8, execution_gas: uint128\n            // option_size = len(option_type) + len(execution_gas) = 1 + 16 = 17\n            executorOptions = abi.encodePacked(\n                ExecutorOptions.WORKER_ID,\n                uint16(17), // 16 + 1, 16 for option_length, + 1 for option_type\n                ExecutorOptions.OPTION_TYPE_LZRECEIVE,\n                executionGas\n            );\n        } else if (_optionType == UlnOptions.TYPE_2) {\n            // receiver size <= 32\n            if (_options.length <= 66 || _options.length > 98)\n                revert UlnOptions.LZ_ULN_InvalidLegacyType2Option();\n\n            // execution gas\n            uint128 executionGas = uint256(bytes32(_options[2:2 + 32]))\n                .toUint128();\n\n            // nativeDrop (amount + receiver)\n            uint128 amount = uint256(bytes32(_options[34:34 + 32])).toUint128(); // offset 2 + 32\n            bytes32 receiver;\n            unchecked {\n                uint256 receiverLen = _options.length - 66; // offset 2 + 32 + 32\n                receiver = bytes32(_options[66:]);\n                receiver = receiver >> (8 * (32 - receiverLen)); // padding 0 to the left\n            }\n\n            // dont use the encode function in the ExecutorOptions lib for saving gas by calling abi.encodePacked once\n            // the result has one lzReceive option and one nativeDrop option:\n            //      [executor_id][lzReceive_option_size][option_type][execution_gas] +\n            //      [executor_id][nativeDrop_option_size][option_type][nativeDrop_amount][receiver]\n            // option_type: uint8, execution_gas: uint128, nativeDrop_amount: uint128, receiver: bytes32\n            // lzReceive_option_size = len(option_type) + len(execution_gas) = 1 + 16 = 17\n            // nativeDrop_option_size = len(option_type) + len(nativeDrop_amount) + len(receiver) = 1 + 16 + 32 = 49\n            executorOptions = abi.encodePacked(\n                ExecutorOptions.WORKER_ID,\n                uint16(17), // 16 + 1, 16 for option_length, + 1 for option_type\n                ExecutorOptions.OPTION_TYPE_LZRECEIVE,\n                executionGas,\n                ExecutorOptions.WORKER_ID,\n                uint16(49), // 48 + 1, 32 + 16 for option_length, + 1 for option_type\n                ExecutorOptions.OPTION_TYPE_NATIVE_DROP,\n                amount,\n                receiver\n            );\n        } else {\n            revert UlnOptions.LZ_ULN_UnsupportedOptionType(_optionType);\n        }\n    }\n\n    // NOT IMPLEMENTING\n    function burn(\n        address _oapp,\n        uint32 _srcEid,\n        bytes32 _sender,\n        uint64 _nonce,\n        bytes32 _payloadHash\n    ) external {}\n\n    function clear(\n        address _oapp,\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message\n    ) external {}\n\n    mapping(address from => mapping(address to => mapping(bytes32 guid => mapping(uint16 index => bytes32 messageHash))))\n        public composeQueue;\n\n    function defaultReceiveLibrary(\n        uint32 /*_eid*/\n    ) external pure returns (address) {\n        return address(0);\n    }\n\n    function defaultReceiveLibraryTimeout(\n        uint32 /*_eid*/\n    ) external pure returns (address lib, uint256 expiry) {\n        return (address(0), 0);\n    }\n\n    function defaultSendLibrary(\n        uint32 /*_eid*/\n    ) external pure returns (address) {\n        return address(0);\n    }\n\n    function executable(\n        Origin calldata /*_origin*/,\n        address /*receiver*/\n    ) external pure returns (ExecutionState) {\n        return ExecutionState.NotExecutable;\n    }\n\n    function getConfig(\n        address /*_oapp*/,\n        address /*_lib*/,\n        uint32 /*_eid*/,\n        uint32 /*_configType*/\n    ) external pure returns (bytes memory config) {\n        return bytes(\"0x\");\n    }\n\n    function getReceiveLibrary(\n        address /*receiver*/,\n        uint32 /*_eid*/\n    ) external pure returns (address lib, bool isDefault) {\n        return (address(0), false);\n    }\n\n    function getRegisteredLibraries() external pure returns (address[] memory) {\n        address[] memory addresses = new address[](1);\n        addresses[0] = address(0);\n        return addresses;\n    }\n\n    function getSendLibrary(\n        address /*_sender*/,\n        uint32 /*_eid*/\n    ) external pure returns (address lib) {\n        return address(0);\n    }\n\n    function inboundNonce(\n        address _receiver,\n        uint32 _srcEid,\n        bytes32 _sender\n    ) external view returns (uint64) {\n        return lazyInboundNonce[_receiver][_srcEid][_sender];\n    }\n\n    function isDefaultSendLibrary(\n        address /*_sender*/,\n        uint32 /*_eid*/\n    ) external pure returns (bool) {\n        return false;\n    }\n\n    function isRegisteredLibrary(\n        address /*_lib*/\n    ) external pure returns (bool) {\n        return false;\n    }\n\n    function isSupportedEid(uint32 /*_eid*/) external pure returns (bool) {\n        return false;\n    }\n\n    function lzCompose(\n        address /*_from,*/,\n        address /*_to,*/,\n        bytes32 /*_guid,*/,\n        uint16 /*_index,*/,\n        bytes calldata /*_message,*/,\n        bytes calldata /*_extraData*/\n    ) external payable {}\n\n    function lzReceive(\n        Origin calldata /*_origin,*/,\n        address /*_receiver,*/,\n        bytes32 /*_guid,*/,\n        bytes calldata /*_message,*/,\n        bytes calldata /*_extraData*/\n    ) external payable {}\n\n    function lzToken() external pure returns (address) {\n        return address(0);\n    }\n\n    function nativeToken() external pure returns (address) {\n        return address(0);\n    }\n\n    function nextGuid(\n        address /*_sender,*/,\n        uint32 /*_dstEid,*/,\n        bytes32 /*_receiver*/\n    ) external pure returns (bytes32) {\n        return 0;\n    }\n\n    function nilify(\n        address /*_oapp,*/,\n        uint32 /*_srcEid,*/,\n        bytes32 /*_sender,*/,\n        uint64 /*_nonce,*/,\n        bytes32 /*_payloadHash*/\n    ) external {}\n\n    function quote(\n        MessagingParams calldata _params,\n        address _sender\n    ) external view returns (MessagingFee memory) {\n        return _quote(_params, _sender);\n    }\n\n    mapping(address receiver => mapping(uint32 srcEid => Timeout))\n        public receiveLibraryTimeout;\n\n    function registerLibrary(address /*_lib*/) public {}\n\n    function sendCompose(\n        address,\n        /*_to*/ bytes32,\n        /*_guid*/ uint16,\n        /*_index*/ bytes calldata /*_message*/\n    ) external {}\n\n    function setConfig(\n        address,\n        /*_oapp*/ address,\n        /*_lib*/ SetConfigParam[] calldata /*_params*/\n    ) external {}\n\n    function setDefaultReceiveLibrary(\n        uint32 /*_eid*/,\n        address /*_newLib*/,\n        uint256 /*_gracePeriod*/\n    ) external {}\n\n    function setDefaultReceiveLibraryTimeout(\n        uint32 /*_eid*/,\n        address /*_lib*/,\n        uint256 /*_expiry*/\n    ) external {}\n\n    function setDefaultSendLibrary(\n        uint32 /*_eid*/,\n        address /*_newLib*/\n    ) external {}\n\n    function setDelegate(address /*_delegate*/) external {}\n\n    function setLzToken(address /*_lzToken*/) external {}\n\n    function setReceiveLibrary(\n        address,\n        /*_oapp*/ uint32,\n        /*_eid*/ address,\n        /*_newLib*/ uint256 /*_gracePeriod*/\n    ) external {}\n\n    function setReceiveLibraryTimeout(\n        address,\n        /*_oapp*/ uint32,\n        /*_eid*/ address,\n        /*_lib*/ uint256 /*_gracePeriod*/\n    ) external {}\n\n    function setSendLibrary(\n        address,\n        /*_oapp*/ uint32,\n        /*_eid*/ address /*_newLib*/\n    ) external {}\n\n    function skip(\n        address,\n        /*_oapp*/ uint32,\n        /*_srcEid*/ bytes32,\n        /*_sender*/ uint64 /*_nonce*/\n    ) external {}\n\n    function verifiable(\n        Origin calldata /*_origin*/,\n        address /*_receiver*/,\n        address /*_receiveLib*/,\n        bytes32 /*_payloadHash*/\n    ) external pure returns (bool) {\n        return false;\n    }\n\n    function verify(\n        Origin calldata /*origin*/,\n        address /*_receiver*/,\n        bytes32 /*_payloadHash*/\n    ) external {}\n\n    // Helper Functions\n    function executeNativeAirDropAndReturnLzGas(\n        bytes calldata _options\n    ) public returns (uint256 totalGas, uint256 dstAmount) {\n        (bytes memory executorOpts, ) = decode(_options);\n        return this._executeNativeAirDropAndReturnLzGas(executorOpts);\n    }\n\n    function _executeNativeAirDropAndReturnLzGas(\n        bytes calldata _options\n    ) public returns (uint256 totalGas, uint256 dstAmount) {\n        if (_options.length == 0) {\n            revert IExecutorFeeLib.Executor_NoOptions();\n        }\n\n        uint256 cursor = 0;\n        while (cursor < _options.length) {\n            (\n                uint8 optionType,\n                bytes calldata option,\n                uint256 newCursor\n            ) = _options.nextExecutorOption(cursor);\n            cursor = newCursor;\n\n            if (optionType == ExecutorOptions.OPTION_TYPE_LZRECEIVE) {\n                (uint128 gas, uint128 value) = ExecutorOptions\n                    .decodeLzReceiveOption(option);\n                totalGas += gas;\n                dstAmount += value;\n            } else if (optionType == ExecutorOptions.OPTION_TYPE_NATIVE_DROP) {\n                (uint128 nativeDropAmount, bytes32 receiver) = ExecutorOptions\n                    .decodeNativeDropOption(option);\n                (bool success, ) = receiver.bytes32ToAddress().call{\n                    value: nativeDropAmount\n                }(\"\");\n                if (!success) {\n                    emit ValueTransferFailed(\n                        receiver.bytes32ToAddress(),\n                        nativeDropAmount\n                    );\n                }\n            } else if (optionType == ExecutorOptions.OPTION_TYPE_LZREAD) {\n                (uint128 gas, , uint128 value) = ExecutorOptions\n                    .decodeLzReadOption(option);\n                totalGas += gas;\n                dstAmount += value;\n            } else {\n                revert IExecutorFeeLib.Executor_UnsupportedOptionType(\n                    optionType\n                );\n            }\n        }\n\n        if (cursor != _options.length)\n            revert IExecutorFeeLib.Executor_InvalidExecutorOptions(cursor);\n    }\n\n    function _initializable(\n        Origin calldata _origin,\n        address _receiver,\n        uint64 _lazyInboundNonce\n    ) internal view returns (bool) {\n        return\n            _lazyInboundNonce > 0 || // allowInitializePath already checked\n            ILayerZeroReceiver(_receiver).allowInitializePath(_origin);\n    }\n\n    /// @dev bytes(0) payloadHash can never be submitted\n    function _verifiable(\n        Origin calldata _origin,\n        address _receiver,\n        uint64 _lazyInboundNonce\n    ) internal view returns (bool) {\n        return\n            _origin.nonce > _lazyInboundNonce || // either initializing an empty slot or reverifying\n            inboundPayloadHash[_receiver][_origin.srcEid][_origin.sender][\n                _origin.nonce\n            ] !=\n            EMPTY_PAYLOAD_HASH; // only allow reverifying if it hasn't been executed\n    }\n\n    // ========================= VIEW FUNCTIONS FOR OFFCHAIN ONLY =========================\n    // Not involved in any state transition function.\n    // ====================================================================================\n    function initializable(\n        Origin calldata _origin,\n        address _receiver\n    ) external view returns (bool) {\n        return\n            _initializable(\n                _origin,\n                _receiver,\n                lazyInboundNonce[_receiver][_origin.srcEid][_origin.sender]\n            );\n    }\n\n    function verifiable(\n        Origin calldata _origin,\n        address _receiver\n    ) external view returns (bool) {\n        return\n            _verifiable(\n                _origin,\n                _receiver,\n                lazyInboundNonce[_receiver][_origin.srcEid][_origin.sender]\n            );\n    }\n\n    /// @dev called when the endpoint checks if the msgLib attempting to verify the msg is the configured msgLib of the Oapp\n    /// @dev this check provides the ability for Oapp to lock in a trusted msgLib\n    /// @dev it will fist check if the msgLib is the currently configured one. then check if the msgLib is the one in grace period of msgLib versioning upgrade\n    function isValidReceiveLibrary(\n        address _receiver,\n        uint32 _srcEid,\n        address _actualReceiveLib\n    ) public view returns (bool) {\n        return true;\n    }\n}\n"
    },
    "contracts/mocks/LZOFT.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.24;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {OFT} from \"@layerzerolabs/oft-evm/contracts/OFT.sol\";\n\ncontract LZOFT is OFT {\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _lzEndpoint,\n        address _delegate\n    ) OFT(_name, _symbol, _lzEndpoint, _delegate) Ownable(_delegate) {\n        _mint(msg.sender, 1000 * 10 ** 18);\n    }\n}\n"
    },
    "contracts/mocks/USDC.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract USDC is ERC20 {\n    constructor() ERC20(\"USDC\", \"USDC\") {\n        _mint(msg.sender, 1000 * 10 ** 6);\n    }\n\n    function decimals() public pure override returns (uint8) {\n        return 6;\n    }\n\n    function mint(address _recipient, uint256 _amount) public {\n        _mint(_recipient, _amount);\n    }\n}\n"
    },
    "contracts/PoseidonMerkleTree.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.24;\n\nimport \"./utils/Poseidon2.sol\";\n\ncontract PoseidonMerkleTree {\n    using Field for *;\n\n    // The root of a poseidon2 merkle tree with height 12 and all leaf nodes filled with:\n    // EMPTY_LEAF = keccak256(abi.encodePacked(\"TANGERINE\")) % FIELD_MODULUS\n    uint256 public constant INITIAL_ROOT =\n        0x124005ad54174bbcb8c2dd053ea318daa80106cdcc518731504b771d6006123f;\n\n    // The maximum field that can be hashed in our poseidon2 order\n    uint256 public constant MAX_VALUE = Field.PRIME;\n\n    // filledSubtrees and roots could be bytes32[size], but using mappings makes it cheaper because\n    // it removes index range check on every interaction\n    mapping(uint256 => uint256) public filledSubtrees;\n    mapping(uint256 => uint256) public roots;\n\n    uint256 public immutable height; // 12\n\n    uint32 public constant ROOT_HISTORY_SIZE = 100;\n    uint32 public currentRootIndex = 0;\n    uint256 public nextIndex = 0;\n\n    uint256 public MAX_LEAF_INDEX;\n\n    Poseidon2 poseidon2Hasher;\n\n    constructor(uint256 _height) {\n        height = _height;\n        MAX_LEAF_INDEX = 2 ** (_height - 1);\n\n        poseidon2Hasher = new Poseidon2();\n\n        roots[0] = uint256(INITIAL_ROOT);\n    }\n\n    function zeros(uint256 i) public pure returns (uint256) {\n        if (i == 0) {\n            // Base ZERO_VALUE: keccak256(abi.encodePacked(\"TANGERINE\")) % FIELD_MODULUS\n            return\n                uint256(\n                    0x1e2856f9f722631c878a92dc1d84283d04b76df3e1831492bdf7098c1e65e478\n                );\n        } else if (i == 1) {\n            return\n                uint256(\n                    0x2c2eecb1b14035bfd9765e84195684b401a84fdb58c3c03f1bcea86dcf0c8105\n                );\n        } else if (i == 2) {\n            return\n                uint256(\n                    0x237e412a71db31e5769f63d92346a09dd0f30b9c335e9d9aa96b6625eb537445\n                );\n        } else if (i == 3) {\n            return\n                uint256(\n                    0x0b3ff120d61a7de2da3d80ff99d393796805c74be5c39e8a4c7436d1c65dad4c\n                );\n        } else if (i == 4) {\n            return\n                uint256(\n                    0x0fc58e21665302678bef68714d9e5889583071f7bd3cf018b64fafc51b0a9cf3\n                );\n        } else if (i == 5) {\n            return\n                uint256(\n                    0x235df7c585524ed8a26aea20a0fb168038f10df71d84720c9a8c1b3e78e3b6cd\n                );\n        } else if (i == 6) {\n            return\n                uint256(\n                    0x1c6cabee394ea24dc09eab1788f7f62b367e95789f883e33690d94215d819264\n                );\n        } else if (i == 7) {\n            return\n                uint256(\n                    0x09bec327ab2c8dda5d2d435cd267cb21e71f21371a01739885817eb1625d8976\n                );\n        } else if (i == 8) {\n            return\n                uint256(\n                    0x2d35519ad7061578be50cbbfe040327843f6b4cdf1458e01b5f9737dbaf82b18\n                );\n        } else if (i == 9) {\n            return\n                uint256(\n                    0x0f86c9e9c9e689394a4944bb87291a3f55cc930b21432fccf41b8267f1a98d6f\n                );\n        } else if (i == 10) {\n            return\n                uint256(\n                    0x181c9ba70900093b180c96f55cc2b1d73d60b8ab613344cbba83b33cbcc94e2b\n                );\n        } else {\n            revert(\"Index out of bounds\");\n        }\n    }\n\n    event LeafInserted(uint256 indexed leafIndex, uint256 indexed leafValue);\n\n    // Add a helper function to generate consistent keys\n    function getStorageKey(\n        uint256 level,\n        uint256 index\n    ) internal pure returns (uint256) {\n        return (level << 32) | index; // Combine level and index into a single key\n    }\n\n    function _insert(uint256 _leaf) internal returns (uint256 index) {\n        uint256 insertIndex = nextIndex;\n        require(insertIndex != MAX_LEAF_INDEX, \"Tree Full\");\n\n        uint256 currentIndex = insertIndex;\n        uint256 currentHash = _leaf;\n\n        // Store leaf at level 0\n        filledSubtrees[getStorageKey(0, currentIndex)] = currentHash;\n\n        for (uint256 i = 0; i < height - 1; i++) {\n            bool isLeft = currentIndex % 2 == 0;\n            uint256 siblingIndex = isLeft ? currentIndex + 1 : currentIndex - 1;\n\n            // Get sibling value using consistent key generation\n            uint256 siblingKey = getStorageKey(i, siblingIndex);\n            uint256 sibling = filledSubtrees[siblingKey];\n            if (sibling == 0) {\n                sibling = zeros(i);\n            }\n\n            // Calculate parent hash based on position\n            if (isLeft) {\n                currentHash = hashLeftRight(currentHash, sibling);\n            } else {\n                currentHash = hashLeftRight(sibling, currentHash);\n            }\n\n            // Move up to parent level\n            currentIndex = currentIndex / 2;\n\n            // Store the computed hash for the next level using consistent key\n            filledSubtrees[getStorageKey(i + 1, currentIndex)] = currentHash;\n        }\n\n        uint32 newRootIndex = (currentRootIndex + 1) % ROOT_HISTORY_SIZE;\n        currentRootIndex = newRootIndex;\n        roots[newRootIndex] = currentHash;\n\n        nextIndex = insertIndex + 1;\n        emit LeafInserted(insertIndex, _leaf);\n\n        return insertIndex;\n    }\n\n    function hashLeftRight(\n        uint256 _left,\n        uint256 _right\n    ) public view returns (uint256) {\n        return\n            poseidon2Hasher\n                .hash_2(uint256(_left).toField(), uint256(_right).toField())\n                .toUint256();\n    }\n\n    function isKnownRoot(uint256 _root) public view returns (bool) {\n        if (_root == 0) {\n            return false;\n        }\n        uint32 _currentRootIndex = currentRootIndex;\n        uint32 i = _currentRootIndex;\n        do {\n            if (_root == roots[i]) {\n                return true;\n            }\n            if (i == 0) {\n                i = ROOT_HISTORY_SIZE;\n            }\n            i--;\n        } while (i != _currentRootIndex);\n        return false;\n    }\n}\n"
    },
    "contracts/PrivateStargateFinance.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\n\nimport {DepositVerifier} from \"./verifiers/DepositVerifier.sol\";\nimport {TransferVerifier} from \"./verifiers/TransferVerifier.sol\";\nimport {WithdrawVerifier} from \"./verifiers/WithdrawVerifier.sol\";\nimport {WarpVerifier} from \"./verifiers/WarpVerifier.sol\";\nimport {IStargatePool} from \"./IStargatePool.sol\";\n\nimport \"./PrivateStargateOApp.sol\";\nimport \"./StargateSenderBase.sol\";\n\nuint256 constant NOTES_INPUT_LENGTH = 3;\nuint256 constant EXIT_ASSET_START_INDEX = 4;\nuint256 constant EXIT_AMOUNT_START_INDEX = 7;\nuint256 constant EXIT_ADDRESSES_START_INDEX = 10;\n\ncontract PrivateStargateFinance is\n    PrivateStargateOApp,\n    StargateSenderBase,\n    AccessControl\n{\n    DepositVerifier public depositVerifier;\n    TransferVerifier public transferVerifier;\n    WithdrawVerifier public withdrawVerifier;\n    WarpVerifier public warpVerifier;\n\n    bytes32 public DEPOSIT_ROLE = keccak256(\"DEPOSIT_ROLE\"); // :(\n\n    mapping(bytes32 => bool) public nullifierUsed;\n    mapping(address => bool) public availableOFTs;\n\n    event NullifierUsed(uint256 indexed nullifier);\n    event NotePayload(bytes encryptedNote);\n\n    constructor(\n        address _endpoint,\n        address _owner,\n        address _depositVerifier,\n        address _transferVerifier,\n        address _withdrawVerifier,\n        address _warpVerifier\n    ) Ownable(_owner) PrivateStargateOApp(_endpoint, _owner) {\n        depositVerifier = DepositVerifier(_depositVerifier);\n        transferVerifier = TransferVerifier(_transferVerifier);\n        withdrawVerifier = WithdrawVerifier(_withdrawVerifier);\n        warpVerifier = WarpVerifier(_warpVerifier);\n\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(DEPOSIT_ROLE, msg.sender);\n    }\n\n    function deposit(\n        address _erc20,\n        uint64 _amount, // !dev no exponent here\n        bytes calldata _proof,\n        bytes32[] calldata _publicInputs,\n        bytes[] calldata _payload\n    ) public onlyRole(DEPOSIT_ROLE) {\n        uint8 decimals = ERC20(_erc20).decimals();\n        bool depositTransfer = ERC20(_erc20).transferFrom(\n            msg.sender,\n            address(this),\n            _amount * 10 ** decimals\n        );\n        require(depositTransfer, \"failed to transfer deposit\");\n\n        // VERIFY PROOF\n        bool isValidProof = depositVerifier.verify(_proof, _publicInputs);\n        require(isValidProof, \"Invalid deposit proof!\");\n\n        // CHECK INPUT ADDRESS AND AMOUNT MATCH PROOF INPUTS\n        require(\n            _erc20 == address(uint160(uint256(_publicInputs[1]))),\n            \"ERC20 address mismatch\"\n        );\n        require(\n            _amount == uint64(uint256(_publicInputs[2])),\n            \"Address amount incorrect\"\n        );\n\n        // INSERT NOTE INTO TREE\n        _insert(uint256(_publicInputs[0]));\n\n        // emit payload note parameters\n        for (uint256 i = 0; i < 3 && i < _payload.length; i++) {\n            if (_payload[i].length != 0) {\n                emit NotePayload(_payload[i]);\n            }\n        }\n    }\n\n    function transfer(\n        bytes calldata _proof,\n        bytes32[] calldata _publicInputs,\n        bytes[] calldata _payload\n    ) public {\n        // verify the root is in the trees history\n        require(isKnownRoot(uint256(_publicInputs[0])), \"Invalid Root!\");\n\n        // verify the proof\n        bool isValidProof = transferVerifier.verify(_proof, _publicInputs);\n        require(isValidProof, \"Invalid transfer proof\");\n\n        // if proof is valid, write nullifiers as spent\n        for (uint256 i = 1; i < NOTES_INPUT_LENGTH + 1; i++) {\n            if (_publicInputs[i] != bytes32(0)) {\n                // check not spent\n                require(\n                    nullifierUsed[_publicInputs[i]] == false,\n                    \"Nullifier already spent\"\n                );\n                // mark as spent\n                nullifierUsed[_publicInputs[i]] = true;\n\n                emit NullifierUsed(uint256(_publicInputs[i]));\n            }\n        }\n\n        // and insert output note commitments\n        for (\n            uint256 i = NOTES_INPUT_LENGTH + 1;\n            i < NOTES_INPUT_LENGTH + 1 + NOTES_INPUT_LENGTH;\n            i++\n        ) {\n            if (_publicInputs[i] != bytes32(0)) {\n                _insert(uint256(_publicInputs[i]));\n            }\n        }\n\n        // emit payload note parameters\n        for (uint256 i = 0; i < 3 && i < _payload.length; i++) {\n            if (_payload[i].length != 0) {\n                emit NotePayload(_payload[i]);\n            }\n        }\n    }\n\n    function withdraw(\n        bytes calldata _proof,\n        bytes32[] calldata _publicInputs\n    ) public {\n        require(isKnownRoot(uint256(_publicInputs[0])), \"Invalid Root!\");\n\n        bool isValidProof = withdrawVerifier.verify(_proof, _publicInputs);\n        require(isValidProof, \"Invalid withdraw proof\");\n\n        // Mark nullifiers as spent\n        for (uint256 i = 1; i <= NOTES_INPUT_LENGTH; i++) {\n            if (_publicInputs[i] != bytes32(0)) {\n                // check not spent\n                require(\n                    nullifierUsed[_publicInputs[i]] == false,\n                    \"Nullifier already spent\"\n                );\n                // mark as spent\n                nullifierUsed[_publicInputs[i]] = true;\n\n                emit NullifierUsed(uint256(_publicInputs[i]));\n            }\n        }\n\n        // Process withdrawals - FIX: correct index calculations\n        for (uint256 i = 0; i < NOTES_INPUT_LENGTH; i++) {\n            uint256 assetIndex = EXIT_ASSET_START_INDEX + i;\n            uint256 amountIndex = EXIT_AMOUNT_START_INDEX + i;\n            uint256 addressIndex = EXIT_ADDRESSES_START_INDEX + i;\n\n            address exitAsset = address(\n                uint160(uint256(_publicInputs[assetIndex]))\n            );\n            uint256 exitAmount = uint256(_publicInputs[amountIndex]);\n            address exitAddress = address(\n                uint160(uint256(_publicInputs[addressIndex]))\n            );\n\n            if (exitAmount > 0) {\n                // Get token decimals and calculate actual amount to transfer\n                uint8 decimals = ERC20(exitAsset).decimals();\n                uint256 actualAmount = exitAmount * 10 ** decimals;\n\n                // Transfer tokens to the exit address\n                bool success = ERC20(exitAsset).transfer(\n                    exitAddress,\n                    actualAmount\n                );\n                require(success, \"Token transfer failed\");\n            }\n        }\n    }\n\n    function warp(\n        uint32 _dstEid,\n        bytes calldata _proof,\n        bytes32[] calldata _publicInputs,\n        bytes calldata _options,\n        bytes[] calldata _payload\n    ) public payable {\n        // verify root is in the history of the tree\n        require(isKnownRoot(uint256(_publicInputs[0])), \"Invalid Root!\");\n\n        // verify the warp proof\n        bool isValidProof = warpVerifier.verify(_proof, _publicInputs);\n        require(isValidProof, \"Invalid warp proof\");\n\n        // check that all assets used in this cross chain request are supported\n        for (uint256 i = 7; i < 9; i++) {\n            if (_publicInputs[i] != bytes32(0)) {\n                address exitAsset = address(uint160(uint256(_publicInputs[i])));\n                require(availableOFTs[exitAsset], \"Not a supported OFT\");\n            }\n        }\n\n        // publicInputs layout:\n        // 0 = root\n        // 1 - 3 = nullifiers\n        // 4 - 6 = output hashes\n        // 7 - 9 = stargate asset addresses\n        // 10 - 12 = stargate amounts\n\n        // Mark nullifiers as spent\n        for (uint256 i = 1; i <= NOTES_INPUT_LENGTH; i++) {\n            if (_publicInputs[i] != bytes32(0)) {\n                require(\n                    nullifierUsed[_publicInputs[i]] == false,\n                    \"Nullifier already spent\"\n                );\n                nullifierUsed[_publicInputs[i]] = true;\n                emit NullifierUsed(uint256(_publicInputs[i]));\n            }\n        }\n\n        // Extract non-zero output hashes for cross-chain payload\n        uint256[] memory finalNotes = _extractOutputHashes(_publicInputs);\n\n        // send the note hashes to insert through LZ\n        bytes memory lzPayload = abi.encode(finalNotes);\n        _lzSend(\n            _dstEid,\n            lzPayload,\n            _options,\n            // Fee in native gas and ZRO token.\n            MessagingFee(msg.value, 0),\n            // Refund address in case of failed source message.\n            payable(address(this))\n        );\n\n        // get the address of private stargate finance on the remote chain\n        bytes32 peer = peers[_dstEid];\n\n        // send the stargate assets to the PSF on the remote chain\n        _sendStargateAssets(_dstEid, peer, _publicInputs, _options);\n\n        // emit payload note parameters\n        for (uint256 i = 0; i < 3 && i < _payload.length; i++) {\n            if (_payload[i].length != 0) {\n                emit NotePayload(_payload[i]);\n            }\n        }\n    }\n\n    function addSupportedOFT(\n        address _oft,\n        bool _enabled\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        availableOFTs[_oft] = _enabled;\n    }\n\n    fallback() external payable {}\n\n    receive() external payable {}\n\n    function _extractOutputHashes(\n        bytes32[] calldata _publicInputs\n    ) internal pure returns (uint256[] memory) {\n        uint256[] memory notes = new uint256[](NOTES_INPUT_LENGTH);\n        uint256 noteCount = 0;\n\n        for (uint256 i = 4; i <= 6; i++) {\n            // output hashes are at indices 4-6\n            if (_publicInputs[i] != bytes32(0)) {\n                notes[noteCount] = uint256(_publicInputs[i]);\n                noteCount++;\n            }\n        }\n\n        // Resize notes array to actual count\n        uint256[] memory finalNotes = new uint256[](noteCount);\n        for (uint256 i = 0; i < noteCount; i++) {\n            finalNotes[i] = notes[i];\n        }\n\n        return finalNotes;\n    }\n}\n"
    },
    "contracts/PrivateStargateOApp.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.24;\n\nimport {OApp, Origin, MessagingFee} from \"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\";\n\nimport \"./PoseidonMerkleTree.sol\";\n\nabstract contract PrivateStargateOApp is PoseidonMerkleTree, OApp {\n    constructor(\n        address _endpoint,\n        address _owner\n    ) PoseidonMerkleTree(12) OApp(_endpoint, _owner) {}\n\n    function _lzReceive(\n        Origin calldata,\n        bytes32,\n        bytes calldata payload,\n        address, // Executor address as specified by the OApp.\n        bytes calldata // Any extra data or options to trigger on receipt.\n    ) internal override {\n        // Decode the payload as uint256[]\n        uint256[] memory notes = abi.decode(payload, (uint256[]));\n\n        // Insert each note into the Merkle tree\n        for (uint256 i = 0; i < notes.length; i++) {\n            _insert(notes[i]);\n        }\n    }\n\n    function quote(\n        uint32 _dstEid, // Destination chain's endpoint ID.\n        uint256[] memory notes,\n        bytes calldata _options,\n        bool _payInLzToken // boolean for which token to return fee in\n    ) public view returns (uint256 nativeFee, uint256 lzTokenFee) {\n        bytes memory _payload = abi.encode(notes);\n        MessagingFee memory fee = _quote(\n            _dstEid,\n            _payload,\n            _options,\n            _payInLzToken\n        );\n        return (fee.nativeFee, fee.lzTokenFee);\n    }\n}\n"
    },
    "contracts/StargateSenderBase.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {IOFT, SendParam, OFTReceipt} from \"@layerzerolabs/oft-evm/contracts/interfaces/IOFT.sol\";\n\nimport {MessagingFee} from \"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\";\n\ncontract StargateSenderBase {\n    function _sendStargateAssets(\n        uint32 _dstEid,\n        bytes32 peer,\n        bytes32[] calldata _publicInputs,\n        bytes calldata _options\n    ) internal {\n        for (uint256 i = 7; i < 10; i++) {\n            address stargateAssetAddress = address(\n                uint160(uint256(_publicInputs[i]))\n            );\n\n            if (stargateAssetAddress != address(0)) {\n                _sendSingleStargateAsset(\n                    _dstEid,\n                    peer,\n                    stargateAssetAddress,\n                    uint256(_publicInputs[i + 3]), // amount is at i+3 (indices 10-12)\n                    _options\n                );\n            }\n        }\n    }\n\n    function _sendSingleStargateAsset(\n        uint32 _dstEid,\n        bytes32 peer,\n        address stargateAssetAddress,\n        uint256 amount,\n        bytes calldata _options\n    ) internal {\n        uint256 adjustedAmount = amount *\n            10 ** ERC20(stargateAssetAddress).decimals();\n\n        SendParam memory sendParam = SendParam(\n            _dstEid,\n            peer,\n            adjustedAmount,\n            adjustedAmount,\n            _options,\n            \"\",\n            \"\"\n        );\n\n        MessagingFee memory fee = IOFT(stargateAssetAddress).quoteSend(\n            sendParam,\n            false\n        );\n\n        IOFT(stargateAssetAddress).send{value: fee.nativeFee}(\n            sendParam,\n            fee,\n            payable(msg.sender)\n        );\n    }\n}\n"
    },
    "contracts/utils/Field.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.24;\n\nlibrary Field {\n    type Type is uint256;\n\n    uint256 constant PRIME =\n        0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001;\n    uint256 constant PRIME_DIV_2 =\n        0x183227397098d014dc2822db40c0ac2e9419f4243cdcb848a1f0fac9f8000000;\n\n    function checkField(Field.Type a) internal pure {\n        require(Field.Type.unwrap(a) < PRIME, \"Field: input is too large\");\n    }\n\n    function toFieldUnchecked(uint256 a) internal pure returns (Field.Type b) {\n        b = Field.Type.wrap(a);\n    }\n\n    function toField(uint256 a) internal pure returns (Field.Type b) {\n        b = Field.Type.wrap(a);\n        checkField(b);\n    }\n\n    function toFieldUnchecked(bytes32 a) internal pure returns (Field.Type b) {\n        assembly {\n            b := a\n        }\n    }\n\n    function toField(bytes32 a) internal pure returns (Field.Type b) {\n        assembly {\n            b := a\n        }\n        checkField(b);\n    }\n\n    function toBytes32(Field.Type a) internal pure returns (bytes32 b) {\n        assembly {\n            b := a\n        }\n    }\n\n    function toUint256(Field.Type a) internal pure returns (uint256 b) {\n        assembly {\n            b := a\n        }\n    }\n\n    function toAddress(Field.Type a) internal pure returns (address b) {\n        require(Field.Type.unwrap(a) < (1 << 160), \"Field: input is too large\");\n        assembly {\n            b := a\n        }\n    }\n\n    function toArr(Field.Type a) internal pure returns (bytes32[] memory b) {\n        b = new bytes32[](1);\n        b[0] = toBytes32(a);\n    }\n\n    function toField(address a) internal pure returns (Field.Type b) {\n        assembly {\n            b := a\n        }\n    }\n\n    function toField(int256 a) internal pure returns (Field.Type) {\n        // return Field.Type.wrap(a);\n        if (a < 0) {\n            require(uint256(-a) < PRIME, \"Field: input is too large\");\n            return Field.Type.wrap(PRIME - uint256(-a));\n        } else {\n            require(uint256(a) < PRIME, \"Field: input is too large\");\n            return Field.Type.wrap(uint256(a));\n        }\n    }\n\n    function into(\n        Field.Type[] memory a\n    ) internal pure returns (bytes32[] memory b) {\n        assembly {\n            b := a\n        }\n    }\n\n    function add(\n        Field.Type a,\n        Field.Type b\n    ) internal pure returns (Field.Type c) {\n        assembly {\n            c := addmod(a, b, PRIME)\n        }\n    }\n\n    function mul(\n        Field.Type a,\n        Field.Type b\n    ) internal pure returns (Field.Type c) {\n        assembly {\n            c := mulmod(a, b, PRIME)\n        }\n    }\n\n    function add(Field.Type a, uint256 b) internal pure returns (Field.Type c) {\n        assembly {\n            c := addmod(a, b, PRIME)\n        }\n    }\n\n    function mul(Field.Type a, uint256 b) internal pure returns (Field.Type c) {\n        assembly {\n            c := mulmod(a, b, PRIME)\n        }\n    }\n\n    function eq(Field.Type a, Field.Type b) internal pure returns (bool c) {\n        assembly {\n            c := eq(a, b)\n        }\n    }\n\n    function isZero(Field.Type a) internal pure returns (bool c) {\n        assembly {\n            c := eq(a, 0)\n        }\n    }\n\n    function signed(\n        Field.Type a\n    ) internal pure returns (bool positive, uint256 scalar) {\n        uint256 raw = Field.Type.unwrap(a);\n        if (raw > PRIME_DIV_2) {\n            return (false, PRIME - raw);\n        } else {\n            return (true, raw);\n        }\n    }\n}\n"
    },
    "contracts/utils/Poseidon2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.8;\n\nimport {Field} from \"./Field.sol\";\nimport {Poseidon2Lib} from \"./Poseidon2Lib.sol\";\n\ncontract Poseidon2 {\n    using Field for *;\n\n    function hash_1(Field.Type x) public view returns (Field.Type) {\n        return Poseidon2Lib.hash_1(x);\n    }\n\n    function hash_2(\n        Field.Type x,\n        Field.Type y\n    ) public view returns (Field.Type) {\n        return Poseidon2Lib.hash_2(x, y);\n    }\n\n    function hash_3(\n        Field.Type x,\n        Field.Type y,\n        Field.Type z\n    ) public view returns (Field.Type) {\n        return Poseidon2Lib.hash_3(x, y, z);\n    }\n\n    function hash(Field.Type[] memory input) public view returns (Field.Type) {\n        return Poseidon2Lib.hash(input, input.length, false);\n    }\n\n    function hash(\n        Field.Type[] memory input,\n        uint256 std_input_length,\n        bool is_variable_length\n    ) public view returns (Field.Type) {\n        return Poseidon2Lib.hash(input, std_input_length, is_variable_length);\n    }\n}\n"
    },
    "contracts/utils/Poseidon2Lib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.8;\n\nimport {Field} from \"./Field.sol\";\n\n// import {console} from \"hardhat/console.sol\";\n\n// Poseidon2 hash function\n// credits: https://github.com/noir-lang/noir/blob/d8710c4442be2fcffc348f1f5776bc278d028ad0/acvm-repo/bn254_blackbox_solver/src/poseidon2.rs\nlibrary Poseidon2Lib {\n    using Field for *;\n    using Poseidon2Lib for Sponge;\n\n    uint256 constant t = 4;\n    uint256 constant rounds_f = 8;\n    uint256 constant rounds_p = 56;\n    uint256 constant RATE = 3;\n\n    struct Constants {\n        Field.Type[4] internal_matrix_diagonal;\n        Field.Type[4][64] round_constant;\n    }\n\n    struct Sponge {\n        Field.Type iv;\n        Field.Type[3] cache;\n        Field.Type[4] state;\n        uint256 cache_size;\n        bool squeeze_mode; // 0 => absorb, 1 => squeeze\n        Constants constants;\n    }\n\n    /**\n     * Public API: best for single time use\n     */\n    function hash_1(Field.Type m) internal view returns (Field.Type) {\n        Field.Type[] memory inputs = new Field.Type[](1);\n        inputs[0] = m;\n        return hash_internal(load(), inputs, 1, false);\n    }\n\n    function hash_2(\n        Field.Type m1,\n        Field.Type m2\n    ) internal view returns (Field.Type) {\n        Field.Type[] memory inputs = new Field.Type[](2);\n        inputs[0] = m1;\n        inputs[1] = m2;\n        return hash_internal(load(), inputs, 2, false);\n    }\n\n    function hash_3(\n        Field.Type m1,\n        Field.Type m2,\n        Field.Type m3\n    ) internal view returns (Field.Type) {\n        Field.Type[] memory inputs = new Field.Type[](3);\n        inputs[0] = m1;\n        inputs[1] = m2;\n        inputs[2] = m3;\n        return hash_internal(load(), inputs, 3, false);\n    }\n\n    function hash(\n        Field.Type[] memory inputs,\n        uint256 std_input_length,\n        bool is_variable_length\n    ) internal view returns (Field.Type) {\n        return\n            hash_internal(load(), inputs, std_input_length, is_variable_length);\n    }\n\n    /**\n     * Public API: best for multiple use in same call context\n     */\n    function hash_1(\n        Poseidon2Lib.Constants memory constants,\n        Field.Type m\n    ) internal view returns (Field.Type) {\n        Field.Type[] memory inputs = new Field.Type[](1);\n        inputs[0] = m;\n        return hash_internal(constants, inputs, 1, false);\n    }\n\n    function hash_2(\n        Poseidon2Lib.Constants memory constants,\n        Field.Type m1,\n        Field.Type m2\n    ) internal view returns (Field.Type) {\n        Field.Type[] memory inputs = new Field.Type[](2);\n        inputs[0] = m1;\n        inputs[1] = m2;\n        return hash_internal(constants, inputs, 2, false);\n    }\n\n    function hash_3(\n        Poseidon2Lib.Constants memory constants,\n        Field.Type m1,\n        Field.Type m2,\n        Field.Type m3\n    ) internal view returns (Field.Type) {\n        Field.Type[] memory inputs = new Field.Type[](3);\n        inputs[0] = m1;\n        inputs[1] = m2;\n        inputs[2] = m3;\n        return hash_internal(constants, inputs, 3, false);\n    }\n\n    /**\n     * Internal methods for hashing\n     */\n    function generate_iv(\n        uint256 input_length\n    ) internal view returns (Field.Type) {\n        return Field.Type.wrap(input_length << 64);\n    }\n\n    function hash_internal(\n        Poseidon2Lib.Constants memory constants,\n        Field.Type[] memory input,\n        uint256 std_input_length,\n        bool is_variable_length\n    ) internal view returns (Field.Type) {\n        Poseidon2Lib.Sponge memory sponge = new_poseidon2(\n            generate_iv(input.length),\n            constants\n        );\n\n        for (uint256 i; i < input.length; i++) {\n            if (i < std_input_length) {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if (is_variable_length) {\n            sponge.absorb(Field.Type.wrap(1));\n        }\n        return sponge.squeeze();\n    }\n\n    function new_poseidon2(\n        Field.Type iv,\n        Constants memory constants\n    ) private view returns (Poseidon2Lib.Sponge memory) {\n        Poseidon2Lib.Sponge memory result = Poseidon2Lib.Sponge({\n            iv: iv,\n            cache: [Field.Type.wrap(0), Field.Type.wrap(0), Field.Type.wrap(0)],\n            state: [\n                Field.Type.wrap(0),\n                Field.Type.wrap(0),\n                Field.Type.wrap(0),\n                Field.Type.wrap(0)\n            ],\n            cache_size: 0,\n            squeeze_mode: false,\n            constants: constants\n        });\n        result.state[RATE] = iv;\n        return result;\n    }\n\n    function perform_duplex(\n        Poseidon2Lib.Sponge memory self\n    ) internal view returns (Field.Type[RATE] memory) {\n        // zero-pad the cache\n        for (uint256 i; i < RATE; i++) {\n            if (i >= self.cache_size) {\n                self.cache[i] = Field.Type.wrap(0);\n            }\n        }\n\n        // add the cache into sponge state\n        for (uint256 i; i < RATE; i++) {\n            self.state[i] = self.state[i].add(self.cache[i]);\n        }\n        self.state = permutation(\n            self.state,\n            self.constants.internal_matrix_diagonal,\n            self.constants.round_constant\n        );\n        // return `RATE` number of field elements from the sponge state.\n        Field.Type[RATE] memory result = [\n            Field.Type.wrap(0),\n            Field.Type.wrap(0),\n            Field.Type.wrap(0)\n        ];\n        for (uint256 i; i < RATE; i++) {\n            result[i] = self.state[i];\n        }\n        return result;\n    }\n\n    function absorb(\n        Poseidon2Lib.Sponge memory self,\n        Field.Type input\n    ) internal view {\n        if ((!self.squeeze_mode) && (self.cache_size == RATE)) {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else if ((!self.squeeze_mode) && (self.cache_size != RATE)) {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    function squeeze(\n        Poseidon2Lib.Sponge memory self\n    ) internal view returns (Field.Type) {\n        if (!self.squeeze_mode) {\n            // If we're in absorb mode, apply sponge permutation to compress the cache, populate cache with compressed\n            // state and switch to squeeze mode. Note: this code block will execute if the previous `if` condition was\n            // matched\n            Field.Type[RATE] memory new_output_elements = self.perform_duplex();\n            self.squeeze_mode = true;\n            for (uint256 i; i < RATE; i++) {\n                self.cache[i] = new_output_elements[i];\n            }\n            self.cache_size = RATE;\n        }\n        // By this point, we should have a non-empty cache. Pop one item off the top of the cache and return it.\n        Field.Type result = self.cache[0];\n        for (uint256 i = 1; i < RATE; i++) {\n            if (i < self.cache_size) {\n                self.cache[i - 1] = self.cache[i];\n            }\n        }\n\n        self.cache_size -= 1;\n        self.cache[self.cache_size] = Field.Type.wrap(0);\n        return result;\n    }\n\n    function print_state(\n        Field.Type[4] memory inputs,\n        string memory s,\n        uint num\n    ) internal view {\n        // console.log(\"State\", s, num);\n        for (uint256 i; i < 4; i++) {\n            print_field(inputs[i]);\n        }\n    }\n\n    function print_field(Field.Type inp) internal view {\n        // console.logBytes32(bytes32(Field.Type.unwrap(inp)));\n    }\n\n    function permutation(\n        Field.Type[4] memory inputs,\n        Field.Type[4] memory internal_matrix_diagonal,\n        Field.Type[4][64] memory round_constant\n    ) private view returns (Field.Type[4] memory) {\n        // Read witness assignments\n        Field.Type[4] memory state = [\n            Field.Type.wrap(0),\n            Field.Type.wrap(0),\n            Field.Type.wrap(0),\n            Field.Type.wrap(0)\n        ];\n        for (uint256 i; i < 4; i++) {\n            state[i] = inputs[i];\n        }\n\n        print_state(state, \"Initial state\", 0);\n\n        // Apply 1st linear layer\n        matrix_multiplication_4x4(state);\n\n        print_state(state, \"After matrix multiplication\", 0);\n\n        // First set of external rounds\n        uint256 rf_first = rounds_f / 2;\n        for (uint256 r; r < rf_first; r++) {\n            add_round_constants(state, round_constant, r);\n            // print_state(state, \"add round constants\", r);\n            s_box(state);\n            // print_state(state, \"s_box\", r);\n            matrix_multiplication_4x4(state);\n            // print_state(state, \"matrix_multiplication_4x4\", r);\n        }\n\n        print_state(state, \"after first\", 0);\n\n        // Internal rounds\n        uint256 p_end = rf_first + rounds_p;\n        for (uint256 r = rf_first; r < p_end; r++) {\n            state[0] = state[0].add(round_constant[r][0]);\n            state[0] = single_box(state[0]);\n            internal_m_multiplication(state, internal_matrix_diagonal);\n            print_state(state, \"for loop after internm\", r);\n        }\n\n        print_state(state, \"after second\", 0);\n\n        // Remaining external rounds\n        uint256 num_rounds = rounds_f + rounds_p;\n\n        for (uint256 r = p_end; r < num_rounds; r++) {\n            add_round_constants(state, round_constant, r);\n            s_box(state);\n            matrix_multiplication_4x4(state);\n        }\n\n        print_state(state, \"final third after all rounds\", 0);\n\n        return state;\n    }\n\n    function single_box(Field.Type x) private view returns (Field.Type) {\n        // console.log(\"singlebox\");\n        // print_field(x);\n        Field.Type s = x.mul(x);\n        // print_field(s);\n        // print_field(s.mul(s));\n        // print_field(s.mul(s).mul(x));\n        // console.log(\"singlebox done\");\n        return s.mul(s).mul(x);\n    }\n\n    function s_box(Field.Type[4] memory input) private view {\n        for (uint256 i; i < 4; i++) {\n            // console.log(\"singlebox\");\n            // print_field(input[i]);\n            input[i] = single_box(input[i]);\n            // print_field(input[i]);\n        }\n    }\n\n    function add_round_constants(\n        Field.Type[4] memory state,\n        Field.Type[4][64] memory round_constant,\n        uint256 round\n    ) private view {\n        for (uint256 i; i < 4; i++) {\n            state[i] = state[i].add(round_constant[round][i]);\n        }\n    }\n\n    function matrix_multiplication_4x4(\n        Field.Type[4] memory input\n    ) private view {\n        Field.Type t0 = input[0].add(input[1]); // A + B\n        Field.Type t1 = input[2].add(input[3]); // C + D\n        Field.Type t2 = input[1].add(input[1]); // 2B\n        t2 = t2.add(t1); // 2B + C + D\n        Field.Type t3 = input[3].add(input[3]); // 2D\n        t3 = t3.add(t0); // 2D + A + B\n        Field.Type t4 = t1.add(t1);\n        t4 = t4.add(t4);\n        t4 = t4.add(t3); // A + B + 4C + 6D\n        Field.Type t5 = t0.add(t0);\n        t5 = t5.add(t5);\n        t5 = t5.add(t2); // 4A + 6B + C + D\n        Field.Type t6 = t3.add(t5); // 5A + 7B + C + 3D\n        Field.Type t7 = t2.add(t4); // A + 3B + 5C + 7D\n        input[0] = t6;\n        input[1] = t5;\n        input[2] = t7;\n        input[3] = t4;\n    }\n\n    function internal_m_multiplication(\n        Field.Type[4] memory input,\n        Field.Type[4] memory internal_matrix_diagonal\n    ) private view {\n        Field.Type sum = Field.Type.wrap(0);\n        for (uint256 i; i < 4; i++) {\n            sum = sum.add(input[i]);\n        }\n        for (uint256 i; i < 4; i++) {\n            input[i] = input[i].mul(internal_matrix_diagonal[i]);\n            input[i] = input[i].add(sum);\n        }\n    }\n\n    function load() internal view returns (Constants memory constants) {\n        constants = Constants({\n            internal_matrix_diagonal: [\n                Field.Type.wrap(\n                    0x10dc6e9c006ea38b04b1e03b4bd9490c0d03f98929ca1d7fb56821fd19d3b6e7\n                ),\n                Field.Type.wrap(\n                    0x0c28145b6a44df3e0149b3d0a30b3bb599df9756d4dd9b84a86b38cfb45a740b\n                ),\n                Field.Type.wrap(\n                    0x00544b8338791518b2c7645a50392798b21f75bb60e3596170067d00141cac15\n                ),\n                Field.Type.wrap(\n                    0x222c01175718386f2e2e82eb122789e352e105a3b8fa852613bc534433ee428b\n                )\n            ],\n            round_constant: [\n                [\n                    Field.Type.wrap(\n                        0x19b849f69450b06848da1d39bd5e4a4302bb86744edc26238b0878e269ed23e5\n                    ),\n                    Field.Type.wrap(\n                        0x265ddfe127dd51bd7239347b758f0a1320eb2cc7450acc1dad47f80c8dcf34d6\n                    ),\n                    Field.Type.wrap(\n                        0x199750ec472f1809e0f66a545e1e51624108ac845015c2aa3dfc36bab497d8aa\n                    ),\n                    Field.Type.wrap(\n                        0x157ff3fe65ac7208110f06a5f74302b14d743ea25067f0ffd032f787c7f1cdf8\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x2e49c43c4569dd9c5fd35ac45fca33f10b15c590692f8beefe18f4896ac94902\n                    ),\n                    Field.Type.wrap(\n                        0x0e35fb89981890520d4aef2b6d6506c3cb2f0b6973c24fa82731345ffa2d1f1e\n                    ),\n                    Field.Type.wrap(\n                        0x251ad47cb15c4f1105f109ae5e944f1ba9d9e7806d667ffec6fe723002e0b996\n                    ),\n                    Field.Type.wrap(\n                        0x13da07dc64d428369873e97160234641f8beb56fdd05e5f3563fa39d9c22df4e\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x0c009b84e650e6d23dc00c7dccef7483a553939689d350cd46e7b89055fd4738\n                    ),\n                    Field.Type.wrap(\n                        0x011f16b1c63a854f01992e3956f42d8b04eb650c6d535eb0203dec74befdca06\n                    ),\n                    Field.Type.wrap(\n                        0x0ed69e5e383a688f209d9a561daa79612f3f78d0467ad45485df07093f367549\n                    ),\n                    Field.Type.wrap(\n                        0x04dba94a7b0ce9e221acad41472b6bbe3aec507f5eb3d33f463672264c9f789b\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x0a3f2637d840f3a16eb094271c9d237b6036757d4bb50bf7ce732ff1d4fa28e8\n                    ),\n                    Field.Type.wrap(\n                        0x259a666f129eea198f8a1c502fdb38fa39b1f075569564b6e54a485d1182323f\n                    ),\n                    Field.Type.wrap(\n                        0x28bf7459c9b2f4c6d8e7d06a4ee3a47f7745d4271038e5157a32fdf7ede0d6a1\n                    ),\n                    Field.Type.wrap(\n                        0x0a1ca941f057037526ea200f489be8d4c37c85bbcce6a2aeec91bd6941432447\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x0c6f8f958be0e93053d7fd4fc54512855535ed1539f051dcb43a26fd926361cf\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x123106a93cd17578d426e8128ac9d90aa9e8a00708e296e084dd57e69caaf811\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x26e1ba52ad9285d97dd3ab52f8e840085e8fa83ff1e8f1877b074867cd2dee75\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x1cb55cad7bd133de18a64c5c47b9c97cbe4d8b7bf9e095864471537e6a4ae2c5\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x1dcd73e46acd8f8e0e2c7ce04bde7f6d2a53043d5060a41c7143f08e6e9055d0\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x011003e32f6d9c66f5852f05474a4def0cda294a0eb4e9b9b12b9bb4512e5574\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x2b1e809ac1d10ab29ad5f20d03a57dfebadfe5903f58bafed7c508dd2287ae8c\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x2539de1785b735999fb4dac35ee17ed0ef995d05ab2fc5faeaa69ae87bcec0a5\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x0c246c5a2ef8ee0126497f222b3e0a0ef4e1c3d41c86d46e43982cb11d77951d\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x192089c4974f68e95408148f7c0632edbb09e6a6ad1a1c2f3f0305f5d03b527b\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x1eae0ad8ab68b2f06a0ee36eeb0d0c058529097d91096b756d8fdc2fb5a60d85\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x179190e5d0e22179e46f8282872abc88db6e2fdc0dee99e69768bd98c5d06bfb\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x29bb9e2c9076732576e9a81c7ac4b83214528f7db00f31bf6cafe794a9b3cd1c\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x225d394e42207599403efd0c2464a90d52652645882aac35b10e590e6e691e08\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x064760623c25c8cf753d238055b444532be13557451c087de09efd454b23fd59\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x10ba3a0e01df92e87f301c4b716d8a394d67f4bf42a75c10922910a78f6b5b87\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x0e070bf53f8451b24f9c6e96b0c2a801cb511bc0c242eb9d361b77693f21471c\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x1b94cd61b051b04dd39755ff93821a73ccd6cb11d2491d8aa7f921014de252fb\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x1d7cb39bafb8c744e148787a2e70230f9d4e917d5713bb050487b5aa7d74070b\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x2ec93189bd1ab4f69117d0fe980c80ff8785c2961829f701bb74ac1f303b17db\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x2db366bfdd36d277a692bb825b86275beac404a19ae07a9082ea46bd83517926\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x062100eb485db06269655cf186a68532985275428450359adc99cec6960711b8\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x0761d33c66614aaa570e7f1e8244ca1120243f92fa59e4f900c567bf41f5a59b\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x20fc411a114d13992c2705aa034e3f315d78608a0f7de4ccf7a72e494855ad0d\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x25b5c004a4bdfcb5add9ec4e9ab219ba102c67e8b3effb5fc3a30f317250bc5a\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x23b1822d278ed632a494e58f6df6f5ed038b186d8474155ad87e7dff62b37f4b\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x22734b4c5c3f9493606c4ba9012499bf0f14d13bfcfcccaa16102a29cc2f69e0\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x26c0c8fe09eb30b7e27a74dc33492347e5bdff409aa3610254413d3fad795ce5\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x070dd0ccb6bd7bbae88eac03fa1fbb26196be3083a809829bbd626df348ccad9\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x12b6595bdb329b6fb043ba78bb28c3bec2c0a6de46d8c5ad6067c4ebfd4250da\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x248d97d7f76283d63bec30e7a5876c11c06fca9b275c671c5e33d95bb7e8d729\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x1a306d439d463b0816fc6fd64cc939318b45eb759ddde4aa106d15d9bd9baaaa\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x28a8f8372e3c38daced7c00421cb4621f4f1b54ddc27821b0d62d3d6ec7c56cf\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x0094975717f9a8a8bb35152f24d43294071ce320c829f388bc852183e1e2ce7e\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x04d5ee4c3aa78f7d80fde60d716480d3593f74d4f653ae83f4103246db2e8d65\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x2a6cf5e9aa03d4336349ad6fb8ed2269c7bef54b8822cc76d08495c12efde187\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x2304d31eaab960ba9274da43e19ddeb7f792180808fd6e43baae48d7efcba3f3\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x03fd9ac865a4b2a6d5e7009785817249bff08a7e0726fcb4e1c11d39d199f0b0\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x00b7258ded52bbda2248404d55ee5044798afc3a209193073f7954d4d63b0b64\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x159f81ada0771799ec38fca2d4bf65ebb13d3a74f3298db36272c5ca65e92d9a\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x1ef90e67437fbc8550237a75bc28e3bb9000130ea25f0c5471e144cf4264431f\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x1e65f838515e5ff0196b49aa41a2d2568df739bc176b08ec95a79ed82932e30d\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x2b1b045def3a166cec6ce768d079ba74b18c844e570e1f826575c1068c94c33f\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x0832e5753ceb0ff6402543b1109229c165dc2d73bef715e3f1c6e07c168bb173\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x02f614e9cedfb3dc6b762ae0a37d41bab1b841c2e8b6451bc5a8e3c390b6ad16\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x0e2427d38bd46a60dd640b8e362cad967370ebb777bedff40f6a0be27e7ed705\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x0493630b7c670b6deb7c84d414e7ce79049f0ec098c3c7c50768bbe29214a53a\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x22ead100e8e482674decdab17066c5a26bb1515355d5461a3dc06cc85327cea9\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x25b3e56e655b42cdaae2626ed2554d48583f1ae35626d04de5084e0b6d2a6f16\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x1e32752ada8836ef5837a6cde8ff13dbb599c336349e4c584b4fdc0a0cf6f9d0\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x2fa2a871c15a387cc50f68f6f3c3455b23c00995f05078f672a9864074d412e5\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x2f569b8a9a4424c9278e1db7311e889f54ccbf10661bab7fcd18e7c7a7d83505\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x044cb455110a8fdd531ade530234c518a7df93f7332ffd2144165374b246b43d\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x227808de93906d5d420246157f2e42b191fe8c90adfe118178ddc723a5319025\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x02fcca2934e046bc623adead873579865d03781ae090ad4a8579d2e7a6800355\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x0ef915f0ac120b876abccceb344a1d36bad3f3c5ab91a8ddcbec2e060d8befac\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    ),\n                    Field.Type.wrap(\n                        0x0000000000000000000000000000000000000000000000000000000000000000\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x1797130f4b7a3e1777eb757bc6f287f6ab0fb85f6be63b09f3b16ef2b1405d38\n                    ),\n                    Field.Type.wrap(\n                        0x0a76225dc04170ae3306c85abab59e608c7f497c20156d4d36c668555decc6e5\n                    ),\n                    Field.Type.wrap(\n                        0x1fffb9ec1992d66ba1e77a7b93209af6f8fa76d48acb664796174b5326a31a5c\n                    ),\n                    Field.Type.wrap(\n                        0x25721c4fc15a3f2853b57c338fa538d85f8fbba6c6b9c6090611889b797b9c5f\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x0c817fd42d5f7a41215e3d07ba197216adb4c3790705da95eb63b982bfcaf75a\n                    ),\n                    Field.Type.wrap(\n                        0x13abe3f5239915d39f7e13c2c24970b6df8cf86ce00a22002bc15866e52b5a96\n                    ),\n                    Field.Type.wrap(\n                        0x2106feea546224ea12ef7f39987a46c85c1bc3dc29bdbd7a92cd60acb4d391ce\n                    ),\n                    Field.Type.wrap(\n                        0x21ca859468a746b6aaa79474a37dab49f1ca5a28c748bc7157e1b3345bb0f959\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x05ccd6255c1e6f0c5cf1f0df934194c62911d14d0321662a8f1a48999e34185b\n                    ),\n                    Field.Type.wrap(\n                        0x0f0e34a64b70a626e464d846674c4c8816c4fb267fe44fe6ea28678cb09490a4\n                    ),\n                    Field.Type.wrap(\n                        0x0558531a4e25470c6157794ca36d0e9647dbfcfe350d64838f5b1a8a2de0d4bf\n                    ),\n                    Field.Type.wrap(\n                        0x09d3dca9173ed2faceea125157683d18924cadad3f655a60b72f5864961f1455\n                    )\n                ],\n                [\n                    Field.Type.wrap(\n                        0x0328cbd54e8c0913493f866ed03d218bf23f92d68aaec48617d4c722e5bd4335\n                    ),\n                    Field.Type.wrap(\n                        0x2bf07216e2aff0a223a487b1a7094e07e79e7bcc9798c648ee3347dd5329d34b\n                    ),\n                    Field.Type.wrap(\n                        0x1daf345a58006b736499c583cb76c316d6f78ed6a6dffc82111e11a63fe412df\n                    ),\n                    Field.Type.wrap(\n                        0x176563472456aaa746b694c60e1823611ef39039b2edc7ff391e6f2293d2c404\n                    )\n                ]\n            ]\n        });\n    }\n}\n"
    },
    "contracts/verifiers/DepositVerifier.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n// Copyright 2022 Aztec\npragma solidity >=0.8.21;\n\nuint256 constant N = 256;\nuint256 constant LOG_N = 8;\nuint256 constant NUMBER_OF_PUBLIC_INPUTS = 3;\nlibrary HonkVerificationKey {\n    function loadVerificationKey() internal pure returns (Honk.VerificationKey memory) {\n        Honk.VerificationKey memory vk = Honk.VerificationKey({\n            circuitSize: uint256(256),\n            logCircuitSize: uint256(8),\n            publicInputsSize: uint256(3),\n            ql: Honk.G1Point({ \n               x: uint256(0x0706286ec8caeaf9a630bbb670fc97508fd6af1fa6a98ea51122cdf981e184c4),\n               y: uint256(0x1d0dd40a1b56a77dfc3e7f3512765f7884bf76d8abe61655a26d496b75c3c6ce)\n            }),\n            qr: Honk.G1Point({ \n               x: uint256(0x0d6425ab78b54bdc2e8420fe0d9515520d37a1f6d04dece2f57af185179e6a61),\n               y: uint256(0x100a4864a063b3af3c46bcd8f6673d65a96da80bfc434ed118dab343be4f927a)\n            }),\n            qo: Honk.G1Point({ \n               x: uint256(0x0ade7885903164e54a3ccc2429615001c0ff3e0ec5a4acb371a25d5e15d670e9),\n               y: uint256(0x0522e70c6ed93b9b7578729b8310c267d0deb1c9695c3a233dd997ba701f67af)\n            }),\n            q4: Honk.G1Point({ \n               x: uint256(0x22d2dc9c8a8d8d683f0e911d1d07bc066c0933c107ef9564fdca1cf2559d1a00),\n               y: uint256(0x2b0dcf7d83ecf249f51717d2a2aac1af660c2eec742b86551a361ce26382c769)\n            }),\n            qm: Honk.G1Point({ \n               x: uint256(0x08dbbddedaf64ee8decef3c386e365712391deb46d24ee93929354b9481c99cd),\n               y: uint256(0x1ef73310e1a629ee1dca12b4525b84856d4b32af4379975ce3abf9b029d45efe)\n            }),\n            qc: Honk.G1Point({ \n               x: uint256(0x180253fd74458f495d11e366220e0b8b1ace2ea1acd2460888383b402273bb7a),\n               y: uint256(0x152f2175d510f4c6b7dd34dcd65c1565eebe2a46bf6bf5d3b730364b9f528f51)\n            }),\n            qArith: Honk.G1Point({ \n               x: uint256(0x1ea52a7c58f78261ca684a542381ead453ce8dbceb58c95e3564b8d67c518e1d),\n               y: uint256(0x09875c09d2c36ba3caab25772ec7c0bf1d5e81447c510e06e1b88920aa250d36)\n            }),\n            qDeltaRange: Honk.G1Point({ \n               x: uint256(0x1f497cbf5284ff29a2d336e599199929a17181c7934fc3fdbd352eac5cb521b9),\n               y: uint256(0x13ea38a0bd2aa751a490a724fac818072bd9c0c6beda1fdee6d4ff0432ba9e1b)\n            }),\n            qElliptic: Honk.G1Point({ \n               x: uint256(0x0384638dd92e0abd1d0455ad4b429bee5960e2f4e0eef28e946561e55a4d9807),\n               y: uint256(0x0edd0d417777cdfe14def171f26ffd8849f800a9aa2563c403966bb405f3a5d3)\n            }),\n            qAux: Honk.G1Point({ \n               x: uint256(0x26131fc1251eb7746e72a19f9f9b250f079744ec926fc2a41fb8a0489d1fb444),\n               y: uint256(0x03588be01690f20304e3d200c3b81a867f03abc37431898437d94c0822213fbb)\n            }),\n            qLookup: Honk.G1Point({ \n               x: uint256(0x2594d00a131b347f472a021eac09e25eacba35749a9ba8f8c7f4a726ff63a910),\n               y: uint256(0x2499be5abe1cf5463534a1d0613f82449f1989f1186f2d0b67295bda7f8a0f55)\n            }),\n            qPoseidon2External: Honk.G1Point({ \n               x: uint256(0x2342ad3c9f80d265726011de0e98f729369164805b4229a3bf7e04c500d94cdf),\n               y: uint256(0x1756f15def234f58df4a8f68b4f10b26ecda7e6ecebaa8862001746309ea9248)\n            }),\n            qPoseidon2Internal: Honk.G1Point({ \n               x: uint256(0x2c20e6cb1cfaf478d9673a371652e5133aed49a04ffe951f2dc443984785c946),\n               y: uint256(0x1baeded16e0fdb3baf90557e93d7dcbfd0761e64d7967bda2811966fbbfaa636)\n            }),\n            s1: Honk.G1Point({ \n               x: uint256(0x138d1fb08ddfa477283ae2dec71c3ed717dae8411f3f37b27bf5fe9488d1e9be),\n               y: uint256(0x02676f66a1177457c55d836bfdf72f4d0d9b367e008e96f9ec265085bf8c1d20)\n            }),\n            s2: Honk.G1Point({ \n               x: uint256(0x1882013328407779c80f6f7065e661c4a9ef0f06af192c10b13c5e2601a1f8d3),\n               y: uint256(0x02ddba1dcb884d05cf49175fcef625cfadffdf89ed5ce3ae5db1f167da530a54)\n            }),\n            s3: Honk.G1Point({ \n               x: uint256(0x198a1735a9fe5fb6fbaa6d1b2e25108d1e3435ac9d56b8187c88de53b48b7bb9),\n               y: uint256(0x1fa57aeaa19667215424dbbfaaac52f9d480a3128fe09f493aa747a1b0048542)\n            }),\n            s4: Honk.G1Point({ \n               x: uint256(0x2b95f58e44085fde26fe49518d4608b25dc00c111ded19ae4b89737e3bccf3c9),\n               y: uint256(0x03b870c5743e68c8544ab4818213dede89ad8e640ed43a6538d1eeab011ae16b)\n            }),\n            t1: Honk.G1Point({ \n               x: uint256(0x1fb7c5d789d32e42a08e41296286139f603c7607ce186d0cce6e472dfe021473),\n               y: uint256(0x09d80a7c25410f51739aadc54ad122874e4551efc35bd23807ecf23a79ef418a)\n            }),\n            t2: Honk.G1Point({ \n               x: uint256(0x108788a192d4d3c38e445629bb550acf212f9b2049b6fb1cc76900bd482fb5b0),\n               y: uint256(0x195266ac0788c227762333892ad282a4679450ae72e8e8b4a1ead0e63d4f4e04)\n            }),\n            t3: Honk.G1Point({ \n               x: uint256(0x192a87ba208ab02639f2453bde4d15e8c489e522f16c07fd8e312a10142484d8),\n               y: uint256(0x0978af3f655d807c77436eec1810420c3170702a20ae32933baa816253797b15)\n            }),\n            t4: Honk.G1Point({ \n               x: uint256(0x1a552bd8d3265d1f23e7ff166cf20fffa5c0688c867cfd3a2ea65452d8ad60a4),\n               y: uint256(0x1cb1414f7b9f8edb7c7a0d61f66e24e632a4050d9b3be0d6c35109aa99693039)\n            }),\n            id1: Honk.G1Point({ \n               x: uint256(0x01ae22bf031b8c1930dec03b8f4704c49c28cd98474dca7d07875473949ef998),\n               y: uint256(0x03f6eee33948202497991c8673119d4abf66d70d68481c6b80976a643a5b9325)\n            }),\n            id2: Honk.G1Point({ \n               x: uint256(0x22446f485968f51280dc48cc30abf8171154f4910b8798ba65479bdf88c8c461),\n               y: uint256(0x0e13564c484a1b26820e2601e39196e1b936eb5dd4b9cfeb2cd330b28ff915f3)\n            }),\n            id3: Honk.G1Point({ \n               x: uint256(0x1b5ff984e06c61d45bbe6f3f6a0e799d975e986b0916547be10ca43147839e02),\n               y: uint256(0x25e0f2d4bb40608a68f3ee8da180c87ca8c87bc35ea252b4a68aa64e54a36bf6)\n            }),\n            id4: Honk.G1Point({ \n               x: uint256(0x2cab3861baed5b5ccd0830a5e20c9aab77cd8f4f568bf79b0376d9036133c577),\n               y: uint256(0x07dd4372e0ddf9927f4e175f9d2472040e16b1dbb7661e1abb1090ccb205dd99)\n            }),\n            lagrangeFirst: Honk.G1Point({ \n               x: uint256(0x0000000000000000000000000000000000000000000000000000000000000001),\n               y: uint256(0x0000000000000000000000000000000000000000000000000000000000000002)\n            }),\n            lagrangeLast: Honk.G1Point({ \n               x: uint256(0x29c8a94ab2f7f2c7110344ab367552bfe2cf1e4b374083e44458530da00b67f6),\n               y: uint256(0x2c5020e20f85671e916492988dd560862e6cd38a99501c4d5d3ff71b72a79891)\n            })\n        });\n        return vk;\n    }\n}\n\npragma solidity ^0.8.27;\n\ntype Fr is uint256;\n\nusing { add as + } for Fr global;\nusing { sub as - } for Fr global;\nusing { mul as * } for Fr global;\nusing { exp as ^ } for Fr global;\nusing { notEqual as != } for Fr global;\nusing { equal as == } for Fr global;\n\nuint256 constant MODULUS =\n    21888242871839275222246405745257275088548364400416034343698204186575808495617; // Prime field order\n\nFr constant MINUS_ONE = Fr.wrap(MODULUS - 1);\n\n// Instantiation\nlibrary FrLib\n{\n    function from(uint256 value) internal pure returns(Fr)\n    {\n        return Fr.wrap(value % MODULUS);\n    }\n\n    function fromBytes32(bytes32 value) internal pure returns(Fr)\n    {\n        return Fr.wrap(uint256(value) % MODULUS);\n    }\n\n    function toBytes32(Fr value) internal pure returns(bytes32)\n    {\n        return bytes32(Fr.unwrap(value));\n    }\n\n    function invert(Fr value) internal view returns(Fr)\n    {\n        uint256 v = Fr.unwrap(value);\n        uint256 result;\n\n        // Call the modexp precompile to invert in the field\n        assembly\n        {\n            let free := mload(0x40)\n            mstore(free, 0x20)\n            mstore(add(free, 0x20), 0x20)\n            mstore(add(free, 0x40), 0x20)\n            mstore(add(free, 0x60), v)\n            mstore(add(free, 0x80), sub(MODULUS, 2))\n            mstore(add(free, 0xa0), MODULUS)\n            let success := staticcall(gas(), 0x05, free, 0xc0, 0x00, 0x20)\n            if iszero(success) {\n                revert(0, 0)\n            }\n            result := mload(0x00)\n        }\n\n        return Fr.wrap(result);\n    }\n\n    function pow(Fr base, uint256 v) internal view returns(Fr)\n    {\n        uint256 b = Fr.unwrap(base);\n        uint256 result;\n\n        // Call the modexp precompile to invert in the field\n        assembly\n        {\n            let free := mload(0x40)\n            mstore(free, 0x20)\n            mstore(add(free, 0x20), 0x20)\n            mstore(add(free, 0x40), 0x20)\n            mstore(add(free, 0x60), b)\n            mstore(add(free, 0x80), v)\n            mstore(add(free, 0xa0), MODULUS)\n            let success := staticcall(gas(), 0x05, free, 0xc0, 0x00, 0x20)\n            if iszero(success) {\n                revert(0, 0)\n            }\n            result := mload(0x00)\n        }\n\n        return Fr.wrap(result);\n    }\n\n    function div(Fr numerator, Fr denominator) internal view returns(Fr)\n    {\n        return numerator * invert(denominator);\n    }\n\n    function sqr(Fr value) internal pure returns (Fr) {\n        return value * value;\n    }\n\n    function unwrap(Fr value) internal pure returns (uint256) {\n        return Fr.unwrap(value);\n    }\n\n    function neg(Fr value) internal pure returns (Fr) {\n        return Fr.wrap(MODULUS - Fr.unwrap(value));\n    }\n}\n\n// Free functions\nfunction add(Fr a, Fr b) pure returns(Fr)\n{\n    return Fr.wrap(addmod(Fr.unwrap(a), Fr.unwrap(b), MODULUS));\n}\n\nfunction mul(Fr a, Fr b) pure returns(Fr)\n{\n    return Fr.wrap(mulmod(Fr.unwrap(a), Fr.unwrap(b), MODULUS));\n}\n\nfunction sub(Fr a, Fr b) pure returns(Fr)\n{\n    return Fr.wrap(addmod(Fr.unwrap(a), MODULUS - Fr.unwrap(b), MODULUS));\n}\n\nfunction exp(Fr base, Fr exponent) pure returns(Fr)\n{\n    if (Fr.unwrap(exponent) == 0) return Fr.wrap(1);\n\n    for (uint256 i = 1; i < Fr.unwrap(exponent); i += i) {\n        base = base * base;\n    }\n    return base;\n}\n\nfunction notEqual(Fr a, Fr b) pure returns(bool)\n{\n    return Fr.unwrap(a) != Fr.unwrap(b);\n}\n\nfunction equal(Fr a, Fr b) pure returns(bool)\n{\n    return Fr.unwrap(a) == Fr.unwrap(b);\n}\n\nuint256 constant CONST_PROOF_SIZE_LOG_N = 28;\n\nuint256 constant NUMBER_OF_SUBRELATIONS = 26;\nuint256 constant BATCHED_RELATION_PARTIAL_LENGTH = 8;\nuint256 constant NUMBER_OF_ENTITIES = 40;\nuint256 constant NUMBER_UNSHIFTED = 35;\nuint256 constant NUMBER_TO_BE_SHIFTED = 5;\n\n// Alphas are used as relation separators so there should be NUMBER_OF_SUBRELATIONS - 1\nuint256 constant NUMBER_OF_ALPHAS = 25;\n\n// Prime field order\nuint256 constant Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583; // EC group order. F_q\nuint256 constant P = 21888242871839275222246405745257275088548364400416034343698204186575808495617; // Prime field order, F_r\n\n// ENUM FOR WIRES\nenum WIRE {\n    Q_M,\n    Q_C,\n    Q_L,\n    Q_R,\n    Q_O,\n    Q_4,\n    Q_LOOKUP,\n    Q_ARITH,\n    Q_RANGE,\n    Q_ELLIPTIC,\n    Q_AUX,\n    Q_POSEIDON2_EXTERNAL,\n    Q_POSEIDON2_INTERNAL,\n    SIGMA_1,\n    SIGMA_2,\n    SIGMA_3,\n    SIGMA_4,\n    ID_1,\n    ID_2,\n    ID_3,\n    ID_4,\n    TABLE_1,\n    TABLE_2,\n    TABLE_3,\n    TABLE_4,\n    LAGRANGE_FIRST,\n    LAGRANGE_LAST,\n    W_L,\n    W_R,\n    W_O,\n    W_4,\n    Z_PERM,\n    LOOKUP_INVERSES,\n    LOOKUP_READ_COUNTS,\n    LOOKUP_READ_TAGS,\n    W_L_SHIFT,\n    W_R_SHIFT,\n    W_O_SHIFT,\n    W_4_SHIFT,\n    Z_PERM_SHIFT\n}\n\nlibrary Honk {\n    struct G1Point {\n        uint256 x;\n        uint256 y;\n    }\n\n    struct G1ProofPoint {\n        uint256 x_0;\n        uint256 x_1;\n        uint256 y_0;\n        uint256 y_1;\n    }\n\n    struct VerificationKey {\n        // Misc Params\n        uint256 circuitSize;\n        uint256 logCircuitSize;\n        uint256 publicInputsSize;\n        // Selectors\n        G1Point qm;\n        G1Point qc;\n        G1Point ql;\n        G1Point qr;\n        G1Point qo;\n        G1Point q4;\n        G1Point qLookup; // Lookup\n        G1Point qArith; // Arithmetic widget\n        G1Point qDeltaRange; // Delta Range sort\n        G1Point qAux; // Auxillary\n        G1Point qElliptic; // Auxillary\n        G1Point qPoseidon2External;\n        G1Point qPoseidon2Internal;\n        // Copy cnstraints\n        G1Point s1;\n        G1Point s2;\n        G1Point s3;\n        G1Point s4;\n        // Copy identity\n        G1Point id1;\n        G1Point id2;\n        G1Point id3;\n        G1Point id4;\n        // Precomputed lookup table\n        G1Point t1;\n        G1Point t2;\n        G1Point t3;\n        G1Point t4;\n        // Fixed first and last\n        G1Point lagrangeFirst;\n        G1Point lagrangeLast;\n    }\n\n    struct RelationParameters {\n        // challenges\n        Fr eta;\n        Fr etaTwo;\n        Fr etaThree;\n        Fr beta;\n        Fr gamma;\n        // derived\n        Fr publicInputsDelta;\n    }\n\n\n    struct Proof {\n        // Free wires\n        Honk.G1ProofPoint w1;\n        Honk.G1ProofPoint w2;\n        Honk.G1ProofPoint w3;\n        Honk.G1ProofPoint w4;\n        // Lookup helpers - Permutations\n        Honk.G1ProofPoint zPerm;\n        // Lookup helpers - logup\n        Honk.G1ProofPoint lookupReadCounts;\n        Honk.G1ProofPoint lookupReadTags;\n        Honk.G1ProofPoint lookupInverses;\n        // Sumcheck\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH][CONST_PROOF_SIZE_LOG_N] sumcheckUnivariates;\n        Fr[NUMBER_OF_ENTITIES] sumcheckEvaluations;\n        // Shplemini\n        Honk.G1ProofPoint[CONST_PROOF_SIZE_LOG_N - 1] geminiFoldComms;\n        Fr[CONST_PROOF_SIZE_LOG_N] geminiAEvaluations;\n        Honk.G1ProofPoint shplonkQ;\n        Honk.G1ProofPoint kzgQuotient;\n    }\n}\n\n// Transcript library to generate fiat shamir challenges\nstruct Transcript {\n    // Oink\n    Honk.RelationParameters relationParameters;\n    Fr[NUMBER_OF_ALPHAS] alphas;\n    Fr[CONST_PROOF_SIZE_LOG_N] gateChallenges;\n    // Sumcheck\n    Fr[CONST_PROOF_SIZE_LOG_N] sumCheckUChallenges;\n    // Gemini\n    Fr rho;\n    Fr geminiR;\n    // Shplonk\n    Fr shplonkNu;\n    Fr shplonkZ;\n}\n\nlibrary TranscriptLib {\n    function generateTranscript(Honk.Proof memory proof, bytes32[] calldata publicInputs, uint256 circuitSize, uint256 publicInputsSize, uint256 pubInputsOffset)\n        internal\n        pure\n        returns (Transcript memory t)\n    {\n        Fr previousChallenge;\n        (t.relationParameters, previousChallenge) =\n            generateRelationParametersChallenges(proof, publicInputs, circuitSize, publicInputsSize, pubInputsOffset, previousChallenge);\n\n        (t.alphas, previousChallenge) = generateAlphaChallenges(previousChallenge, proof);\n\n        (t.gateChallenges, previousChallenge) = generateGateChallenges(previousChallenge);\n\n        (t.sumCheckUChallenges, previousChallenge) = generateSumcheckChallenges(proof, previousChallenge);\n\n        (t.rho, previousChallenge) = generateRhoChallenge(proof, previousChallenge);\n\n        (t.geminiR, previousChallenge) = generateGeminiRChallenge(proof, previousChallenge);\n\n        (t.shplonkNu, previousChallenge) = generateShplonkNuChallenge(proof, previousChallenge);\n\n        (t.shplonkZ, previousChallenge) = generateShplonkZChallenge(proof, previousChallenge);\n\n        return t;\n    }\n\n    function splitChallenge(Fr challenge) internal pure returns (Fr first, Fr second) {\n        uint256 challengeU256 = uint256(Fr.unwrap(challenge));\n        uint256 lo = challengeU256 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n        uint256 hi = challengeU256 >> 128;\n        first = FrLib.fromBytes32(bytes32(lo));\n        second = FrLib.fromBytes32(bytes32(hi));\n    }\n\n    function generateRelationParametersChallenges(\n        Honk.Proof memory proof,\n        bytes32[] calldata publicInputs,\n        uint256 circuitSize,\n        uint256 publicInputsSize,\n        uint256 pubInputsOffset,\n        Fr previousChallenge\n    ) internal pure returns (Honk.RelationParameters memory rp, Fr nextPreviousChallenge) {\n        (rp.eta, rp.etaTwo, rp.etaThree, previousChallenge) =\n            generateEtaChallenge(proof, publicInputs, circuitSize, publicInputsSize, pubInputsOffset);\n\n        (rp.beta, rp.gamma, nextPreviousChallenge) = generateBetaAndGammaChallenges(previousChallenge, proof);\n\n    }\n\n    function generateEtaChallenge(Honk.Proof memory proof, bytes32[] calldata publicInputs, uint256 circuitSize, uint256 publicInputsSize, uint256 pubInputsOffset)\n        internal\n        pure\n        returns (Fr eta, Fr etaTwo, Fr etaThree, Fr previousChallenge)\n    {\n        bytes32[] memory round0 = new bytes32[](3 + publicInputsSize + 12);\n        round0[0] = bytes32(circuitSize);\n        round0[1] = bytes32(publicInputsSize);\n        round0[2] = bytes32(pubInputsOffset);\n        for (uint256 i = 0; i < publicInputsSize; i++) {\n            round0[3 + i] = bytes32(publicInputs[i]);\n        }\n\n        // Create the first challenge\n        // Note: w4 is added to the challenge later on\n        round0[3 + publicInputsSize] = bytes32(proof.w1.x_0);\n        round0[3 + publicInputsSize + 1] = bytes32(proof.w1.x_1);\n        round0[3 + publicInputsSize + 2] = bytes32(proof.w1.y_0);\n        round0[3 + publicInputsSize + 3] = bytes32(proof.w1.y_1);\n        round0[3 + publicInputsSize + 4] = bytes32(proof.w2.x_0);\n        round0[3 + publicInputsSize + 5] = bytes32(proof.w2.x_1);\n        round0[3 + publicInputsSize + 6] = bytes32(proof.w2.y_0);\n        round0[3 + publicInputsSize + 7] = bytes32(proof.w2.y_1);\n        round0[3 + publicInputsSize + 8] = bytes32(proof.w3.x_0);\n        round0[3 + publicInputsSize + 9] = bytes32(proof.w3.x_1);\n        round0[3 + publicInputsSize + 10] = bytes32(proof.w3.y_0);\n        round0[3 + publicInputsSize + 11] = bytes32(proof.w3.y_1);\n\n        previousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(round0)));\n        (eta, etaTwo) = splitChallenge(previousChallenge);\n        previousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(previousChallenge))));\n        Fr unused;\n        (etaThree, unused) = splitChallenge(previousChallenge);\n    }\n\n    function generateBetaAndGammaChallenges(Fr previousChallenge, Honk.Proof memory proof)\n        internal\n        pure\n        returns (Fr beta, Fr gamma, Fr nextPreviousChallenge)\n    {\n        bytes32[13] memory round1;\n        round1[0] = FrLib.toBytes32(previousChallenge);\n        round1[1] = bytes32(proof.lookupReadCounts.x_0);\n        round1[2] = bytes32(proof.lookupReadCounts.x_1);\n        round1[3] = bytes32(proof.lookupReadCounts.y_0);\n        round1[4] = bytes32(proof.lookupReadCounts.y_1);\n        round1[5] = bytes32(proof.lookupReadTags.x_0);\n        round1[6] = bytes32(proof.lookupReadTags.x_1);\n        round1[7] = bytes32(proof.lookupReadTags.y_0);\n        round1[8] = bytes32(proof.lookupReadTags.y_1);\n        round1[9] = bytes32(proof.w4.x_0);\n        round1[10] = bytes32(proof.w4.x_1);\n        round1[11] = bytes32(proof.w4.y_0);\n        round1[12] = bytes32(proof.w4.y_1);\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(round1)));\n        (beta, gamma) = splitChallenge(nextPreviousChallenge);\n    }\n\n    // Alpha challenges non-linearise the gate contributions\n    function generateAlphaChallenges(Fr previousChallenge, Honk.Proof memory proof)\n        internal\n        pure\n        returns (Fr[NUMBER_OF_ALPHAS] memory alphas, Fr nextPreviousChallenge)\n    {\n        // Generate the original sumcheck alpha 0 by hashing zPerm and zLookup\n        uint256[9] memory alpha0;\n        alpha0[0] = Fr.unwrap(previousChallenge);\n        alpha0[1] = proof.lookupInverses.x_0;\n        alpha0[2] = proof.lookupInverses.x_1;\n        alpha0[3] = proof.lookupInverses.y_0;\n        alpha0[4] = proof.lookupInverses.y_1;\n        alpha0[5] = proof.zPerm.x_0;\n        alpha0[6] = proof.zPerm.x_1;\n        alpha0[7] = proof.zPerm.y_0;\n        alpha0[8] = proof.zPerm.y_1;\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(alpha0)));\n        (alphas[0], alphas[1]) = splitChallenge(nextPreviousChallenge);\n\n        for (uint256 i = 1; i < NUMBER_OF_ALPHAS / 2; i++) {\n            nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(nextPreviousChallenge))));\n            (alphas[2 * i], alphas[2 * i + 1]) = splitChallenge(nextPreviousChallenge);\n        }\n        if (((NUMBER_OF_ALPHAS & 1) == 1) && (NUMBER_OF_ALPHAS > 2)) {\n            nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(nextPreviousChallenge))));\n            Fr unused;\n            (alphas[NUMBER_OF_ALPHAS - 1], unused) = splitChallenge(nextPreviousChallenge);\n        }\n    }\n\n    function generateGateChallenges(Fr previousChallenge)\n        internal\n        pure\n        returns (Fr[CONST_PROOF_SIZE_LOG_N] memory gateChallenges, Fr nextPreviousChallenge)\n    {\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            previousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(previousChallenge))));\n            Fr unused;\n            (gateChallenges[i], unused) = splitChallenge(previousChallenge);\n        }\n        nextPreviousChallenge = previousChallenge;\n    }\n\n    function generateSumcheckChallenges(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr[CONST_PROOF_SIZE_LOG_N] memory sumcheckChallenges, Fr nextPreviousChallenge)\n    {\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            Fr[BATCHED_RELATION_PARTIAL_LENGTH + 1] memory univariateChal;\n            univariateChal[0] = prevChallenge;\n\n            for (uint256 j = 0; j < BATCHED_RELATION_PARTIAL_LENGTH; j++) {\n                univariateChal[j + 1] = proof.sumcheckUnivariates[i][j];\n            }\n            prevChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(univariateChal)));\n            Fr unused;\n            (sumcheckChallenges[i], unused) = splitChallenge(prevChallenge);\n        }\n        nextPreviousChallenge = prevChallenge;\n    }\n\n    function generateRhoChallenge(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr rho, Fr nextPreviousChallenge)\n    {\n        Fr[NUMBER_OF_ENTITIES + 1] memory rhoChallengeElements;\n        rhoChallengeElements[0] = prevChallenge;\n\n        for (uint256 i = 0; i < NUMBER_OF_ENTITIES; i++) {\n            rhoChallengeElements[i + 1] = proof.sumcheckEvaluations[i];\n        }\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(rhoChallengeElements)));\n        Fr unused;\n        (rho, unused) = splitChallenge(nextPreviousChallenge);\n    }\n\n    function generateGeminiRChallenge(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr geminiR, Fr nextPreviousChallenge)\n    {\n        uint256[(CONST_PROOF_SIZE_LOG_N - 1) * 4 + 1] memory gR;\n        gR[0] = Fr.unwrap(prevChallenge);\n\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; i++) {\n            gR[1 + i * 4] = proof.geminiFoldComms[i].x_0;\n            gR[2 + i * 4] = proof.geminiFoldComms[i].x_1;\n            gR[3 + i * 4] = proof.geminiFoldComms[i].y_0;\n            gR[4 + i * 4] = proof.geminiFoldComms[i].y_1;\n        }\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(gR)));\n        Fr unused;\n        (geminiR, unused) = splitChallenge(nextPreviousChallenge);\n    }\n\n    function generateShplonkNuChallenge(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr shplonkNu, Fr nextPreviousChallenge)\n    {\n        uint256[(CONST_PROOF_SIZE_LOG_N) + 1] memory shplonkNuChallengeElements;\n        shplonkNuChallengeElements[0] = Fr.unwrap(prevChallenge);\n\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            shplonkNuChallengeElements[i + 1] = Fr.unwrap(proof.geminiAEvaluations[i]);\n        }\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(shplonkNuChallengeElements)));\n        Fr unused;\n        (shplonkNu, unused) = splitChallenge(nextPreviousChallenge);\n    }\n\n    function generateShplonkZChallenge(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr shplonkZ, Fr nextPreviousChallenge)\n    {\n        uint256[5] memory shplonkZChallengeElements;\n        shplonkZChallengeElements[0] = Fr.unwrap(prevChallenge);\n\n        shplonkZChallengeElements[1] = proof.shplonkQ.x_0;\n        shplonkZChallengeElements[2] = proof.shplonkQ.x_1;\n        shplonkZChallengeElements[3] = proof.shplonkQ.y_0;\n        shplonkZChallengeElements[4] = proof.shplonkQ.y_1;\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(shplonkZChallengeElements)));\n        Fr unused;\n        (shplonkZ, unused) = splitChallenge(nextPreviousChallenge);\n    }\n\n    function loadProof(bytes calldata proof) internal pure returns (Honk.Proof memory p) {\n        // Commitments\n        p.w1 = bytesToG1ProofPoint(proof[0x0:0x80]);\n\n        p.w2 = bytesToG1ProofPoint(proof[0x80:0x100]);\n        p.w3 = bytesToG1ProofPoint(proof[0x100:0x180]);\n\n        // Lookup / Permutation Helper Commitments\n        p.lookupReadCounts = bytesToG1ProofPoint(proof[0x180:0x200]);\n        p.lookupReadTags = bytesToG1ProofPoint(proof[0x200:0x280]);\n        p.w4 = bytesToG1ProofPoint(proof[0x280:0x300]);\n        p.lookupInverses = bytesToG1ProofPoint(proof[0x300:0x380]);\n        p.zPerm = bytesToG1ProofPoint(proof[0x380:0x400]);\n        uint256 boundary = 0x400;\n\n        // Sumcheck univariates\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            for (uint256 j = 0; j < BATCHED_RELATION_PARTIAL_LENGTH; j++) {\n                p.sumcheckUnivariates[i][j] = bytesToFr(proof[boundary:boundary + 0x20]);\n                boundary += 0x20;\n            }\n        }\n        // Sumcheck evaluations\n        for (uint256 i = 0; i < NUMBER_OF_ENTITIES; i++) {\n            p.sumcheckEvaluations[i] = bytesToFr(proof[boundary:boundary + 0x20]);\n            boundary += 0x20;\n        }\n\n        // Gemini\n        // Read gemini fold univariates\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; i++) {\n            p.geminiFoldComms[i] = bytesToG1ProofPoint(proof[boundary:boundary + 0x80]);\n            boundary += 0x80;\n        }\n\n        // Read gemini a evaluations\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            p.geminiAEvaluations[i] = bytesToFr(proof[boundary:boundary + 0x20]);\n            boundary += 0x20;\n        }\n\n        // Shplonk\n        p.shplonkQ = bytesToG1ProofPoint(proof[boundary:boundary + 0x80]);\n        boundary = boundary + 0x80;\n        // KZG\n        p.kzgQuotient = bytesToG1ProofPoint(proof[boundary:boundary + 0x80]);\n    }\n}\n\n\n// Fr utility\n\nfunction bytesToFr(bytes calldata proofSection) pure returns (Fr scalar) {\n    require(proofSection.length == 0x20, \"invalid bytes scalar\");\n    scalar = FrLib.fromBytes32(bytes32(proofSection));\n}\n\n// EC Point utilities\nfunction convertProofPoint(Honk.G1ProofPoint memory input) pure returns (Honk.G1Point memory) {\n    return Honk.G1Point({x: input.x_0 | (input.x_1 << 136), y: input.y_0 | (input.y_1 << 136)});\n}\n\nfunction bytesToG1ProofPoint(bytes calldata proofSection) pure returns (Honk.G1ProofPoint memory point) {\n    require(proofSection.length == 0x80, \"invalid bytes point\");\n    point = Honk.G1ProofPoint({\n        x_0: uint256(bytes32(proofSection[0x00:0x20])),\n        x_1: uint256(bytes32(proofSection[0x20:0x40])),\n        y_0: uint256(bytes32(proofSection[0x40:0x60])),\n        y_1: uint256(bytes32(proofSection[0x60:0x80]))\n    });\n}\n\nfunction negateInplace(Honk.G1Point memory point) pure returns (Honk.G1Point memory) {\n    point.y = (Q - point.y) % Q;\n    return point;\n}\n\n function pairing(Honk.G1Point memory rhs, Honk.G1Point memory lhs) view returns (bool) {\n        bytes memory input = abi.encodePacked(\n            rhs.x,\n            rhs.y,\n            // Fixed G1 point\n            uint256(0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2),\n            uint256(0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed),\n            uint256(0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b),\n            uint256(0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa),\n            lhs.x,\n            lhs.y,\n            // G1 point from VK\n            uint256(0x260e01b251f6f1c7e7ff4e580791dee8ea51d87a358e038b4efe30fac09383c1),\n            uint256(0x0118c4d5b837bcc2bc89b5b398b5974e9f5944073b32078b7e231fec938883b0),\n            uint256(0x04fc6369f7110fe3d25156c1bb9a72859cf2a04641f99ba4ee413c80da6a5fe4),\n            uint256(0x22febda3c0c0632a56475b4214e5615e11e6dd3f96e6cea2854a87d4dacc5e55)\n        );\n\n        (bool success, bytes memory result) = address(0x08).staticcall(input);\n        bool decodedResult = abi.decode(result, (bool));\n        return success && decodedResult;\n    }\n\n\nlibrary RelationsLib {\n    Fr internal constant GRUMPKIN_CURVE_B_PARAMETER_NEGATED = Fr.wrap(17); // -(-17)\n\n    function accumulateRelationEvaluations(\n         Fr[NUMBER_OF_ENTITIES] memory purportedEvaluations,\n        Honk.RelationParameters memory rp,\n        Fr[NUMBER_OF_ALPHAS] memory alphas,\n        Fr powPartialEval\n    ) internal pure returns (Fr accumulator) {\n        Fr[NUMBER_OF_SUBRELATIONS] memory evaluations;\n\n        // Accumulate all relations in Ultra Honk - each with varying number of subrelations\n        accumulateArithmeticRelation(purportedEvaluations, evaluations, powPartialEval);\n        accumulatePermutationRelation(purportedEvaluations, rp, evaluations, powPartialEval);\n        accumulateLogDerivativeLookupRelation(purportedEvaluations, rp, evaluations, powPartialEval);\n        accumulateDeltaRangeRelation(purportedEvaluations, evaluations, powPartialEval);\n        accumulateEllipticRelation(purportedEvaluations, evaluations, powPartialEval);\n        accumulateAuxillaryRelation(purportedEvaluations, rp, evaluations, powPartialEval);\n        accumulatePoseidonExternalRelation(purportedEvaluations, evaluations, powPartialEval);\n        accumulatePoseidonInternalRelation(purportedEvaluations, evaluations, powPartialEval);\n        // batch the subrelations with the alpha challenges to obtain the full honk relation\n        accumulator = scaleAndBatchSubrelations(evaluations, alphas);\n    }\n\n    /**\n     * Aesthetic helper function that is used to index by enum into proof.sumcheckEvaluations, it avoids\n     * the relation checking code being cluttered with uint256 type casting, which is often a different colour in code\n     * editors, and thus is noisy.\n     */\n    function wire(Fr[NUMBER_OF_ENTITIES] memory p, WIRE _wire) internal pure returns (Fr) {\n        return p[uint256(_wire)];\n    }\n\n    uint256 internal constant NEG_HALF_MODULO_P = 0x183227397098d014dc2822db40c0ac2e9419f4243cdcb848a1f0fac9f8000000;\n    /**\n     * Ultra Arithmetic Relation\n     *\n     */\n    function accumulateArithmeticRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        // Relation 0\n        Fr q_arith = wire(p, WIRE.Q_ARITH);\n        {\n            Fr neg_half = Fr.wrap(NEG_HALF_MODULO_P);\n\n            Fr accum = (q_arith - Fr.wrap(3)) * (wire(p, WIRE.Q_M) * wire(p, WIRE.W_R) * wire(p, WIRE.W_L)) * neg_half;\n            accum = accum + (wire(p, WIRE.Q_L) * wire(p, WIRE.W_L)) + (wire(p, WIRE.Q_R) * wire(p, WIRE.W_R))\n                + (wire(p, WIRE.Q_O) * wire(p, WIRE.W_O)) + (wire(p, WIRE.Q_4) * wire(p, WIRE.W_4)) + wire(p, WIRE.Q_C);\n            accum = accum + (q_arith - Fr.wrap(1)) * wire(p, WIRE.W_4_SHIFT);\n            accum = accum * q_arith;\n            accum = accum * domainSep;\n            evals[0] = accum;\n        }\n\n        // Relation 1\n        {\n            Fr accum = wire(p, WIRE.W_L) + wire(p, WIRE.W_4) - wire(p, WIRE.W_L_SHIFT) + wire(p, WIRE.Q_M);\n            accum = accum * (q_arith - Fr.wrap(2));\n            accum = accum * (q_arith - Fr.wrap(1));\n            accum = accum * q_arith;\n            accum = accum * domainSep;\n            evals[1] = accum;\n        }\n    }\n\n    function accumulatePermutationRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Honk.RelationParameters memory rp,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        Fr grand_product_numerator;\n        Fr grand_product_denominator;\n\n        {\n            Fr num = wire(p, WIRE.W_L) + wire(p, WIRE.ID_1) * rp.beta + rp.gamma;\n            num = num * (wire(p, WIRE.W_R) + wire(p, WIRE.ID_2) * rp.beta + rp.gamma);\n            num = num * (wire(p, WIRE.W_O) + wire(p, WIRE.ID_3) * rp.beta + rp.gamma);\n            num = num * (wire(p, WIRE.W_4) + wire(p, WIRE.ID_4) * rp.beta + rp.gamma);\n\n            grand_product_numerator = num;\n        }\n        {\n            Fr den = wire(p, WIRE.W_L) + wire(p, WIRE.SIGMA_1) * rp.beta + rp.gamma;\n            den = den * (wire(p, WIRE.W_R) + wire(p, WIRE.SIGMA_2) * rp.beta + rp.gamma);\n            den = den * (wire(p, WIRE.W_O) + wire(p, WIRE.SIGMA_3) * rp.beta + rp.gamma);\n            den = den * (wire(p, WIRE.W_4) + wire(p, WIRE.SIGMA_4) * rp.beta + rp.gamma);\n\n            grand_product_denominator = den;\n        }\n\n        // Contribution 2\n        {\n            Fr acc = (wire(p, WIRE.Z_PERM) + wire(p, WIRE.LAGRANGE_FIRST)) * grand_product_numerator;\n\n            acc = acc\n                - (\n                    (wire(p, WIRE.Z_PERM_SHIFT) + (wire(p, WIRE.LAGRANGE_LAST) * rp.publicInputsDelta))\n                        * grand_product_denominator\n                );\n            acc = acc * domainSep;\n            evals[2] = acc;\n        }\n\n        // Contribution 3\n        {\n            Fr acc = (wire(p, WIRE.LAGRANGE_LAST) * wire(p, WIRE.Z_PERM_SHIFT)) * domainSep;\n            evals[3] = acc;\n        }\n    }\n\n    function accumulateLogDerivativeLookupRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Honk.RelationParameters memory rp,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        Fr write_term;\n        Fr read_term;\n\n        // Calculate the write term (the table accumulation)\n        {\n            write_term = wire(p, WIRE.TABLE_1) + rp.gamma + (wire(p, WIRE.TABLE_2) * rp.eta)\n                + (wire(p, WIRE.TABLE_3) * rp.etaTwo) + (wire(p, WIRE.TABLE_4) * rp.etaThree);\n        }\n\n        // Calculate the write term\n        {\n            Fr derived_entry_1 = wire(p, WIRE.W_L) + rp.gamma + (wire(p, WIRE.Q_R) * wire(p, WIRE.W_L_SHIFT));\n            Fr derived_entry_2 = wire(p, WIRE.W_R) + wire(p, WIRE.Q_M) * wire(p, WIRE.W_R_SHIFT);\n            Fr derived_entry_3 = wire(p, WIRE.W_O) + wire(p, WIRE.Q_C) * wire(p, WIRE.W_O_SHIFT);\n\n            read_term = derived_entry_1 + (derived_entry_2 * rp.eta) + (derived_entry_3 * rp.etaTwo)\n                + (wire(p, WIRE.Q_O) * rp.etaThree);\n        }\n\n        Fr read_inverse = wire(p, WIRE.LOOKUP_INVERSES) * write_term;\n        Fr write_inverse = wire(p, WIRE.LOOKUP_INVERSES) * read_term;\n\n        Fr inverse_exists_xor = wire(p, WIRE.LOOKUP_READ_TAGS) + wire(p, WIRE.Q_LOOKUP)\n            - (wire(p, WIRE.LOOKUP_READ_TAGS) * wire(p, WIRE.Q_LOOKUP));\n\n        // Inverse calculated correctly relation\n        Fr accumulatorNone = read_term * write_term * wire(p, WIRE.LOOKUP_INVERSES) - inverse_exists_xor;\n        accumulatorNone = accumulatorNone * domainSep;\n\n        // Inverse\n        Fr accumulatorOne = wire(p, WIRE.Q_LOOKUP) * read_inverse - wire(p, WIRE.LOOKUP_READ_COUNTS) * write_inverse;\n\n        evals[4] = accumulatorNone;\n        evals[5] = accumulatorOne;\n    }\n\n    function accumulateDeltaRangeRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        Fr minus_one = Fr.wrap(0) - Fr.wrap(1);\n        Fr minus_two = Fr.wrap(0) - Fr.wrap(2);\n        Fr minus_three = Fr.wrap(0) - Fr.wrap(3);\n\n        // Compute wire differences\n        Fr delta_1 = wire(p, WIRE.W_R) - wire(p, WIRE.W_L);\n        Fr delta_2 = wire(p, WIRE.W_O) - wire(p, WIRE.W_R);\n        Fr delta_3 = wire(p, WIRE.W_4) - wire(p, WIRE.W_O);\n        Fr delta_4 = wire(p, WIRE.W_L_SHIFT) - wire(p, WIRE.W_4);\n\n        // Contribution 6\n        {\n            Fr acc = delta_1;\n            acc = acc * (delta_1 + minus_one);\n            acc = acc * (delta_1 + minus_two);\n            acc = acc * (delta_1 + minus_three);\n            acc = acc * wire(p, WIRE.Q_RANGE);\n            acc = acc * domainSep;\n            evals[6] = acc;\n        }\n\n        // Contribution 7\n        {\n            Fr acc = delta_2;\n            acc = acc * (delta_2 + minus_one);\n            acc = acc * (delta_2 + minus_two);\n            acc = acc * (delta_2 + minus_three);\n            acc = acc * wire(p, WIRE.Q_RANGE);\n            acc = acc * domainSep;\n            evals[7] = acc;\n        }\n\n        // Contribution 8\n        {\n            Fr acc = delta_3;\n            acc = acc * (delta_3 + minus_one);\n            acc = acc * (delta_3 + minus_two);\n            acc = acc * (delta_3 + minus_three);\n            acc = acc * wire(p, WIRE.Q_RANGE);\n            acc = acc * domainSep;\n            evals[8] = acc;\n        }\n\n        // Contribution 9\n        {\n            Fr acc = delta_4;\n            acc = acc * (delta_4 + minus_one);\n            acc = acc * (delta_4 + minus_two);\n            acc = acc * (delta_4 + minus_three);\n            acc = acc * wire(p, WIRE.Q_RANGE);\n            acc = acc * domainSep;\n            evals[9] = acc;\n        }\n    }\n\n    struct EllipticParams {\n        // Points\n        Fr x_1;\n        Fr y_1;\n        Fr x_2;\n        Fr y_2;\n        Fr y_3;\n        Fr x_3;\n        // push accumulators into memory\n        Fr x_double_identity;\n    }\n\n    function accumulateEllipticRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        EllipticParams memory ep;\n        ep.x_1 = wire(p, WIRE.W_R);\n        ep.y_1 = wire(p, WIRE.W_O);\n\n        ep.x_2 = wire(p, WIRE.W_L_SHIFT);\n        ep.y_2 = wire(p, WIRE.W_4_SHIFT);\n        ep.y_3 = wire(p, WIRE.W_O_SHIFT);\n        ep.x_3 = wire(p, WIRE.W_R_SHIFT);\n\n        Fr q_sign = wire(p, WIRE.Q_L);\n        Fr q_is_double = wire(p, WIRE.Q_M);\n\n        // Contribution 10 point addition, x-coordinate check\n        // q_elliptic * (x3 + x2 + x1)(x2 - x1)(x2 - x1) - y2^2 - y1^2 + 2(y2y1)*q_sign = 0\n        Fr x_diff = (ep.x_2 - ep.x_1);\n        Fr y1_sqr = (ep.y_1 * ep.y_1);\n        {\n            // Move to top\n            Fr partialEval = domainSep;\n\n            Fr y2_sqr = (ep.y_2 * ep.y_2);\n            Fr y1y2 = ep.y_1 * ep.y_2 * q_sign;\n            Fr x_add_identity = (ep.x_3 + ep.x_2 + ep.x_1);\n            x_add_identity = x_add_identity * x_diff * x_diff;\n            x_add_identity = x_add_identity - y2_sqr - y1_sqr + y1y2 + y1y2;\n\n            evals[10] = x_add_identity * partialEval * wire(p, WIRE.Q_ELLIPTIC) * (Fr.wrap(1) - q_is_double);\n        }\n\n        // Contribution 11 point addition, x-coordinate check\n        // q_elliptic * (q_sign * y1 + y3)(x2 - x1) + (x3 - x1)(y2 - q_sign * y1) = 0\n        {\n            Fr y1_plus_y3 = ep.y_1 + ep.y_3;\n            Fr y_diff = ep.y_2 * q_sign - ep.y_1;\n            Fr y_add_identity = y1_plus_y3 * x_diff + (ep.x_3 - ep.x_1) * y_diff;\n            evals[11] = y_add_identity * domainSep * wire(p, WIRE.Q_ELLIPTIC) * (Fr.wrap(1) - q_is_double);\n        }\n\n        // Contribution 10 point doubling, x-coordinate check\n        // (x3 + x1 + x1) (4y1*y1) - 9 * x1 * x1 * x1 * x1 = 0\n        // N.B. we're using the equivalence x1*x1*x1 === y1*y1 - curve_b to reduce degree by 1\n        {\n            Fr x_pow_4 = (y1_sqr + GRUMPKIN_CURVE_B_PARAMETER_NEGATED) * ep.x_1;\n            Fr y1_sqr_mul_4 = y1_sqr + y1_sqr;\n            y1_sqr_mul_4 = y1_sqr_mul_4 + y1_sqr_mul_4;\n            Fr x1_pow_4_mul_9 = x_pow_4 * Fr.wrap(9);\n\n            // NOTE: pushed into memory (stack >:'( )\n            ep.x_double_identity = (ep.x_3 + ep.x_1 + ep.x_1) * y1_sqr_mul_4 - x1_pow_4_mul_9;\n\n            Fr acc = ep.x_double_identity * domainSep * wire(p, WIRE.Q_ELLIPTIC) * q_is_double;\n            evals[10] = evals[10] + acc;\n        }\n\n        // Contribution 11 point doubling, y-coordinate check\n        // (y1 + y1) (2y1) - (3 * x1 * x1)(x1 - x3) = 0\n        {\n            Fr x1_sqr_mul_3 = (ep.x_1 + ep.x_1 + ep.x_1) * ep.x_1;\n            Fr y_double_identity = x1_sqr_mul_3 * (ep.x_1 - ep.x_3) - (ep.y_1 + ep.y_1) * (ep.y_1 + ep.y_3);\n            evals[11] = evals[11] + y_double_identity * domainSep * wire(p, WIRE.Q_ELLIPTIC) * q_is_double;\n        }\n    }\n\n    // Constants for the auxiliary relation\n    Fr constant LIMB_SIZE = Fr.wrap(uint256(1) << 68);\n    Fr constant SUBLIMB_SHIFT = Fr.wrap(uint256(1) << 14);\n\n    // Parameters used within the Auxiliary Relation\n    // A struct is used to work around stack too deep. This relation has alot of variables\n    struct AuxParams {\n        Fr limb_subproduct;\n        Fr non_native_field_gate_1;\n        Fr non_native_field_gate_2;\n        Fr non_native_field_gate_3;\n        Fr limb_accumulator_1;\n        Fr limb_accumulator_2;\n        Fr memory_record_check;\n        Fr partial_record_check;\n        Fr next_gate_access_type;\n        Fr record_delta;\n        Fr index_delta;\n        Fr adjacent_values_match_if_adjacent_indices_match;\n        Fr adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation;\n        Fr access_check;\n        Fr next_gate_access_type_is_boolean;\n        Fr ROM_consistency_check_identity;\n        Fr RAM_consistency_check_identity;\n        Fr timestamp_delta;\n        Fr RAM_timestamp_check_identity;\n        Fr memory_identity;\n        Fr index_is_monotonically_increasing;\n        Fr auxiliary_identity;\n    }\n\n    function accumulateAuxillaryRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Honk.RelationParameters memory rp,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        AuxParams memory ap;\n\n        /**\n         * Contribution 12\n         * Non native field arithmetic gate 2\n         * deg 4\n         *\n         *             _                                                                               _\n         *            /   _                   _                               _       14                \\\n         * q_2 . q_4 |   (w_1 . w_2) + (w_1 . w_2) + (w_1 . w_4 + w_2 . w_3 - w_3) . 2    - w_3 - w_4   |\n         *            \\_                                                                               _/\n         *\n         *\n         */\n        ap.limb_subproduct = wire(p, WIRE.W_L) * wire(p, WIRE.W_R_SHIFT) + wire(p, WIRE.W_L_SHIFT) * wire(p, WIRE.W_R);\n        ap.non_native_field_gate_2 =\n            (wire(p, WIRE.W_L) * wire(p, WIRE.W_4) + wire(p, WIRE.W_R) * wire(p, WIRE.W_O) - wire(p, WIRE.W_O_SHIFT));\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 * LIMB_SIZE;\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 - wire(p, WIRE.W_4_SHIFT);\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 + ap.limb_subproduct;\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 * wire(p, WIRE.Q_4);\n\n        ap.limb_subproduct = ap.limb_subproduct * LIMB_SIZE;\n        ap.limb_subproduct = ap.limb_subproduct + (wire(p, WIRE.W_L_SHIFT) * wire(p, WIRE.W_R_SHIFT));\n        ap.non_native_field_gate_1 = ap.limb_subproduct;\n        ap.non_native_field_gate_1 = ap.non_native_field_gate_1 - (wire(p, WIRE.W_O) + wire(p, WIRE.W_4));\n        ap.non_native_field_gate_1 = ap.non_native_field_gate_1 * wire(p, WIRE.Q_O);\n\n        ap.non_native_field_gate_3 = ap.limb_subproduct;\n        ap.non_native_field_gate_3 = ap.non_native_field_gate_3 + wire(p, WIRE.W_4);\n        ap.non_native_field_gate_3 = ap.non_native_field_gate_3 - (wire(p, WIRE.W_O_SHIFT) + wire(p, WIRE.W_4_SHIFT));\n        ap.non_native_field_gate_3 = ap.non_native_field_gate_3 * wire(p, WIRE.Q_M);\n\n        Fr non_native_field_identity =\n            ap.non_native_field_gate_1 + ap.non_native_field_gate_2 + ap.non_native_field_gate_3;\n        non_native_field_identity = non_native_field_identity * wire(p, WIRE.Q_R);\n\n        // ((((w2' * 2^14 + w1') * 2^14 + w3) * 2^14 + w2) * 2^14 + w1 - w4) * qm\n        // deg 2\n        ap.limb_accumulator_1 = wire(p, WIRE.W_R_SHIFT) * SUBLIMB_SHIFT;\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_L_SHIFT);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_O);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_R);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_L);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 - wire(p, WIRE.W_4);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * wire(p, WIRE.Q_4);\n\n        // ((((w3' * 2^14 + w2') * 2^14 + w1') * 2^14 + w4) * 2^14 + w3 - w4') * qm\n        // deg 2\n        ap.limb_accumulator_2 = wire(p, WIRE.W_O_SHIFT) * SUBLIMB_SHIFT;\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_R_SHIFT);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_L_SHIFT);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_4);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_O);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 - wire(p, WIRE.W_4_SHIFT);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * wire(p, WIRE.Q_M);\n\n        Fr limb_accumulator_identity = ap.limb_accumulator_1 + ap.limb_accumulator_2;\n        limb_accumulator_identity = limb_accumulator_identity * wire(p, WIRE.Q_O); //  deg 3\n\n        /**\n         * MEMORY\n         *\n         * A RAM memory record contains a tuple of the following fields:\n         *  * i: `index` of memory cell being accessed\n         *  * t: `timestamp` of memory cell being accessed (used for RAM, set to 0 for ROM)\n         *  * v: `value` of memory cell being accessed\n         *  * a: `access` type of record. read: 0 = read, 1 = write\n         *  * r: `record` of memory cell. record = access + index * eta + timestamp * eta_two + value * eta_three\n         *\n         * A ROM memory record contains a tuple of the following fields:\n         *  * i: `index` of memory cell being accessed\n         *  * v: `value1` of memory cell being accessed (ROM tables can store up to 2 values per index)\n         *  * v2:`value2` of memory cell being accessed (ROM tables can store up to 2 values per index)\n         *  * r: `record` of memory cell. record = index * eta + value2 * eta_two + value1 * eta_three\n         *\n         *  When performing a read/write access, the values of i, t, v, v2, a, r are stored in the following wires +\n         * selectors, depending on whether the gate is a RAM read/write or a ROM read\n         *\n         *  | gate type | i  | v2/t  |  v | a  | r  |\n         *  | --------- | -- | ----- | -- | -- | -- |\n         *  | ROM       | w1 | w2    | w3 | -- | w4 |\n         *  | RAM       | w1 | w2    | w3 | qc | w4 |\n         *\n         * (for accesses where `index` is a circuit constant, it is assumed the circuit will apply a copy constraint on\n         * `w2` to fix its value)\n         *\n         *\n         */\n\n        /**\n         * Memory Record Check\n         * Partial degree: 1\n         * Total degree: 4\n         *\n         * A ROM/ROM access gate can be evaluated with the identity:\n         *\n         * qc + w1 \\eta + w2 \\eta_two + w3 \\eta_three - w4 = 0\n         *\n         * For ROM gates, qc = 0\n         */\n        ap.memory_record_check = wire(p, WIRE.W_O) * rp.etaThree;\n        ap.memory_record_check = ap.memory_record_check + (wire(p, WIRE.W_R) * rp.etaTwo);\n        ap.memory_record_check = ap.memory_record_check + (wire(p, WIRE.W_L) * rp.eta);\n        ap.memory_record_check = ap.memory_record_check + wire(p, WIRE.Q_C);\n        ap.partial_record_check = ap.memory_record_check; // used in RAM consistency check; deg 1 or 4\n        ap.memory_record_check = ap.memory_record_check - wire(p, WIRE.W_4);\n\n        /**\n         * Contribution 13 & 14\n         * ROM Consistency Check\n         * Partial degree: 1\n         * Total degree: 4\n         *\n         * For every ROM read, a set equivalence check is applied between the record witnesses, and a second set of\n         * records that are sorted.\n         *\n         * We apply the following checks for the sorted records:\n         *\n         * 1. w1, w2, w3 correctly map to 'index', 'v1, 'v2' for a given record value at w4\n         * 2. index values for adjacent records are monotonically increasing\n         * 3. if, at gate i, index_i == index_{i + 1}, then value1_i == value1_{i + 1} and value2_i == value2_{i + 1}\n         *\n         */\n        ap.index_delta = wire(p, WIRE.W_L_SHIFT) - wire(p, WIRE.W_L);\n        ap.record_delta = wire(p, WIRE.W_4_SHIFT) - wire(p, WIRE.W_4);\n\n        ap.index_is_monotonically_increasing = ap.index_delta * ap.index_delta - ap.index_delta; // deg 2\n\n        ap.adjacent_values_match_if_adjacent_indices_match = (ap.index_delta * MINUS_ONE + Fr.wrap(1)) * ap.record_delta; // deg 2\n\n        evals[13] = ap.adjacent_values_match_if_adjacent_indices_match * (wire(p, WIRE.Q_L) * wire(p, WIRE.Q_R))\n            * (wire(p, WIRE.Q_AUX) * domainSep); // deg 5\n        evals[14] = ap.index_is_monotonically_increasing * (wire(p, WIRE.Q_L) * wire(p, WIRE.Q_R))\n            * (wire(p, WIRE.Q_AUX) * domainSep); // deg 5\n\n        ap.ROM_consistency_check_identity = ap.memory_record_check * (wire(p, WIRE.Q_L) * wire(p, WIRE.Q_R)); // deg 3 or 7\n\n        /**\n         * Contributions 15,16,17\n         * RAM Consistency Check\n         *\n         * The 'access' type of the record is extracted with the expression `w_4 - ap.partial_record_check`\n         * (i.e. for an honest Prover `w1 * eta + w2 * eta^2 + w3 * eta^3 - w4 = access`.\n         * This is validated by requiring `access` to be boolean\n         *\n         * For two adjacent entries in the sorted list if _both_\n         *  A) index values match\n         *  B) adjacent access value is 0 (i.e. next gate is a READ)\n         * then\n         *  C) both values must match.\n         * The gate boolean check is\n         * (A && B) => C  === !(A && B) || C ===  !A || !B || C\n         *\n         * N.B. it is the responsibility of the circuit writer to ensure that every RAM cell is initialized\n         * with a WRITE operation.\n         */\n        Fr access_type = (wire(p, WIRE.W_4) - ap.partial_record_check); // will be 0 or 1 for honest Prover; deg 1 or 4\n        ap.access_check = access_type * access_type - access_type; // check value is 0 or 1; deg 2 or 8\n\n        ap.next_gate_access_type = wire(p, WIRE.W_O_SHIFT) * rp.etaThree;\n        ap.next_gate_access_type = ap.next_gate_access_type + (wire(p, WIRE.W_R_SHIFT) * rp.etaTwo);\n        ap.next_gate_access_type = ap.next_gate_access_type + (wire(p, WIRE.W_L_SHIFT) * rp.eta);\n        ap.next_gate_access_type = wire(p, WIRE.W_4_SHIFT) - ap.next_gate_access_type;\n\n        Fr value_delta = wire(p, WIRE.W_O_SHIFT) - wire(p, WIRE.W_O);\n        ap.adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation = (\n            ap.index_delta * MINUS_ONE + Fr.wrap(1)\n        ) * value_delta * (ap.next_gate_access_type * MINUS_ONE + Fr.wrap(1)); // deg 3 or 6\n\n        // We can't apply the RAM consistency check identity on the final entry in the sorted list (the wires in the\n        // next gate would make the identity fail).  We need to validate that its 'access type' bool is correct. Can't\n        // do  with an arithmetic gate because of the  `eta` factors. We need to check that the *next* gate's access\n        // type is  correct, to cover this edge case\n        // deg 2 or 4\n        ap.next_gate_access_type_is_boolean =\n            ap.next_gate_access_type * ap.next_gate_access_type - ap.next_gate_access_type;\n\n        // Putting it all together...\n        evals[15] = ap.adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation\n            * (wire(p, WIRE.Q_ARITH)) * (wire(p, WIRE.Q_AUX) * domainSep); // deg 5 or 8\n        evals[16] = ap.index_is_monotonically_increasing * (wire(p, WIRE.Q_ARITH)) * (wire(p, WIRE.Q_AUX) * domainSep); // deg 4\n        evals[17] = ap.next_gate_access_type_is_boolean * (wire(p, WIRE.Q_ARITH)) * (wire(p, WIRE.Q_AUX) * domainSep); // deg 4 or 6\n\n        ap.RAM_consistency_check_identity = ap.access_check * (wire(p, WIRE.Q_ARITH)); // deg 3 or 9\n\n        /**\n         * RAM Timestamp Consistency Check\n         *\n         * | w1 | w2 | w3 | w4 |\n         * | index | timestamp | timestamp_check | -- |\n         *\n         * Let delta_index = index_{i + 1} - index_{i}\n         *\n         * Iff delta_index == 0, timestamp_check = timestamp_{i + 1} - timestamp_i\n         * Else timestamp_check = 0\n         */\n        ap.timestamp_delta = wire(p, WIRE.W_R_SHIFT) - wire(p, WIRE.W_R);\n        ap.RAM_timestamp_check_identity =\n            (ap.index_delta * MINUS_ONE + Fr.wrap(1)) * ap.timestamp_delta - wire(p, WIRE.W_O); // deg 3\n\n        /**\n         * Complete Contribution 12\n         * The complete RAM/ROM memory identity\n         * Partial degree:\n         */\n        ap.memory_identity = ap.ROM_consistency_check_identity; // deg 3 or 6\n        ap.memory_identity =\n            ap.memory_identity + ap.RAM_timestamp_check_identity * (wire(p, WIRE.Q_4) * wire(p, WIRE.Q_L)); // deg 4\n        ap.memory_identity = ap.memory_identity + ap.memory_record_check * (wire(p, WIRE.Q_M) * wire(p, WIRE.Q_L)); // deg 3 or 6\n        ap.memory_identity = ap.memory_identity + ap.RAM_consistency_check_identity; // deg 3 or 9\n\n        // (deg 3 or 9) + (deg 4) + (deg 3)\n        ap.auxiliary_identity = ap.memory_identity + non_native_field_identity + limb_accumulator_identity;\n        ap.auxiliary_identity = ap.auxiliary_identity * (wire(p, WIRE.Q_AUX) * domainSep); // deg 4 or 10\n        evals[12] = ap.auxiliary_identity;\n    }\n\n    struct PoseidonExternalParams {\n        Fr s1;\n        Fr s2;\n        Fr s3;\n        Fr s4;\n        Fr u1;\n        Fr u2;\n        Fr u3;\n        Fr u4;\n        Fr t0;\n        Fr t1;\n        Fr t2;\n        Fr t3;\n        Fr v1;\n        Fr v2;\n        Fr v3;\n        Fr v4;\n        Fr q_pos_by_scaling;\n    }\n\n    function accumulatePoseidonExternalRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        PoseidonExternalParams memory ep;\n\n        ep.s1 = wire(p, WIRE.W_L) + wire(p, WIRE.Q_L);\n        ep.s2 = wire(p, WIRE.W_R) + wire(p, WIRE.Q_R);\n        ep.s3 = wire(p, WIRE.W_O) + wire(p, WIRE.Q_O);\n        ep.s4 = wire(p, WIRE.W_4) + wire(p, WIRE.Q_4);\n\n        ep.u1 = ep.s1 * ep.s1 * ep.s1 * ep.s1 * ep.s1;\n        ep.u2 = ep.s2 * ep.s2 * ep.s2 * ep.s2 * ep.s2;\n        ep.u3 = ep.s3 * ep.s3 * ep.s3 * ep.s3 * ep.s3;\n        ep.u4 = ep.s4 * ep.s4 * ep.s4 * ep.s4 * ep.s4;\n        // matrix mul v = M_E * u with 14 additions\n        ep.t0 = ep.u1 + ep.u2; // u_1 + u_2\n        ep.t1 = ep.u3 + ep.u4; // u_3 + u_4\n        ep.t2 = ep.u2 + ep.u2 + ep.t1; // 2u_2\n        // ep.t2 += ep.t1; // 2u_2 + u_3 + u_4\n        ep.t3 = ep.u4 + ep.u4 + ep.t0; // 2u_4\n        // ep.t3 += ep.t0; // u_1 + u_2 + 2u_4\n        ep.v4 = ep.t1 + ep.t1;\n        ep.v4 = ep.v4 + ep.v4 + ep.t3;\n        // ep.v4 += ep.t3; // u_1 + u_2 + 4u_3 + 6u_4\n        ep.v2 = ep.t0 + ep.t0;\n        ep.v2 = ep.v2 + ep.v2 + ep.t2;\n        // ep.v2 += ep.t2; // 4u_1 + 6u_2 + u_3 + u_4\n        ep.v1 = ep.t3 + ep.v2; // 5u_1 + 7u_2 + u_3 + 3u_4\n        ep.v3 = ep.t2 + ep.v4; // u_1 + 3u_2 + 5u_3 + 7u_4\n\n        ep.q_pos_by_scaling = wire(p, WIRE.Q_POSEIDON2_EXTERNAL) * domainSep;\n        evals[18] = evals[18] + ep.q_pos_by_scaling * (ep.v1 - wire(p, WIRE.W_L_SHIFT));\n\n        evals[19] = evals[19] + ep.q_pos_by_scaling * (ep.v2 - wire(p, WIRE.W_R_SHIFT));\n\n        evals[20] = evals[20] + ep.q_pos_by_scaling * (ep.v3 - wire(p, WIRE.W_O_SHIFT));\n\n        evals[21] = evals[21] + ep.q_pos_by_scaling * (ep.v4 - wire(p, WIRE.W_4_SHIFT));\n    }\n\n    struct PoseidonInternalParams {\n        Fr u1;\n        Fr u2;\n        Fr u3;\n        Fr u4;\n        Fr u_sum;\n        Fr v1;\n        Fr v2;\n        Fr v3;\n        Fr v4;\n        Fr s1;\n        Fr q_pos_by_scaling;\n    }\n\n    function accumulatePoseidonInternalRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        PoseidonInternalParams memory ip;\n\n        Fr[4] memory INTERNAL_MATRIX_DIAGONAL = [\n            FrLib.from(0x10dc6e9c006ea38b04b1e03b4bd9490c0d03f98929ca1d7fb56821fd19d3b6e7),\n            FrLib.from(0x0c28145b6a44df3e0149b3d0a30b3bb599df9756d4dd9b84a86b38cfb45a740b),\n            FrLib.from(0x00544b8338791518b2c7645a50392798b21f75bb60e3596170067d00141cac15),\n            FrLib.from(0x222c01175718386f2e2e82eb122789e352e105a3b8fa852613bc534433ee428b)\n        ];\n\n        // add round constants\n        ip.s1 = wire(p, WIRE.W_L) + wire(p, WIRE.Q_L);\n\n        // apply s-box round\n        ip.u1 = ip.s1 * ip.s1 * ip.s1 * ip.s1 * ip.s1;\n        ip.u2 = wire(p, WIRE.W_R);\n        ip.u3 = wire(p, WIRE.W_O);\n        ip.u4 = wire(p, WIRE.W_4);\n\n        // matrix mul with v = M_I * u 4 muls and 7 additions\n        ip.u_sum = ip.u1 + ip.u2 + ip.u3 + ip.u4;\n\n        ip.q_pos_by_scaling = wire(p, WIRE.Q_POSEIDON2_INTERNAL) * domainSep;\n\n        ip.v1 = ip.u1 * INTERNAL_MATRIX_DIAGONAL[0] + ip.u_sum;\n        evals[22] = evals[22] + ip.q_pos_by_scaling * (ip.v1 - wire(p, WIRE.W_L_SHIFT));\n\n        ip.v2 = ip.u2 * INTERNAL_MATRIX_DIAGONAL[1] + ip.u_sum;\n        evals[23] = evals[23] + ip.q_pos_by_scaling * (ip.v2 - wire(p, WIRE.W_R_SHIFT));\n\n        ip.v3 = ip.u3 * INTERNAL_MATRIX_DIAGONAL[2] + ip.u_sum;\n        evals[24] = evals[24] + ip.q_pos_by_scaling * (ip.v3 - wire(p, WIRE.W_O_SHIFT));\n\n        ip.v4 = ip.u4 * INTERNAL_MATRIX_DIAGONAL[3] + ip.u_sum;\n        evals[25] = evals[25] + ip.q_pos_by_scaling * (ip.v4 - wire(p, WIRE.W_4_SHIFT));\n    }\n\n    function scaleAndBatchSubrelations(\n        Fr[NUMBER_OF_SUBRELATIONS] memory evaluations,\n        Fr[NUMBER_OF_ALPHAS] memory subrelationChallenges\n    ) internal pure returns (Fr accumulator) {\n        accumulator = accumulator + evaluations[0];\n\n        for (uint256 i = 1; i < NUMBER_OF_SUBRELATIONS; ++i) {\n            accumulator = accumulator + evaluations[i] * subrelationChallenges[i - 1];\n        }\n    }\n}\n\nstruct ShpleminiIntermediates {\n    Fr unshiftedScalar;\n    Fr shiftedScalar;\n    // Scalar to be multiplied by [1]₁\n    Fr constantTermAccumulator;\n    // Accumulator for powers of rho\n    Fr batchingChallenge;\n    // Linear combination of multilinear (sumcheck) evaluations and powers of rho\n    Fr batchedEvaluation;\n    // 1/(z - r^{2^i}) for i = 0, ..., logSize, dynamically updated\n    Fr posInvertedDenominator;\n    // 1/(z + r^{2^i}) for i = 0, ..., logSize, dynamically updated\n    Fr negInvertedDenominator;\n    // v^{2i} * 1/(z - r^{2^i})\n    Fr scalingFactorPos;\n    // v^{2i+1} * 1/(z + r^{2^i})\n    Fr scalingFactorNeg;\n    // // Fold_i(r^{2^i}) reconstructed by Verifier\n    // Fr[CONST_PROOF_SIZE_LOG_N] foldPosEvaluations;\n}\n\nlibrary CommitmentSchemeLib {\n    using FrLib for Fr;\n\n    function computeSquares(Fr r) internal pure returns (Fr[CONST_PROOF_SIZE_LOG_N] memory squares) {\n        squares[0] = r;\n        for (uint256 i = 1; i < CONST_PROOF_SIZE_LOG_N; ++i) {\n            squares[i] = squares[i - 1].sqr();\n        }\n    }\n\n    // Compute the evaluations  A_l(r^{2^l}) for l = 0, ..., m-1\n    function computeFoldPosEvaluations(\n        Fr[CONST_PROOF_SIZE_LOG_N] memory sumcheckUChallenges,\n        Fr batchedEvalAccumulator,\n        Fr[CONST_PROOF_SIZE_LOG_N] memory geminiEvaluations,\n        Fr[CONST_PROOF_SIZE_LOG_N] memory geminiEvalChallengePowers,\n        uint256 logSize\n    ) internal view returns (Fr[CONST_PROOF_SIZE_LOG_N] memory foldPosEvaluations) {\n        for (uint256 i = CONST_PROOF_SIZE_LOG_N; i > 0; --i) {\n            Fr challengePower = geminiEvalChallengePowers[i - 1];\n            Fr u = sumcheckUChallenges[i - 1];\n\n            Fr batchedEvalRoundAcc = (\n                (challengePower * batchedEvalAccumulator * Fr.wrap(2))\n                    - geminiEvaluations[i - 1] * (challengePower * (Fr.wrap(1) - u) - u)\n            );\n            // Divide by the denominator\n            batchedEvalRoundAcc = batchedEvalRoundAcc * (challengePower * (Fr.wrap(1) - u) + u).invert();\n\n            if (i <= logSize) {\n                batchedEvalAccumulator = batchedEvalRoundAcc;\n                foldPosEvaluations[i - 1] = batchedEvalRoundAcc;\n            }\n        }\n\n    }\n}\n\ninterface IVerifier {\n    function verify(bytes calldata _proof, bytes32[] calldata _publicInputs) external view returns (bool);\n}\n\n\nabstract contract BaseHonkVerifier is IVerifier {\n    using FrLib for Fr;\n\n    uint256 immutable n;\n    uint256 immutable logN;\n    uint256 immutable numPublicInputs;\n\n    constructor(uint256 _n, uint256 _logN, uint256 _numPublicInputs) {\n        n = _n;\n        logN = _logN;\n        numPublicInputs = _numPublicInputs;\n    }\n\n    error ProofLengthWrong();\n    error PublicInputsLengthWrong();\n    error SumcheckFailed();\n    error ShpleminiFailed();\n\n    // Number of field elements in a ultra honk zero knowledge proof\n    uint256 constant PROOF_SIZE = 440;\n\n    function loadVerificationKey() internal pure virtual returns (Honk.VerificationKey memory);\n\n    function verify(bytes calldata proof, bytes32[] calldata publicInputs) public view override returns (bool) {\n         // Check the received proof is the expected size where each field element is 32 bytes\n        if (proof.length != PROOF_SIZE * 32) {\n            revert ProofLengthWrong();\n        }\n\n        Honk.VerificationKey memory vk = loadVerificationKey();\n        Honk.Proof memory p = TranscriptLib.loadProof(proof);\n\n        if (publicInputs.length != vk.publicInputsSize) {\n            revert PublicInputsLengthWrong();\n        }\n\n        // Generate the fiat shamir challenges for the whole protocol\n        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1281): Add pubInputsOffset to VK or remove entirely.\n        Transcript memory t = TranscriptLib.generateTranscript(p, publicInputs, vk.circuitSize, vk.publicInputsSize, /*pubInputsOffset=*/1);\n\n        // Derive public input delta\n        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1281): Add pubInputsOffset to VK or remove entirely.\n        t.relationParameters.publicInputsDelta = computePublicInputDelta(\n            publicInputs, t.relationParameters.beta, t.relationParameters.gamma, /*pubInputsOffset=*/1\n        );\n\n        // Sumcheck\n        bool sumcheckVerified = verifySumcheck(p, t);\n        if (!sumcheckVerified) revert SumcheckFailed();\n\n        bool shpleminiVerified = verifyShplemini(p, vk, t);\n        if (!shpleminiVerified) revert ShpleminiFailed();\n\n        return sumcheckVerified && shpleminiVerified; // Boolean condition not required - nice for vanity :)\n    }\n\n    function computePublicInputDelta(bytes32[] memory publicInputs, Fr beta, Fr gamma, uint256 offset)\n        internal\n        view\n        returns (Fr publicInputDelta)\n    {\n        Fr numerator = Fr.wrap(1);\n        Fr denominator = Fr.wrap(1);\n\n        Fr numeratorAcc = gamma + (beta * FrLib.from(n + offset));\n        Fr denominatorAcc = gamma - (beta * FrLib.from(offset + 1));\n\n        {\n            for (uint256 i = 0; i < numPublicInputs; i++) {\n                Fr pubInput = FrLib.fromBytes32(publicInputs[i]);\n\n                numerator = numerator * (numeratorAcc + pubInput);\n                denominator = denominator * (denominatorAcc + pubInput);\n\n                numeratorAcc = numeratorAcc + beta;\n                denominatorAcc = denominatorAcc - beta;\n            }\n        }\n\n        // Fr delta = numerator / denominator; // TOOO: batch invert later?\n        publicInputDelta = FrLib.div(numerator, denominator);\n    }\n\n    function verifySumcheck(Honk.Proof memory proof, Transcript memory tp) internal view returns (bool verified) {\n        Fr roundTarget;\n        Fr powPartialEvaluation = Fr.wrap(1);\n\n        // We perform sumcheck reductions over log n rounds ( the multivariate degree )\n        for (uint256 round; round < logN; ++round) {\n            Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory roundUnivariate = proof.sumcheckUnivariates[round];\n            bool valid = checkSum(roundUnivariate, roundTarget);\n            if (!valid) revert SumcheckFailed();\n\n            Fr roundChallenge = tp.sumCheckUChallenges[round];\n\n            // Update the round target for the next rounf\n            roundTarget = computeNextTargetSum(roundUnivariate, roundChallenge);\n            powPartialEvaluation = partiallyEvaluatePOW(tp.gateChallenges[round], powPartialEvaluation, roundChallenge);\n        }\n\n        // Last round\n        Fr grandHonkRelationSum =\n            RelationsLib.accumulateRelationEvaluations(proof.sumcheckEvaluations, tp.relationParameters, tp.alphas, powPartialEvaluation);\n        verified = (grandHonkRelationSum == roundTarget);\n    }\n\n    function checkSum(Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory roundUnivariate, Fr roundTarget)\n        internal\n        pure\n        returns (bool checked)\n    {\n        Fr totalSum = roundUnivariate[0] + roundUnivariate[1];\n        checked = totalSum == roundTarget;\n    }\n\n    // Return the new target sum for the next sumcheck round\n    function computeNextTargetSum(Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory roundUnivariates, Fr roundChallenge)\n        internal\n        view\n        returns (Fr targetSum)\n    {\n        // TODO: inline\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory BARYCENTRIC_LAGRANGE_DENOMINATORS = [\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffec51),\n            Fr.wrap(0x00000000000000000000000000000000000000000000000000000000000002d0),\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffff11),\n            Fr.wrap(0x0000000000000000000000000000000000000000000000000000000000000090),\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffff71),\n            Fr.wrap(0x00000000000000000000000000000000000000000000000000000000000000f0),\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593effffd31),\n            Fr.wrap(0x00000000000000000000000000000000000000000000000000000000000013b0)\n        ];\n\n        // To compute the next target sum, we evaluate the given univariate at a point u (challenge).\n\n        // Performing Barycentric evaluations\n        // Compute B(x)\n        Fr numeratorValue = Fr.wrap(1);\n        for (uint256 i = 0; i < BATCHED_RELATION_PARTIAL_LENGTH; ++i) {\n            numeratorValue = numeratorValue * (roundChallenge - Fr.wrap(i));\n        }\n\n        // Calculate domain size N of inverses\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory denominatorInverses;\n        for (uint256 i = 0; i < BATCHED_RELATION_PARTIAL_LENGTH; ++i) {\n            Fr inv = BARYCENTRIC_LAGRANGE_DENOMINATORS[i];\n            inv = inv * (roundChallenge - Fr.wrap(i));\n            inv = FrLib.invert(inv);\n            denominatorInverses[i] = inv;\n        }\n\n        for (uint256 i = 0; i < BATCHED_RELATION_PARTIAL_LENGTH; ++i) {\n            Fr term = roundUnivariates[i];\n            term = term * denominatorInverses[i];\n            targetSum = targetSum + term;\n        }\n\n        // Scale the sum by the value of B(x)\n        targetSum = targetSum * numeratorValue;\n    }\n\n    // Univariate evaluation of the monomial ((1-X_l) + X_l.B_l) at the challenge point X_l=u_l\n    function partiallyEvaluatePOW(Fr gateChallenge, Fr currentEvaluation, Fr roundChallenge)\n        internal\n        pure\n        returns (Fr newEvaluation)\n    {\n        Fr univariateEval = Fr.wrap(1) + (roundChallenge * (gateChallenge - Fr.wrap(1)));\n        newEvaluation = currentEvaluation * univariateEval;\n    }\n\n    function verifyShplemini(Honk.Proof memory proof, Honk.VerificationKey memory vk, Transcript memory tp)\n        internal\n        view\n        returns (bool verified)\n    {\n        ShpleminiIntermediates memory mem; // stack\n\n        // - Compute vector (r, r², ... , r²⁽ⁿ⁻¹⁾), where n = log_circuit_size\n        Fr[CONST_PROOF_SIZE_LOG_N] memory powers_of_evaluation_challenge = CommitmentSchemeLib.computeSquares(tp.geminiR);\n\n        // Arrays hold values that will be linearly combined for the gemini and shplonk batch openings\n        Fr[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory scalars;\n        Honk.G1Point[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory commitments;\n\n        mem.posInvertedDenominator = (tp.shplonkZ - powers_of_evaluation_challenge[0]).invert();\n        mem.negInvertedDenominator = (tp.shplonkZ + powers_of_evaluation_challenge[0]).invert();\n\n        mem.unshiftedScalar = mem.posInvertedDenominator + (tp.shplonkNu * mem.negInvertedDenominator);\n        mem.shiftedScalar =\n            tp.geminiR.invert() * (mem.posInvertedDenominator - (tp.shplonkNu * mem.negInvertedDenominator));\n\n        scalars[0] = Fr.wrap(1);\n        commitments[0] = convertProofPoint(proof.shplonkQ);\n\n        mem.batchingChallenge = Fr.wrap(1);\n        mem.batchedEvaluation = Fr.wrap(0);\n\n        for (uint256 i = 1; i <= NUMBER_UNSHIFTED; ++i) {\n            scalars[i] = mem.unshiftedScalar.neg() * mem.batchingChallenge;\n            mem.batchedEvaluation = mem.batchedEvaluation + (proof.sumcheckEvaluations[i - 1] * mem.batchingChallenge);\n            mem.batchingChallenge = mem.batchingChallenge * tp.rho;\n        }\n        // g commitments are accumulated at r\n        for (uint256 i = NUMBER_UNSHIFTED + 1; i <= NUMBER_OF_ENTITIES; ++i) {\n            scalars[i] = mem.shiftedScalar.neg() * mem.batchingChallenge;\n            mem.batchedEvaluation = mem.batchedEvaluation + (proof.sumcheckEvaluations[i - 1] * mem.batchingChallenge);\n            mem.batchingChallenge = mem.batchingChallenge * tp.rho;\n        }\n\n        commitments[1] = vk.qm;\n        commitments[2] = vk.qc;\n        commitments[3] = vk.ql;\n        commitments[4] = vk.qr;\n        commitments[5] = vk.qo;\n        commitments[6] = vk.q4;\n        commitments[7] = vk.qLookup;\n        commitments[8] = vk.qArith;\n        commitments[9] = vk.qDeltaRange;\n        commitments[10] = vk.qElliptic;\n        commitments[11] = vk.qAux;\n        commitments[12] = vk.qPoseidon2External;\n        commitments[13] = vk.qPoseidon2Internal;\n        commitments[14] = vk.s1;\n        commitments[15] = vk.s2;\n        commitments[16] = vk.s3;\n        commitments[17] = vk.s4;\n        commitments[18] = vk.id1;\n        commitments[19] = vk.id2;\n        commitments[20] = vk.id3;\n        commitments[21] = vk.id4;\n        commitments[22] = vk.t1;\n        commitments[23] = vk.t2;\n        commitments[24] = vk.t3;\n        commitments[25] = vk.t4;\n        commitments[26] = vk.lagrangeFirst;\n        commitments[27] = vk.lagrangeLast;\n\n        // Accumulate proof points\n        commitments[28] = convertProofPoint(proof.w1);\n        commitments[29] = convertProofPoint(proof.w2);\n        commitments[30] = convertProofPoint(proof.w3);\n        commitments[31] = convertProofPoint(proof.w4);\n        commitments[32] = convertProofPoint(proof.zPerm);\n        commitments[33] = convertProofPoint(proof.lookupInverses);\n        commitments[34] = convertProofPoint(proof.lookupReadCounts);\n        commitments[35] = convertProofPoint(proof.lookupReadTags);\n\n        // to be Shifted\n        commitments[36] = convertProofPoint(proof.w1);\n        commitments[37] = convertProofPoint(proof.w2);\n        commitments[38] = convertProofPoint(proof.w3);\n        commitments[39] = convertProofPoint(proof.w4);\n        commitments[40] = convertProofPoint(proof.zPerm);\n\n        // Add contributions from A₀(r) and A₀(-r) to constant_term_accumulator:\n        // Compute the evaluations A_l(r^{2^l}) for l = 0, ..., logN - 1\n        Fr[CONST_PROOF_SIZE_LOG_N] memory foldPosEvaluations = CommitmentSchemeLib.computeFoldPosEvaluations(\n            tp.sumCheckUChallenges,\n            mem.batchedEvaluation,\n            proof.geminiAEvaluations,\n            powers_of_evaluation_challenge,\n            logN\n        );\n\n        // Compute the Shplonk constant term contributions from A₀(±r)\n        mem.constantTermAccumulator = foldPosEvaluations[0] * mem.posInvertedDenominator;\n        mem.constantTermAccumulator =\n            mem.constantTermAccumulator + (proof.geminiAEvaluations[0] * tp.shplonkNu * mem.negInvertedDenominator);\n        mem.batchingChallenge = tp.shplonkNu.sqr();\n\n        // Compute Shplonk constant term contributions from Aₗ(±r^{2ˡ}) for l = 1, ..., m-1;\n        // Compute scalar multipliers for each fold commitment\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; ++i) {\n            bool dummy_round = i >= (logN - 1);\n\n            if (!dummy_round) {\n                // Update inverted denominators\n                mem.posInvertedDenominator = (tp.shplonkZ - powers_of_evaluation_challenge[i + 1]).invert();\n                mem.negInvertedDenominator = (tp.shplonkZ + powers_of_evaluation_challenge[i + 1]).invert();\n\n                // Compute the scalar multipliers for Aₗ(± r^{2ˡ}) and [Aₗ]\n                mem.scalingFactorPos = mem.batchingChallenge * mem.posInvertedDenominator;\n                mem.scalingFactorNeg = mem.batchingChallenge * tp.shplonkNu * mem.negInvertedDenominator;\n                // [Aₗ] is multiplied by -v^{2l}/(z-r^{2^l}) - v^{2l+1} /(z+ r^{2^l})\n                scalars[NUMBER_OF_ENTITIES + 1 + i] = mem.scalingFactorNeg.neg() + mem.scalingFactorPos.neg();\n\n                // Accumulate the const term contribution given by\n                // v^{2l} * Aₗ(r^{2ˡ}) /(z-r^{2^l}) + v^{2l+1} * Aₗ(-r^{2ˡ}) /(z+ r^{2^l})\n                Fr accumContribution = mem.scalingFactorNeg * proof.geminiAEvaluations[i + 1];\n                accumContribution = accumContribution + mem.scalingFactorPos * foldPosEvaluations[i + 1];\n                mem.constantTermAccumulator = mem.constantTermAccumulator + accumContribution;\n                // Update the running power of v\n                mem.batchingChallenge = mem.batchingChallenge * tp.shplonkNu * tp.shplonkNu;\n            }\n\n            commitments[NUMBER_OF_ENTITIES + 1 + i] = convertProofPoint(proof.geminiFoldComms[i]);\n        }\n\n        // Finalise the batch opening claim\n        commitments[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N] = Honk.G1Point({x: 1, y: 2});\n        scalars[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N] = mem.constantTermAccumulator;\n\n        Honk.G1Point memory quotient_commitment = convertProofPoint(proof.kzgQuotient);\n\n        commitments[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 1] = quotient_commitment;\n        scalars[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 1] = tp.shplonkZ; // evaluation challenge\n\n        Honk.G1Point memory P_0 = batchMul(commitments, scalars);\n        Honk.G1Point memory P_1 = negateInplace(quotient_commitment);\n\n        return pairing(P_0, P_1);\n    }\n\n    // This implementation is the same as above with different constants\n    function batchMul(\n        Honk.G1Point[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory base,\n        Fr[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory scalars\n    ) internal view returns (Honk.G1Point memory result) {\n        uint256 limit = NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2;\n        assembly {\n            let success := 0x01\n            let free := mload(0x40)\n\n            // Write the original into the accumulator\n            // Load into memory for ecMUL, leave offset for eccAdd result\n            // base is an array of pointers, so we have to dereference them\n            mstore(add(free, 0x40), mload(mload(base)))\n            mstore(add(free, 0x60), mload(add(0x20, mload(base))))\n            // Add scalar\n            mstore(add(free, 0x80), mload(scalars))\n            success := and(success, staticcall(gas(), 7, add(free, 0x40), 0x60, free, 0x40))\n\n            let count := 0x01\n            for {} lt(count, limit) { count := add(count, 1) } {\n                // Get loop offsets\n                let base_base := add(base, mul(count, 0x20))\n                let scalar_base := add(scalars, mul(count, 0x20))\n\n                mstore(add(free, 0x40), mload(mload(base_base)))\n                mstore(add(free, 0x60), mload(add(0x20, mload(base_base))))\n                // Add scalar\n                mstore(add(free, 0x80), mload(scalar_base))\n\n                success := and(success, staticcall(gas(), 7, add(free, 0x40), 0x60, add(free, 0x40), 0x40))\n                // accumulator = accumulator + accumulator_2\n                success := and(success, staticcall(gas(), 6, free, 0x80, free, 0x40))\n            }\n\n            // Return the result - i hate this\n            mstore(result, mload(free))\n            mstore(add(result, 0x20), mload(add(free, 0x20)))\n        }\n    }\n}\n\ncontract DepositVerifier is BaseHonkVerifier(N, LOG_N, NUMBER_OF_PUBLIC_INPUTS) {\n     function loadVerificationKey() internal pure override returns (Honk.VerificationKey memory) {\n       return HonkVerificationKey.loadVerificationKey();\n    }\n}\n"
    },
    "contracts/verifiers/TransferVerifier.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n// Copyright 2022 Aztec\npragma solidity >=0.8.21;\n\nuint256 constant N = 65536;\nuint256 constant LOG_N = 16;\nuint256 constant NUMBER_OF_PUBLIC_INPUTS = 7;\nlibrary HonkVerificationKey {\n    function loadVerificationKey() internal pure returns (Honk.VerificationKey memory) {\n        Honk.VerificationKey memory vk = Honk.VerificationKey({\n            circuitSize: uint256(65536),\n            logCircuitSize: uint256(16),\n            publicInputsSize: uint256(7),\n            ql: Honk.G1Point({ \n               x: uint256(0x1a1e875f42167486ac11a99835a465c7015a7b16021abe1e748b5cf6cace2b62),\n               y: uint256(0x3045d1909b8e0fa4618f31c3138202e2699064eeca9a6d82a44b914c114850c6)\n            }),\n            qr: Honk.G1Point({ \n               x: uint256(0x11b5d8797b3cecce1971263ece6a677899243a9225139178d07e775dc9b3e587),\n               y: uint256(0x25eb6e58ffa4512e030e414a041952016b232ab04975097ac60466d0e28aa532)\n            }),\n            qo: Honk.G1Point({ \n               x: uint256(0x1d59c0139207dce3c74baee590fdb35954d188f19df71489b0101bda805f742e),\n               y: uint256(0x28c3e9db04a20f2225bde03f5ede809f2470dc56c958b6ebc043ea2f624005fd)\n            }),\n            q4: Honk.G1Point({ \n               x: uint256(0x00552a80d18d80bf39b3d66403f907bf3189808127c6050781ef4a883eecd7d4),\n               y: uint256(0x078761f1085f44b79182bde0b491bef33d9390174f2c46aa6322eb709d70e86c)\n            }),\n            qm: Honk.G1Point({ \n               x: uint256(0x234c4c8b71ec9f56ab783e7d8a9ef4ac1a13580962a199a7dffb0b07cf479ea3),\n               y: uint256(0x0e6dcee7a86b016e6060a18f35244c5d45bdbb3399f5d1105b57f7b34609c8c5)\n            }),\n            qc: Honk.G1Point({ \n               x: uint256(0x02f02f0b0b9d38d3e4620f58157f413bfe6efd480aa60b40809345a45934d514),\n               y: uint256(0x04131ae8f131cbc53e631b085e96d1adf65b7375ec0fa0e0dc371121c1e06c9f)\n            }),\n            qArith: Honk.G1Point({ \n               x: uint256(0x243b4d85e4b013421aaabec5aa1a80df85cd4078997e4a46d26bda415357dd08),\n               y: uint256(0x15f58737cb5fd512cee2483ac86ef606daf9feca529656febe4afa97c3488f74)\n            }),\n            qDeltaRange: Honk.G1Point({ \n               x: uint256(0x1539680356883e585500983a2c496d6f968257c87799c0d0e597539e368add60),\n               y: uint256(0x0f6b691986777ce8591d771fff90786c0b108e2c278921651634916dc09728ea)\n            }),\n            qElliptic: Honk.G1Point({ \n               x: uint256(0x0ff6d798d89fbc0ebdcc50bad8714df0e8d322e6c5187b1dbb7e83e5975869fa),\n               y: uint256(0x076204bc54fc91a399ee8c65aadc753c70b18cc4323fd374e7a6def9f5f174e0)\n            }),\n            qAux: Honk.G1Point({ \n               x: uint256(0x228b04b575b50160e66efdf4b5ad1f7e9ce811da535020bf1c108171b6f274ec),\n               y: uint256(0x09b05944114dd08bceef513eec6bfe03f2db3e8847c0eb30c285af443cf1e2c1)\n            }),\n            qLookup: Honk.G1Point({ \n               x: uint256(0x0913b944f225bd3437dc089c770cf3078694e897165159fb022789e582c0a25b),\n               y: uint256(0x179e3ba13edea82a7dc156f47fc3b56433b7c0f2582e8696c494a979ed50e06a)\n            }),\n            qPoseidon2External: Honk.G1Point({ \n               x: uint256(0x276c5a1915aa930df9040ae34c37563d9974458ff5cfeaab37e477d2b5922dc3),\n               y: uint256(0x2f800af2ec79287683c2452fbbd07c2ae5e731b294e76ca927cb35ed8a3258c1)\n            }),\n            qPoseidon2Internal: Honk.G1Point({ \n               x: uint256(0x158f2f2113e7b648a151599ded71f3e7fd8835c390ee423358a2b4dcaaedd282),\n               y: uint256(0x2748e38a2d397b2748071d5db86ed97579faa8e6c81264d1c5a56890df7e9b7c)\n            }),\n            s1: Honk.G1Point({ \n               x: uint256(0x2195bf6308536fe46b7205b0b1b2a5cd17a8bfa3e2c1bbe3001e3beb2cab6405),\n               y: uint256(0x042df3741f3ada62b7e7a79685d11a4bc29f128d455177351e9daca782eba58e)\n            }),\n            s2: Honk.G1Point({ \n               x: uint256(0x2b990a4b66dbc143bb64c97ab48938a1cd64d7441368534ad1e8c229b8475df2),\n               y: uint256(0x2330129b27354517657f1799e16d1870902369e439ff66ff13dd55639156e3da)\n            }),\n            s3: Honk.G1Point({ \n               x: uint256(0x11b95554da4c0e77ade9239c29e36d9a4048c76af254a743a72cda94fc081949),\n               y: uint256(0x1e47ba937a5909a12678e76e788a5d939f42bff3c1dd45d3cb7fc2c5dffcfea3)\n            }),\n            s4: Honk.G1Point({ \n               x: uint256(0x2d5c139253ab560c601cb2eaf4ab9705540a66e67f6ddc67f4876b8382e2d9ea),\n               y: uint256(0x067ab21096704579b4e40e96bd8373c4c04de9a9bbb137bec4c7d71753d2f9eb)\n            }),\n            t1: Honk.G1Point({ \n               x: uint256(0x224948ddbcddb1e360efa2ac511aacd0d3258758dfa9bae9e415f6d48d990e16),\n               y: uint256(0x1011627c159ab9f3ff0a0416a01df6f6a101330e9f928dc80a3d3b9afefb373a)\n            }),\n            t2: Honk.G1Point({ \n               x: uint256(0x18dab63316305864682bfe7b586e912ec420ad50087360c152c131400547bcc6),\n               y: uint256(0x1edb4d30542aa0ac4fe8eb31fc2ce04bd9f352c132c7ae6bed5ea997693e6300)\n            }),\n            t3: Honk.G1Point({ \n               x: uint256(0x0da213c79d7e44cd308766f068a2397abc60e991844a8abade001179d144e3f6),\n               y: uint256(0x03a6668aae5f6093de550d4d868840054dca22307d50e5beb76576afd31e250c)\n            }),\n            t4: Honk.G1Point({ \n               x: uint256(0x07ea92c2de0345ded1d25b237f08456f99a40f79f14ed78a291d53d0425ddc9d),\n               y: uint256(0x255aeaa6894472e3cb6b0a790cf290bc1328fa2c343da93cb98486d414f0a40a)\n            }),\n            id1: Honk.G1Point({ \n               x: uint256(0x1e38d7324e5501215d8047e0961236178de15f08e34170be9922b3d87cf2752f),\n               y: uint256(0x196770e1012059a88d0c7a794c9142327305fc2fa624e9c2ecbb75681db0d520)\n            }),\n            id2: Honk.G1Point({ \n               x: uint256(0x20e8e4613517a140b58d0707564ff5ab1483a171cbc1374197b059ee4d98418a),\n               y: uint256(0x06fd56317abbf3444a02db90f6f9a5083a4beae21d7dd7cbc474c797404e2759)\n            }),\n            id3: Honk.G1Point({ \n               x: uint256(0x2cd0f4b7eb6e8c082db11ddede1e9065907869a28b6da7ff4cc0317d5153a233),\n               y: uint256(0x19411c7a097265dcab1012a4373f8d89fdcde193d2d00ff61584102d65e12425)\n            }),\n            id4: Honk.G1Point({ \n               x: uint256(0x1a07062fed7af7b1152e0038dd4f5a42c345a1907bb9071dcb6dbcec7c205b7c),\n               y: uint256(0x2bdab0b217c9c90734f9f57fa0da3251ffac75447f9ed08c0d0b2aa63652f86a)\n            }),\n            lagrangeFirst: Honk.G1Point({ \n               x: uint256(0x0000000000000000000000000000000000000000000000000000000000000001),\n               y: uint256(0x0000000000000000000000000000000000000000000000000000000000000002)\n            }),\n            lagrangeLast: Honk.G1Point({ \n               x: uint256(0x2c39629d05e19d06e9b41253b5b15cc86f801295b2a604535cfd57db983a7248),\n               y: uint256(0x171a88a956ec45f61f5f9ea1ed16203dd3b1629065540972be76110648013598)\n            })\n        });\n        return vk;\n    }\n}\n\npragma solidity ^0.8.27;\n\ntype Fr is uint256;\n\nusing { add as + } for Fr global;\nusing { sub as - } for Fr global;\nusing { mul as * } for Fr global;\nusing { exp as ^ } for Fr global;\nusing { notEqual as != } for Fr global;\nusing { equal as == } for Fr global;\n\nuint256 constant MODULUS =\n    21888242871839275222246405745257275088548364400416034343698204186575808495617; // Prime field order\n\nFr constant MINUS_ONE = Fr.wrap(MODULUS - 1);\n\n// Instantiation\nlibrary FrLib\n{\n    function from(uint256 value) internal pure returns(Fr)\n    {\n        return Fr.wrap(value % MODULUS);\n    }\n\n    function fromBytes32(bytes32 value) internal pure returns(Fr)\n    {\n        return Fr.wrap(uint256(value) % MODULUS);\n    }\n\n    function toBytes32(Fr value) internal pure returns(bytes32)\n    {\n        return bytes32(Fr.unwrap(value));\n    }\n\n    function invert(Fr value) internal view returns(Fr)\n    {\n        uint256 v = Fr.unwrap(value);\n        uint256 result;\n\n        // Call the modexp precompile to invert in the field\n        assembly\n        {\n            let free := mload(0x40)\n            mstore(free, 0x20)\n            mstore(add(free, 0x20), 0x20)\n            mstore(add(free, 0x40), 0x20)\n            mstore(add(free, 0x60), v)\n            mstore(add(free, 0x80), sub(MODULUS, 2))\n            mstore(add(free, 0xa0), MODULUS)\n            let success := staticcall(gas(), 0x05, free, 0xc0, 0x00, 0x20)\n            if iszero(success) {\n                revert(0, 0)\n            }\n            result := mload(0x00)\n        }\n\n        return Fr.wrap(result);\n    }\n\n    function pow(Fr base, uint256 v) internal view returns(Fr)\n    {\n        uint256 b = Fr.unwrap(base);\n        uint256 result;\n\n        // Call the modexp precompile to invert in the field\n        assembly\n        {\n            let free := mload(0x40)\n            mstore(free, 0x20)\n            mstore(add(free, 0x20), 0x20)\n            mstore(add(free, 0x40), 0x20)\n            mstore(add(free, 0x60), b)\n            mstore(add(free, 0x80), v)\n            mstore(add(free, 0xa0), MODULUS)\n            let success := staticcall(gas(), 0x05, free, 0xc0, 0x00, 0x20)\n            if iszero(success) {\n                revert(0, 0)\n            }\n            result := mload(0x00)\n        }\n\n        return Fr.wrap(result);\n    }\n\n    function div(Fr numerator, Fr denominator) internal view returns(Fr)\n    {\n        return numerator * invert(denominator);\n    }\n\n    function sqr(Fr value) internal pure returns (Fr) {\n        return value * value;\n    }\n\n    function unwrap(Fr value) internal pure returns (uint256) {\n        return Fr.unwrap(value);\n    }\n\n    function neg(Fr value) internal pure returns (Fr) {\n        return Fr.wrap(MODULUS - Fr.unwrap(value));\n    }\n}\n\n// Free functions\nfunction add(Fr a, Fr b) pure returns(Fr)\n{\n    return Fr.wrap(addmod(Fr.unwrap(a), Fr.unwrap(b), MODULUS));\n}\n\nfunction mul(Fr a, Fr b) pure returns(Fr)\n{\n    return Fr.wrap(mulmod(Fr.unwrap(a), Fr.unwrap(b), MODULUS));\n}\n\nfunction sub(Fr a, Fr b) pure returns(Fr)\n{\n    return Fr.wrap(addmod(Fr.unwrap(a), MODULUS - Fr.unwrap(b), MODULUS));\n}\n\nfunction exp(Fr base, Fr exponent) pure returns(Fr)\n{\n    if (Fr.unwrap(exponent) == 0) return Fr.wrap(1);\n\n    for (uint256 i = 1; i < Fr.unwrap(exponent); i += i) {\n        base = base * base;\n    }\n    return base;\n}\n\nfunction notEqual(Fr a, Fr b) pure returns(bool)\n{\n    return Fr.unwrap(a) != Fr.unwrap(b);\n}\n\nfunction equal(Fr a, Fr b) pure returns(bool)\n{\n    return Fr.unwrap(a) == Fr.unwrap(b);\n}\n\nuint256 constant CONST_PROOF_SIZE_LOG_N = 28;\n\nuint256 constant NUMBER_OF_SUBRELATIONS = 26;\nuint256 constant BATCHED_RELATION_PARTIAL_LENGTH = 8;\nuint256 constant NUMBER_OF_ENTITIES = 40;\nuint256 constant NUMBER_UNSHIFTED = 35;\nuint256 constant NUMBER_TO_BE_SHIFTED = 5;\n\n// Alphas are used as relation separators so there should be NUMBER_OF_SUBRELATIONS - 1\nuint256 constant NUMBER_OF_ALPHAS = 25;\n\n// Prime field order\nuint256 constant Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583; // EC group order. F_q\nuint256 constant P = 21888242871839275222246405745257275088548364400416034343698204186575808495617; // Prime field order, F_r\n\n// ENUM FOR WIRES\nenum WIRE {\n    Q_M,\n    Q_C,\n    Q_L,\n    Q_R,\n    Q_O,\n    Q_4,\n    Q_LOOKUP,\n    Q_ARITH,\n    Q_RANGE,\n    Q_ELLIPTIC,\n    Q_AUX,\n    Q_POSEIDON2_EXTERNAL,\n    Q_POSEIDON2_INTERNAL,\n    SIGMA_1,\n    SIGMA_2,\n    SIGMA_3,\n    SIGMA_4,\n    ID_1,\n    ID_2,\n    ID_3,\n    ID_4,\n    TABLE_1,\n    TABLE_2,\n    TABLE_3,\n    TABLE_4,\n    LAGRANGE_FIRST,\n    LAGRANGE_LAST,\n    W_L,\n    W_R,\n    W_O,\n    W_4,\n    Z_PERM,\n    LOOKUP_INVERSES,\n    LOOKUP_READ_COUNTS,\n    LOOKUP_READ_TAGS,\n    W_L_SHIFT,\n    W_R_SHIFT,\n    W_O_SHIFT,\n    W_4_SHIFT,\n    Z_PERM_SHIFT\n}\n\nlibrary Honk {\n    struct G1Point {\n        uint256 x;\n        uint256 y;\n    }\n\n    struct G1ProofPoint {\n        uint256 x_0;\n        uint256 x_1;\n        uint256 y_0;\n        uint256 y_1;\n    }\n\n    struct VerificationKey {\n        // Misc Params\n        uint256 circuitSize;\n        uint256 logCircuitSize;\n        uint256 publicInputsSize;\n        // Selectors\n        G1Point qm;\n        G1Point qc;\n        G1Point ql;\n        G1Point qr;\n        G1Point qo;\n        G1Point q4;\n        G1Point qLookup; // Lookup\n        G1Point qArith; // Arithmetic widget\n        G1Point qDeltaRange; // Delta Range sort\n        G1Point qAux; // Auxillary\n        G1Point qElliptic; // Auxillary\n        G1Point qPoseidon2External;\n        G1Point qPoseidon2Internal;\n        // Copy cnstraints\n        G1Point s1;\n        G1Point s2;\n        G1Point s3;\n        G1Point s4;\n        // Copy identity\n        G1Point id1;\n        G1Point id2;\n        G1Point id3;\n        G1Point id4;\n        // Precomputed lookup table\n        G1Point t1;\n        G1Point t2;\n        G1Point t3;\n        G1Point t4;\n        // Fixed first and last\n        G1Point lagrangeFirst;\n        G1Point lagrangeLast;\n    }\n\n    struct RelationParameters {\n        // challenges\n        Fr eta;\n        Fr etaTwo;\n        Fr etaThree;\n        Fr beta;\n        Fr gamma;\n        // derived\n        Fr publicInputsDelta;\n    }\n\n\n    struct Proof {\n        // Free wires\n        Honk.G1ProofPoint w1;\n        Honk.G1ProofPoint w2;\n        Honk.G1ProofPoint w3;\n        Honk.G1ProofPoint w4;\n        // Lookup helpers - Permutations\n        Honk.G1ProofPoint zPerm;\n        // Lookup helpers - logup\n        Honk.G1ProofPoint lookupReadCounts;\n        Honk.G1ProofPoint lookupReadTags;\n        Honk.G1ProofPoint lookupInverses;\n        // Sumcheck\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH][CONST_PROOF_SIZE_LOG_N] sumcheckUnivariates;\n        Fr[NUMBER_OF_ENTITIES] sumcheckEvaluations;\n        // Shplemini\n        Honk.G1ProofPoint[CONST_PROOF_SIZE_LOG_N - 1] geminiFoldComms;\n        Fr[CONST_PROOF_SIZE_LOG_N] geminiAEvaluations;\n        Honk.G1ProofPoint shplonkQ;\n        Honk.G1ProofPoint kzgQuotient;\n    }\n}\n\n// Transcript library to generate fiat shamir challenges\nstruct Transcript {\n    // Oink\n    Honk.RelationParameters relationParameters;\n    Fr[NUMBER_OF_ALPHAS] alphas;\n    Fr[CONST_PROOF_SIZE_LOG_N] gateChallenges;\n    // Sumcheck\n    Fr[CONST_PROOF_SIZE_LOG_N] sumCheckUChallenges;\n    // Gemini\n    Fr rho;\n    Fr geminiR;\n    // Shplonk\n    Fr shplonkNu;\n    Fr shplonkZ;\n}\n\nlibrary TranscriptLib {\n    function generateTranscript(Honk.Proof memory proof, bytes32[] calldata publicInputs, uint256 circuitSize, uint256 publicInputsSize, uint256 pubInputsOffset)\n        internal\n        pure\n        returns (Transcript memory t)\n    {\n        Fr previousChallenge;\n        (t.relationParameters, previousChallenge) =\n            generateRelationParametersChallenges(proof, publicInputs, circuitSize, publicInputsSize, pubInputsOffset, previousChallenge);\n\n        (t.alphas, previousChallenge) = generateAlphaChallenges(previousChallenge, proof);\n\n        (t.gateChallenges, previousChallenge) = generateGateChallenges(previousChallenge);\n\n        (t.sumCheckUChallenges, previousChallenge) = generateSumcheckChallenges(proof, previousChallenge);\n\n        (t.rho, previousChallenge) = generateRhoChallenge(proof, previousChallenge);\n\n        (t.geminiR, previousChallenge) = generateGeminiRChallenge(proof, previousChallenge);\n\n        (t.shplonkNu, previousChallenge) = generateShplonkNuChallenge(proof, previousChallenge);\n\n        (t.shplonkZ, previousChallenge) = generateShplonkZChallenge(proof, previousChallenge);\n\n        return t;\n    }\n\n    function splitChallenge(Fr challenge) internal pure returns (Fr first, Fr second) {\n        uint256 challengeU256 = uint256(Fr.unwrap(challenge));\n        uint256 lo = challengeU256 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n        uint256 hi = challengeU256 >> 128;\n        first = FrLib.fromBytes32(bytes32(lo));\n        second = FrLib.fromBytes32(bytes32(hi));\n    }\n\n    function generateRelationParametersChallenges(\n        Honk.Proof memory proof,\n        bytes32[] calldata publicInputs,\n        uint256 circuitSize,\n        uint256 publicInputsSize,\n        uint256 pubInputsOffset,\n        Fr previousChallenge\n    ) internal pure returns (Honk.RelationParameters memory rp, Fr nextPreviousChallenge) {\n        (rp.eta, rp.etaTwo, rp.etaThree, previousChallenge) =\n            generateEtaChallenge(proof, publicInputs, circuitSize, publicInputsSize, pubInputsOffset);\n\n        (rp.beta, rp.gamma, nextPreviousChallenge) = generateBetaAndGammaChallenges(previousChallenge, proof);\n\n    }\n\n    function generateEtaChallenge(Honk.Proof memory proof, bytes32[] calldata publicInputs, uint256 circuitSize, uint256 publicInputsSize, uint256 pubInputsOffset)\n        internal\n        pure\n        returns (Fr eta, Fr etaTwo, Fr etaThree, Fr previousChallenge)\n    {\n        bytes32[] memory round0 = new bytes32[](3 + publicInputsSize + 12);\n        round0[0] = bytes32(circuitSize);\n        round0[1] = bytes32(publicInputsSize);\n        round0[2] = bytes32(pubInputsOffset);\n        for (uint256 i = 0; i < publicInputsSize; i++) {\n            round0[3 + i] = bytes32(publicInputs[i]);\n        }\n\n        // Create the first challenge\n        // Note: w4 is added to the challenge later on\n        round0[3 + publicInputsSize] = bytes32(proof.w1.x_0);\n        round0[3 + publicInputsSize + 1] = bytes32(proof.w1.x_1);\n        round0[3 + publicInputsSize + 2] = bytes32(proof.w1.y_0);\n        round0[3 + publicInputsSize + 3] = bytes32(proof.w1.y_1);\n        round0[3 + publicInputsSize + 4] = bytes32(proof.w2.x_0);\n        round0[3 + publicInputsSize + 5] = bytes32(proof.w2.x_1);\n        round0[3 + publicInputsSize + 6] = bytes32(proof.w2.y_0);\n        round0[3 + publicInputsSize + 7] = bytes32(proof.w2.y_1);\n        round0[3 + publicInputsSize + 8] = bytes32(proof.w3.x_0);\n        round0[3 + publicInputsSize + 9] = bytes32(proof.w3.x_1);\n        round0[3 + publicInputsSize + 10] = bytes32(proof.w3.y_0);\n        round0[3 + publicInputsSize + 11] = bytes32(proof.w3.y_1);\n\n        previousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(round0)));\n        (eta, etaTwo) = splitChallenge(previousChallenge);\n        previousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(previousChallenge))));\n        Fr unused;\n        (etaThree, unused) = splitChallenge(previousChallenge);\n    }\n\n    function generateBetaAndGammaChallenges(Fr previousChallenge, Honk.Proof memory proof)\n        internal\n        pure\n        returns (Fr beta, Fr gamma, Fr nextPreviousChallenge)\n    {\n        bytes32[13] memory round1;\n        round1[0] = FrLib.toBytes32(previousChallenge);\n        round1[1] = bytes32(proof.lookupReadCounts.x_0);\n        round1[2] = bytes32(proof.lookupReadCounts.x_1);\n        round1[3] = bytes32(proof.lookupReadCounts.y_0);\n        round1[4] = bytes32(proof.lookupReadCounts.y_1);\n        round1[5] = bytes32(proof.lookupReadTags.x_0);\n        round1[6] = bytes32(proof.lookupReadTags.x_1);\n        round1[7] = bytes32(proof.lookupReadTags.y_0);\n        round1[8] = bytes32(proof.lookupReadTags.y_1);\n        round1[9] = bytes32(proof.w4.x_0);\n        round1[10] = bytes32(proof.w4.x_1);\n        round1[11] = bytes32(proof.w4.y_0);\n        round1[12] = bytes32(proof.w4.y_1);\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(round1)));\n        (beta, gamma) = splitChallenge(nextPreviousChallenge);\n    }\n\n    // Alpha challenges non-linearise the gate contributions\n    function generateAlphaChallenges(Fr previousChallenge, Honk.Proof memory proof)\n        internal\n        pure\n        returns (Fr[NUMBER_OF_ALPHAS] memory alphas, Fr nextPreviousChallenge)\n    {\n        // Generate the original sumcheck alpha 0 by hashing zPerm and zLookup\n        uint256[9] memory alpha0;\n        alpha0[0] = Fr.unwrap(previousChallenge);\n        alpha0[1] = proof.lookupInverses.x_0;\n        alpha0[2] = proof.lookupInverses.x_1;\n        alpha0[3] = proof.lookupInverses.y_0;\n        alpha0[4] = proof.lookupInverses.y_1;\n        alpha0[5] = proof.zPerm.x_0;\n        alpha0[6] = proof.zPerm.x_1;\n        alpha0[7] = proof.zPerm.y_0;\n        alpha0[8] = proof.zPerm.y_1;\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(alpha0)));\n        (alphas[0], alphas[1]) = splitChallenge(nextPreviousChallenge);\n\n        for (uint256 i = 1; i < NUMBER_OF_ALPHAS / 2; i++) {\n            nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(nextPreviousChallenge))));\n            (alphas[2 * i], alphas[2 * i + 1]) = splitChallenge(nextPreviousChallenge);\n        }\n        if (((NUMBER_OF_ALPHAS & 1) == 1) && (NUMBER_OF_ALPHAS > 2)) {\n            nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(nextPreviousChallenge))));\n            Fr unused;\n            (alphas[NUMBER_OF_ALPHAS - 1], unused) = splitChallenge(nextPreviousChallenge);\n        }\n    }\n\n    function generateGateChallenges(Fr previousChallenge)\n        internal\n        pure\n        returns (Fr[CONST_PROOF_SIZE_LOG_N] memory gateChallenges, Fr nextPreviousChallenge)\n    {\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            previousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(previousChallenge))));\n            Fr unused;\n            (gateChallenges[i], unused) = splitChallenge(previousChallenge);\n        }\n        nextPreviousChallenge = previousChallenge;\n    }\n\n    function generateSumcheckChallenges(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr[CONST_PROOF_SIZE_LOG_N] memory sumcheckChallenges, Fr nextPreviousChallenge)\n    {\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            Fr[BATCHED_RELATION_PARTIAL_LENGTH + 1] memory univariateChal;\n            univariateChal[0] = prevChallenge;\n\n            for (uint256 j = 0; j < BATCHED_RELATION_PARTIAL_LENGTH; j++) {\n                univariateChal[j + 1] = proof.sumcheckUnivariates[i][j];\n            }\n            prevChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(univariateChal)));\n            Fr unused;\n            (sumcheckChallenges[i], unused) = splitChallenge(prevChallenge);\n        }\n        nextPreviousChallenge = prevChallenge;\n    }\n\n    function generateRhoChallenge(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr rho, Fr nextPreviousChallenge)\n    {\n        Fr[NUMBER_OF_ENTITIES + 1] memory rhoChallengeElements;\n        rhoChallengeElements[0] = prevChallenge;\n\n        for (uint256 i = 0; i < NUMBER_OF_ENTITIES; i++) {\n            rhoChallengeElements[i + 1] = proof.sumcheckEvaluations[i];\n        }\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(rhoChallengeElements)));\n        Fr unused;\n        (rho, unused) = splitChallenge(nextPreviousChallenge);\n    }\n\n    function generateGeminiRChallenge(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr geminiR, Fr nextPreviousChallenge)\n    {\n        uint256[(CONST_PROOF_SIZE_LOG_N - 1) * 4 + 1] memory gR;\n        gR[0] = Fr.unwrap(prevChallenge);\n\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; i++) {\n            gR[1 + i * 4] = proof.geminiFoldComms[i].x_0;\n            gR[2 + i * 4] = proof.geminiFoldComms[i].x_1;\n            gR[3 + i * 4] = proof.geminiFoldComms[i].y_0;\n            gR[4 + i * 4] = proof.geminiFoldComms[i].y_1;\n        }\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(gR)));\n        Fr unused;\n        (geminiR, unused) = splitChallenge(nextPreviousChallenge);\n    }\n\n    function generateShplonkNuChallenge(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr shplonkNu, Fr nextPreviousChallenge)\n    {\n        uint256[(CONST_PROOF_SIZE_LOG_N) + 1] memory shplonkNuChallengeElements;\n        shplonkNuChallengeElements[0] = Fr.unwrap(prevChallenge);\n\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            shplonkNuChallengeElements[i + 1] = Fr.unwrap(proof.geminiAEvaluations[i]);\n        }\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(shplonkNuChallengeElements)));\n        Fr unused;\n        (shplonkNu, unused) = splitChallenge(nextPreviousChallenge);\n    }\n\n    function generateShplonkZChallenge(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr shplonkZ, Fr nextPreviousChallenge)\n    {\n        uint256[5] memory shplonkZChallengeElements;\n        shplonkZChallengeElements[0] = Fr.unwrap(prevChallenge);\n\n        shplonkZChallengeElements[1] = proof.shplonkQ.x_0;\n        shplonkZChallengeElements[2] = proof.shplonkQ.x_1;\n        shplonkZChallengeElements[3] = proof.shplonkQ.y_0;\n        shplonkZChallengeElements[4] = proof.shplonkQ.y_1;\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(shplonkZChallengeElements)));\n        Fr unused;\n        (shplonkZ, unused) = splitChallenge(nextPreviousChallenge);\n    }\n\n    function loadProof(bytes calldata proof) internal pure returns (Honk.Proof memory p) {\n        // Commitments\n        p.w1 = bytesToG1ProofPoint(proof[0x0:0x80]);\n\n        p.w2 = bytesToG1ProofPoint(proof[0x80:0x100]);\n        p.w3 = bytesToG1ProofPoint(proof[0x100:0x180]);\n\n        // Lookup / Permutation Helper Commitments\n        p.lookupReadCounts = bytesToG1ProofPoint(proof[0x180:0x200]);\n        p.lookupReadTags = bytesToG1ProofPoint(proof[0x200:0x280]);\n        p.w4 = bytesToG1ProofPoint(proof[0x280:0x300]);\n        p.lookupInverses = bytesToG1ProofPoint(proof[0x300:0x380]);\n        p.zPerm = bytesToG1ProofPoint(proof[0x380:0x400]);\n        uint256 boundary = 0x400;\n\n        // Sumcheck univariates\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            for (uint256 j = 0; j < BATCHED_RELATION_PARTIAL_LENGTH; j++) {\n                p.sumcheckUnivariates[i][j] = bytesToFr(proof[boundary:boundary + 0x20]);\n                boundary += 0x20;\n            }\n        }\n        // Sumcheck evaluations\n        for (uint256 i = 0; i < NUMBER_OF_ENTITIES; i++) {\n            p.sumcheckEvaluations[i] = bytesToFr(proof[boundary:boundary + 0x20]);\n            boundary += 0x20;\n        }\n\n        // Gemini\n        // Read gemini fold univariates\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; i++) {\n            p.geminiFoldComms[i] = bytesToG1ProofPoint(proof[boundary:boundary + 0x80]);\n            boundary += 0x80;\n        }\n\n        // Read gemini a evaluations\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            p.geminiAEvaluations[i] = bytesToFr(proof[boundary:boundary + 0x20]);\n            boundary += 0x20;\n        }\n\n        // Shplonk\n        p.shplonkQ = bytesToG1ProofPoint(proof[boundary:boundary + 0x80]);\n        boundary = boundary + 0x80;\n        // KZG\n        p.kzgQuotient = bytesToG1ProofPoint(proof[boundary:boundary + 0x80]);\n    }\n}\n\n\n// Fr utility\n\nfunction bytesToFr(bytes calldata proofSection) pure returns (Fr scalar) {\n    require(proofSection.length == 0x20, \"invalid bytes scalar\");\n    scalar = FrLib.fromBytes32(bytes32(proofSection));\n}\n\n// EC Point utilities\nfunction convertProofPoint(Honk.G1ProofPoint memory input) pure returns (Honk.G1Point memory) {\n    return Honk.G1Point({x: input.x_0 | (input.x_1 << 136), y: input.y_0 | (input.y_1 << 136)});\n}\n\nfunction bytesToG1ProofPoint(bytes calldata proofSection) pure returns (Honk.G1ProofPoint memory point) {\n    require(proofSection.length == 0x80, \"invalid bytes point\");\n    point = Honk.G1ProofPoint({\n        x_0: uint256(bytes32(proofSection[0x00:0x20])),\n        x_1: uint256(bytes32(proofSection[0x20:0x40])),\n        y_0: uint256(bytes32(proofSection[0x40:0x60])),\n        y_1: uint256(bytes32(proofSection[0x60:0x80]))\n    });\n}\n\nfunction negateInplace(Honk.G1Point memory point) pure returns (Honk.G1Point memory) {\n    point.y = (Q - point.y) % Q;\n    return point;\n}\n\n function pairing(Honk.G1Point memory rhs, Honk.G1Point memory lhs) view returns (bool) {\n        bytes memory input = abi.encodePacked(\n            rhs.x,\n            rhs.y,\n            // Fixed G1 point\n            uint256(0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2),\n            uint256(0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed),\n            uint256(0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b),\n            uint256(0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa),\n            lhs.x,\n            lhs.y,\n            // G1 point from VK\n            uint256(0x260e01b251f6f1c7e7ff4e580791dee8ea51d87a358e038b4efe30fac09383c1),\n            uint256(0x0118c4d5b837bcc2bc89b5b398b5974e9f5944073b32078b7e231fec938883b0),\n            uint256(0x04fc6369f7110fe3d25156c1bb9a72859cf2a04641f99ba4ee413c80da6a5fe4),\n            uint256(0x22febda3c0c0632a56475b4214e5615e11e6dd3f96e6cea2854a87d4dacc5e55)\n        );\n\n        (bool success, bytes memory result) = address(0x08).staticcall(input);\n        bool decodedResult = abi.decode(result, (bool));\n        return success && decodedResult;\n    }\n\n\nlibrary RelationsLib {\n    Fr internal constant GRUMPKIN_CURVE_B_PARAMETER_NEGATED = Fr.wrap(17); // -(-17)\n\n    function accumulateRelationEvaluations(\n         Fr[NUMBER_OF_ENTITIES] memory purportedEvaluations,\n        Honk.RelationParameters memory rp,\n        Fr[NUMBER_OF_ALPHAS] memory alphas,\n        Fr powPartialEval\n    ) internal pure returns (Fr accumulator) {\n        Fr[NUMBER_OF_SUBRELATIONS] memory evaluations;\n\n        // Accumulate all relations in Ultra Honk - each with varying number of subrelations\n        accumulateArithmeticRelation(purportedEvaluations, evaluations, powPartialEval);\n        accumulatePermutationRelation(purportedEvaluations, rp, evaluations, powPartialEval);\n        accumulateLogDerivativeLookupRelation(purportedEvaluations, rp, evaluations, powPartialEval);\n        accumulateDeltaRangeRelation(purportedEvaluations, evaluations, powPartialEval);\n        accumulateEllipticRelation(purportedEvaluations, evaluations, powPartialEval);\n        accumulateAuxillaryRelation(purportedEvaluations, rp, evaluations, powPartialEval);\n        accumulatePoseidonExternalRelation(purportedEvaluations, evaluations, powPartialEval);\n        accumulatePoseidonInternalRelation(purportedEvaluations, evaluations, powPartialEval);\n        // batch the subrelations with the alpha challenges to obtain the full honk relation\n        accumulator = scaleAndBatchSubrelations(evaluations, alphas);\n    }\n\n    /**\n     * Aesthetic helper function that is used to index by enum into proof.sumcheckEvaluations, it avoids\n     * the relation checking code being cluttered with uint256 type casting, which is often a different colour in code\n     * editors, and thus is noisy.\n     */\n    function wire(Fr[NUMBER_OF_ENTITIES] memory p, WIRE _wire) internal pure returns (Fr) {\n        return p[uint256(_wire)];\n    }\n\n    uint256 internal constant NEG_HALF_MODULO_P = 0x183227397098d014dc2822db40c0ac2e9419f4243cdcb848a1f0fac9f8000000;\n    /**\n     * Ultra Arithmetic Relation\n     *\n     */\n    function accumulateArithmeticRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        // Relation 0\n        Fr q_arith = wire(p, WIRE.Q_ARITH);\n        {\n            Fr neg_half = Fr.wrap(NEG_HALF_MODULO_P);\n\n            Fr accum = (q_arith - Fr.wrap(3)) * (wire(p, WIRE.Q_M) * wire(p, WIRE.W_R) * wire(p, WIRE.W_L)) * neg_half;\n            accum = accum + (wire(p, WIRE.Q_L) * wire(p, WIRE.W_L)) + (wire(p, WIRE.Q_R) * wire(p, WIRE.W_R))\n                + (wire(p, WIRE.Q_O) * wire(p, WIRE.W_O)) + (wire(p, WIRE.Q_4) * wire(p, WIRE.W_4)) + wire(p, WIRE.Q_C);\n            accum = accum + (q_arith - Fr.wrap(1)) * wire(p, WIRE.W_4_SHIFT);\n            accum = accum * q_arith;\n            accum = accum * domainSep;\n            evals[0] = accum;\n        }\n\n        // Relation 1\n        {\n            Fr accum = wire(p, WIRE.W_L) + wire(p, WIRE.W_4) - wire(p, WIRE.W_L_SHIFT) + wire(p, WIRE.Q_M);\n            accum = accum * (q_arith - Fr.wrap(2));\n            accum = accum * (q_arith - Fr.wrap(1));\n            accum = accum * q_arith;\n            accum = accum * domainSep;\n            evals[1] = accum;\n        }\n    }\n\n    function accumulatePermutationRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Honk.RelationParameters memory rp,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        Fr grand_product_numerator;\n        Fr grand_product_denominator;\n\n        {\n            Fr num = wire(p, WIRE.W_L) + wire(p, WIRE.ID_1) * rp.beta + rp.gamma;\n            num = num * (wire(p, WIRE.W_R) + wire(p, WIRE.ID_2) * rp.beta + rp.gamma);\n            num = num * (wire(p, WIRE.W_O) + wire(p, WIRE.ID_3) * rp.beta + rp.gamma);\n            num = num * (wire(p, WIRE.W_4) + wire(p, WIRE.ID_4) * rp.beta + rp.gamma);\n\n            grand_product_numerator = num;\n        }\n        {\n            Fr den = wire(p, WIRE.W_L) + wire(p, WIRE.SIGMA_1) * rp.beta + rp.gamma;\n            den = den * (wire(p, WIRE.W_R) + wire(p, WIRE.SIGMA_2) * rp.beta + rp.gamma);\n            den = den * (wire(p, WIRE.W_O) + wire(p, WIRE.SIGMA_3) * rp.beta + rp.gamma);\n            den = den * (wire(p, WIRE.W_4) + wire(p, WIRE.SIGMA_4) * rp.beta + rp.gamma);\n\n            grand_product_denominator = den;\n        }\n\n        // Contribution 2\n        {\n            Fr acc = (wire(p, WIRE.Z_PERM) + wire(p, WIRE.LAGRANGE_FIRST)) * grand_product_numerator;\n\n            acc = acc\n                - (\n                    (wire(p, WIRE.Z_PERM_SHIFT) + (wire(p, WIRE.LAGRANGE_LAST) * rp.publicInputsDelta))\n                        * grand_product_denominator\n                );\n            acc = acc * domainSep;\n            evals[2] = acc;\n        }\n\n        // Contribution 3\n        {\n            Fr acc = (wire(p, WIRE.LAGRANGE_LAST) * wire(p, WIRE.Z_PERM_SHIFT)) * domainSep;\n            evals[3] = acc;\n        }\n    }\n\n    function accumulateLogDerivativeLookupRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Honk.RelationParameters memory rp,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        Fr write_term;\n        Fr read_term;\n\n        // Calculate the write term (the table accumulation)\n        {\n            write_term = wire(p, WIRE.TABLE_1) + rp.gamma + (wire(p, WIRE.TABLE_2) * rp.eta)\n                + (wire(p, WIRE.TABLE_3) * rp.etaTwo) + (wire(p, WIRE.TABLE_4) * rp.etaThree);\n        }\n\n        // Calculate the write term\n        {\n            Fr derived_entry_1 = wire(p, WIRE.W_L) + rp.gamma + (wire(p, WIRE.Q_R) * wire(p, WIRE.W_L_SHIFT));\n            Fr derived_entry_2 = wire(p, WIRE.W_R) + wire(p, WIRE.Q_M) * wire(p, WIRE.W_R_SHIFT);\n            Fr derived_entry_3 = wire(p, WIRE.W_O) + wire(p, WIRE.Q_C) * wire(p, WIRE.W_O_SHIFT);\n\n            read_term = derived_entry_1 + (derived_entry_2 * rp.eta) + (derived_entry_3 * rp.etaTwo)\n                + (wire(p, WIRE.Q_O) * rp.etaThree);\n        }\n\n        Fr read_inverse = wire(p, WIRE.LOOKUP_INVERSES) * write_term;\n        Fr write_inverse = wire(p, WIRE.LOOKUP_INVERSES) * read_term;\n\n        Fr inverse_exists_xor = wire(p, WIRE.LOOKUP_READ_TAGS) + wire(p, WIRE.Q_LOOKUP)\n            - (wire(p, WIRE.LOOKUP_READ_TAGS) * wire(p, WIRE.Q_LOOKUP));\n\n        // Inverse calculated correctly relation\n        Fr accumulatorNone = read_term * write_term * wire(p, WIRE.LOOKUP_INVERSES) - inverse_exists_xor;\n        accumulatorNone = accumulatorNone * domainSep;\n\n        // Inverse\n        Fr accumulatorOne = wire(p, WIRE.Q_LOOKUP) * read_inverse - wire(p, WIRE.LOOKUP_READ_COUNTS) * write_inverse;\n\n        evals[4] = accumulatorNone;\n        evals[5] = accumulatorOne;\n    }\n\n    function accumulateDeltaRangeRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        Fr minus_one = Fr.wrap(0) - Fr.wrap(1);\n        Fr minus_two = Fr.wrap(0) - Fr.wrap(2);\n        Fr minus_three = Fr.wrap(0) - Fr.wrap(3);\n\n        // Compute wire differences\n        Fr delta_1 = wire(p, WIRE.W_R) - wire(p, WIRE.W_L);\n        Fr delta_2 = wire(p, WIRE.W_O) - wire(p, WIRE.W_R);\n        Fr delta_3 = wire(p, WIRE.W_4) - wire(p, WIRE.W_O);\n        Fr delta_4 = wire(p, WIRE.W_L_SHIFT) - wire(p, WIRE.W_4);\n\n        // Contribution 6\n        {\n            Fr acc = delta_1;\n            acc = acc * (delta_1 + minus_one);\n            acc = acc * (delta_1 + minus_two);\n            acc = acc * (delta_1 + minus_three);\n            acc = acc * wire(p, WIRE.Q_RANGE);\n            acc = acc * domainSep;\n            evals[6] = acc;\n        }\n\n        // Contribution 7\n        {\n            Fr acc = delta_2;\n            acc = acc * (delta_2 + minus_one);\n            acc = acc * (delta_2 + minus_two);\n            acc = acc * (delta_2 + minus_three);\n            acc = acc * wire(p, WIRE.Q_RANGE);\n            acc = acc * domainSep;\n            evals[7] = acc;\n        }\n\n        // Contribution 8\n        {\n            Fr acc = delta_3;\n            acc = acc * (delta_3 + minus_one);\n            acc = acc * (delta_3 + minus_two);\n            acc = acc * (delta_3 + minus_three);\n            acc = acc * wire(p, WIRE.Q_RANGE);\n            acc = acc * domainSep;\n            evals[8] = acc;\n        }\n\n        // Contribution 9\n        {\n            Fr acc = delta_4;\n            acc = acc * (delta_4 + minus_one);\n            acc = acc * (delta_4 + minus_two);\n            acc = acc * (delta_4 + minus_three);\n            acc = acc * wire(p, WIRE.Q_RANGE);\n            acc = acc * domainSep;\n            evals[9] = acc;\n        }\n    }\n\n    struct EllipticParams {\n        // Points\n        Fr x_1;\n        Fr y_1;\n        Fr x_2;\n        Fr y_2;\n        Fr y_3;\n        Fr x_3;\n        // push accumulators into memory\n        Fr x_double_identity;\n    }\n\n    function accumulateEllipticRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        EllipticParams memory ep;\n        ep.x_1 = wire(p, WIRE.W_R);\n        ep.y_1 = wire(p, WIRE.W_O);\n\n        ep.x_2 = wire(p, WIRE.W_L_SHIFT);\n        ep.y_2 = wire(p, WIRE.W_4_SHIFT);\n        ep.y_3 = wire(p, WIRE.W_O_SHIFT);\n        ep.x_3 = wire(p, WIRE.W_R_SHIFT);\n\n        Fr q_sign = wire(p, WIRE.Q_L);\n        Fr q_is_double = wire(p, WIRE.Q_M);\n\n        // Contribution 10 point addition, x-coordinate check\n        // q_elliptic * (x3 + x2 + x1)(x2 - x1)(x2 - x1) - y2^2 - y1^2 + 2(y2y1)*q_sign = 0\n        Fr x_diff = (ep.x_2 - ep.x_1);\n        Fr y1_sqr = (ep.y_1 * ep.y_1);\n        {\n            // Move to top\n            Fr partialEval = domainSep;\n\n            Fr y2_sqr = (ep.y_2 * ep.y_2);\n            Fr y1y2 = ep.y_1 * ep.y_2 * q_sign;\n            Fr x_add_identity = (ep.x_3 + ep.x_2 + ep.x_1);\n            x_add_identity = x_add_identity * x_diff * x_diff;\n            x_add_identity = x_add_identity - y2_sqr - y1_sqr + y1y2 + y1y2;\n\n            evals[10] = x_add_identity * partialEval * wire(p, WIRE.Q_ELLIPTIC) * (Fr.wrap(1) - q_is_double);\n        }\n\n        // Contribution 11 point addition, x-coordinate check\n        // q_elliptic * (q_sign * y1 + y3)(x2 - x1) + (x3 - x1)(y2 - q_sign * y1) = 0\n        {\n            Fr y1_plus_y3 = ep.y_1 + ep.y_3;\n            Fr y_diff = ep.y_2 * q_sign - ep.y_1;\n            Fr y_add_identity = y1_plus_y3 * x_diff + (ep.x_3 - ep.x_1) * y_diff;\n            evals[11] = y_add_identity * domainSep * wire(p, WIRE.Q_ELLIPTIC) * (Fr.wrap(1) - q_is_double);\n        }\n\n        // Contribution 10 point doubling, x-coordinate check\n        // (x3 + x1 + x1) (4y1*y1) - 9 * x1 * x1 * x1 * x1 = 0\n        // N.B. we're using the equivalence x1*x1*x1 === y1*y1 - curve_b to reduce degree by 1\n        {\n            Fr x_pow_4 = (y1_sqr + GRUMPKIN_CURVE_B_PARAMETER_NEGATED) * ep.x_1;\n            Fr y1_sqr_mul_4 = y1_sqr + y1_sqr;\n            y1_sqr_mul_4 = y1_sqr_mul_4 + y1_sqr_mul_4;\n            Fr x1_pow_4_mul_9 = x_pow_4 * Fr.wrap(9);\n\n            // NOTE: pushed into memory (stack >:'( )\n            ep.x_double_identity = (ep.x_3 + ep.x_1 + ep.x_1) * y1_sqr_mul_4 - x1_pow_4_mul_9;\n\n            Fr acc = ep.x_double_identity * domainSep * wire(p, WIRE.Q_ELLIPTIC) * q_is_double;\n            evals[10] = evals[10] + acc;\n        }\n\n        // Contribution 11 point doubling, y-coordinate check\n        // (y1 + y1) (2y1) - (3 * x1 * x1)(x1 - x3) = 0\n        {\n            Fr x1_sqr_mul_3 = (ep.x_1 + ep.x_1 + ep.x_1) * ep.x_1;\n            Fr y_double_identity = x1_sqr_mul_3 * (ep.x_1 - ep.x_3) - (ep.y_1 + ep.y_1) * (ep.y_1 + ep.y_3);\n            evals[11] = evals[11] + y_double_identity * domainSep * wire(p, WIRE.Q_ELLIPTIC) * q_is_double;\n        }\n    }\n\n    // Constants for the auxiliary relation\n    Fr constant LIMB_SIZE = Fr.wrap(uint256(1) << 68);\n    Fr constant SUBLIMB_SHIFT = Fr.wrap(uint256(1) << 14);\n\n    // Parameters used within the Auxiliary Relation\n    // A struct is used to work around stack too deep. This relation has alot of variables\n    struct AuxParams {\n        Fr limb_subproduct;\n        Fr non_native_field_gate_1;\n        Fr non_native_field_gate_2;\n        Fr non_native_field_gate_3;\n        Fr limb_accumulator_1;\n        Fr limb_accumulator_2;\n        Fr memory_record_check;\n        Fr partial_record_check;\n        Fr next_gate_access_type;\n        Fr record_delta;\n        Fr index_delta;\n        Fr adjacent_values_match_if_adjacent_indices_match;\n        Fr adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation;\n        Fr access_check;\n        Fr next_gate_access_type_is_boolean;\n        Fr ROM_consistency_check_identity;\n        Fr RAM_consistency_check_identity;\n        Fr timestamp_delta;\n        Fr RAM_timestamp_check_identity;\n        Fr memory_identity;\n        Fr index_is_monotonically_increasing;\n        Fr auxiliary_identity;\n    }\n\n    function accumulateAuxillaryRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Honk.RelationParameters memory rp,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        AuxParams memory ap;\n\n        /**\n         * Contribution 12\n         * Non native field arithmetic gate 2\n         * deg 4\n         *\n         *             _                                                                               _\n         *            /   _                   _                               _       14                \\\n         * q_2 . q_4 |   (w_1 . w_2) + (w_1 . w_2) + (w_1 . w_4 + w_2 . w_3 - w_3) . 2    - w_3 - w_4   |\n         *            \\_                                                                               _/\n         *\n         *\n         */\n        ap.limb_subproduct = wire(p, WIRE.W_L) * wire(p, WIRE.W_R_SHIFT) + wire(p, WIRE.W_L_SHIFT) * wire(p, WIRE.W_R);\n        ap.non_native_field_gate_2 =\n            (wire(p, WIRE.W_L) * wire(p, WIRE.W_4) + wire(p, WIRE.W_R) * wire(p, WIRE.W_O) - wire(p, WIRE.W_O_SHIFT));\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 * LIMB_SIZE;\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 - wire(p, WIRE.W_4_SHIFT);\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 + ap.limb_subproduct;\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 * wire(p, WIRE.Q_4);\n\n        ap.limb_subproduct = ap.limb_subproduct * LIMB_SIZE;\n        ap.limb_subproduct = ap.limb_subproduct + (wire(p, WIRE.W_L_SHIFT) * wire(p, WIRE.W_R_SHIFT));\n        ap.non_native_field_gate_1 = ap.limb_subproduct;\n        ap.non_native_field_gate_1 = ap.non_native_field_gate_1 - (wire(p, WIRE.W_O) + wire(p, WIRE.W_4));\n        ap.non_native_field_gate_1 = ap.non_native_field_gate_1 * wire(p, WIRE.Q_O);\n\n        ap.non_native_field_gate_3 = ap.limb_subproduct;\n        ap.non_native_field_gate_3 = ap.non_native_field_gate_3 + wire(p, WIRE.W_4);\n        ap.non_native_field_gate_3 = ap.non_native_field_gate_3 - (wire(p, WIRE.W_O_SHIFT) + wire(p, WIRE.W_4_SHIFT));\n        ap.non_native_field_gate_3 = ap.non_native_field_gate_3 * wire(p, WIRE.Q_M);\n\n        Fr non_native_field_identity =\n            ap.non_native_field_gate_1 + ap.non_native_field_gate_2 + ap.non_native_field_gate_3;\n        non_native_field_identity = non_native_field_identity * wire(p, WIRE.Q_R);\n\n        // ((((w2' * 2^14 + w1') * 2^14 + w3) * 2^14 + w2) * 2^14 + w1 - w4) * qm\n        // deg 2\n        ap.limb_accumulator_1 = wire(p, WIRE.W_R_SHIFT) * SUBLIMB_SHIFT;\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_L_SHIFT);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_O);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_R);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_L);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 - wire(p, WIRE.W_4);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * wire(p, WIRE.Q_4);\n\n        // ((((w3' * 2^14 + w2') * 2^14 + w1') * 2^14 + w4) * 2^14 + w3 - w4') * qm\n        // deg 2\n        ap.limb_accumulator_2 = wire(p, WIRE.W_O_SHIFT) * SUBLIMB_SHIFT;\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_R_SHIFT);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_L_SHIFT);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_4);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_O);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 - wire(p, WIRE.W_4_SHIFT);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * wire(p, WIRE.Q_M);\n\n        Fr limb_accumulator_identity = ap.limb_accumulator_1 + ap.limb_accumulator_2;\n        limb_accumulator_identity = limb_accumulator_identity * wire(p, WIRE.Q_O); //  deg 3\n\n        /**\n         * MEMORY\n         *\n         * A RAM memory record contains a tuple of the following fields:\n         *  * i: `index` of memory cell being accessed\n         *  * t: `timestamp` of memory cell being accessed (used for RAM, set to 0 for ROM)\n         *  * v: `value` of memory cell being accessed\n         *  * a: `access` type of record. read: 0 = read, 1 = write\n         *  * r: `record` of memory cell. record = access + index * eta + timestamp * eta_two + value * eta_three\n         *\n         * A ROM memory record contains a tuple of the following fields:\n         *  * i: `index` of memory cell being accessed\n         *  * v: `value1` of memory cell being accessed (ROM tables can store up to 2 values per index)\n         *  * v2:`value2` of memory cell being accessed (ROM tables can store up to 2 values per index)\n         *  * r: `record` of memory cell. record = index * eta + value2 * eta_two + value1 * eta_three\n         *\n         *  When performing a read/write access, the values of i, t, v, v2, a, r are stored in the following wires +\n         * selectors, depending on whether the gate is a RAM read/write or a ROM read\n         *\n         *  | gate type | i  | v2/t  |  v | a  | r  |\n         *  | --------- | -- | ----- | -- | -- | -- |\n         *  | ROM       | w1 | w2    | w3 | -- | w4 |\n         *  | RAM       | w1 | w2    | w3 | qc | w4 |\n         *\n         * (for accesses where `index` is a circuit constant, it is assumed the circuit will apply a copy constraint on\n         * `w2` to fix its value)\n         *\n         *\n         */\n\n        /**\n         * Memory Record Check\n         * Partial degree: 1\n         * Total degree: 4\n         *\n         * A ROM/ROM access gate can be evaluated with the identity:\n         *\n         * qc + w1 \\eta + w2 \\eta_two + w3 \\eta_three - w4 = 0\n         *\n         * For ROM gates, qc = 0\n         */\n        ap.memory_record_check = wire(p, WIRE.W_O) * rp.etaThree;\n        ap.memory_record_check = ap.memory_record_check + (wire(p, WIRE.W_R) * rp.etaTwo);\n        ap.memory_record_check = ap.memory_record_check + (wire(p, WIRE.W_L) * rp.eta);\n        ap.memory_record_check = ap.memory_record_check + wire(p, WIRE.Q_C);\n        ap.partial_record_check = ap.memory_record_check; // used in RAM consistency check; deg 1 or 4\n        ap.memory_record_check = ap.memory_record_check - wire(p, WIRE.W_4);\n\n        /**\n         * Contribution 13 & 14\n         * ROM Consistency Check\n         * Partial degree: 1\n         * Total degree: 4\n         *\n         * For every ROM read, a set equivalence check is applied between the record witnesses, and a second set of\n         * records that are sorted.\n         *\n         * We apply the following checks for the sorted records:\n         *\n         * 1. w1, w2, w3 correctly map to 'index', 'v1, 'v2' for a given record value at w4\n         * 2. index values for adjacent records are monotonically increasing\n         * 3. if, at gate i, index_i == index_{i + 1}, then value1_i == value1_{i + 1} and value2_i == value2_{i + 1}\n         *\n         */\n        ap.index_delta = wire(p, WIRE.W_L_SHIFT) - wire(p, WIRE.W_L);\n        ap.record_delta = wire(p, WIRE.W_4_SHIFT) - wire(p, WIRE.W_4);\n\n        ap.index_is_monotonically_increasing = ap.index_delta * ap.index_delta - ap.index_delta; // deg 2\n\n        ap.adjacent_values_match_if_adjacent_indices_match = (ap.index_delta * MINUS_ONE + Fr.wrap(1)) * ap.record_delta; // deg 2\n\n        evals[13] = ap.adjacent_values_match_if_adjacent_indices_match * (wire(p, WIRE.Q_L) * wire(p, WIRE.Q_R))\n            * (wire(p, WIRE.Q_AUX) * domainSep); // deg 5\n        evals[14] = ap.index_is_monotonically_increasing * (wire(p, WIRE.Q_L) * wire(p, WIRE.Q_R))\n            * (wire(p, WIRE.Q_AUX) * domainSep); // deg 5\n\n        ap.ROM_consistency_check_identity = ap.memory_record_check * (wire(p, WIRE.Q_L) * wire(p, WIRE.Q_R)); // deg 3 or 7\n\n        /**\n         * Contributions 15,16,17\n         * RAM Consistency Check\n         *\n         * The 'access' type of the record is extracted with the expression `w_4 - ap.partial_record_check`\n         * (i.e. for an honest Prover `w1 * eta + w2 * eta^2 + w3 * eta^3 - w4 = access`.\n         * This is validated by requiring `access` to be boolean\n         *\n         * For two adjacent entries in the sorted list if _both_\n         *  A) index values match\n         *  B) adjacent access value is 0 (i.e. next gate is a READ)\n         * then\n         *  C) both values must match.\n         * The gate boolean check is\n         * (A && B) => C  === !(A && B) || C ===  !A || !B || C\n         *\n         * N.B. it is the responsibility of the circuit writer to ensure that every RAM cell is initialized\n         * with a WRITE operation.\n         */\n        Fr access_type = (wire(p, WIRE.W_4) - ap.partial_record_check); // will be 0 or 1 for honest Prover; deg 1 or 4\n        ap.access_check = access_type * access_type - access_type; // check value is 0 or 1; deg 2 or 8\n\n        ap.next_gate_access_type = wire(p, WIRE.W_O_SHIFT) * rp.etaThree;\n        ap.next_gate_access_type = ap.next_gate_access_type + (wire(p, WIRE.W_R_SHIFT) * rp.etaTwo);\n        ap.next_gate_access_type = ap.next_gate_access_type + (wire(p, WIRE.W_L_SHIFT) * rp.eta);\n        ap.next_gate_access_type = wire(p, WIRE.W_4_SHIFT) - ap.next_gate_access_type;\n\n        Fr value_delta = wire(p, WIRE.W_O_SHIFT) - wire(p, WIRE.W_O);\n        ap.adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation = (\n            ap.index_delta * MINUS_ONE + Fr.wrap(1)\n        ) * value_delta * (ap.next_gate_access_type * MINUS_ONE + Fr.wrap(1)); // deg 3 or 6\n\n        // We can't apply the RAM consistency check identity on the final entry in the sorted list (the wires in the\n        // next gate would make the identity fail).  We need to validate that its 'access type' bool is correct. Can't\n        // do  with an arithmetic gate because of the  `eta` factors. We need to check that the *next* gate's access\n        // type is  correct, to cover this edge case\n        // deg 2 or 4\n        ap.next_gate_access_type_is_boolean =\n            ap.next_gate_access_type * ap.next_gate_access_type - ap.next_gate_access_type;\n\n        // Putting it all together...\n        evals[15] = ap.adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation\n            * (wire(p, WIRE.Q_ARITH)) * (wire(p, WIRE.Q_AUX) * domainSep); // deg 5 or 8\n        evals[16] = ap.index_is_monotonically_increasing * (wire(p, WIRE.Q_ARITH)) * (wire(p, WIRE.Q_AUX) * domainSep); // deg 4\n        evals[17] = ap.next_gate_access_type_is_boolean * (wire(p, WIRE.Q_ARITH)) * (wire(p, WIRE.Q_AUX) * domainSep); // deg 4 or 6\n\n        ap.RAM_consistency_check_identity = ap.access_check * (wire(p, WIRE.Q_ARITH)); // deg 3 or 9\n\n        /**\n         * RAM Timestamp Consistency Check\n         *\n         * | w1 | w2 | w3 | w4 |\n         * | index | timestamp | timestamp_check | -- |\n         *\n         * Let delta_index = index_{i + 1} - index_{i}\n         *\n         * Iff delta_index == 0, timestamp_check = timestamp_{i + 1} - timestamp_i\n         * Else timestamp_check = 0\n         */\n        ap.timestamp_delta = wire(p, WIRE.W_R_SHIFT) - wire(p, WIRE.W_R);\n        ap.RAM_timestamp_check_identity =\n            (ap.index_delta * MINUS_ONE + Fr.wrap(1)) * ap.timestamp_delta - wire(p, WIRE.W_O); // deg 3\n\n        /**\n         * Complete Contribution 12\n         * The complete RAM/ROM memory identity\n         * Partial degree:\n         */\n        ap.memory_identity = ap.ROM_consistency_check_identity; // deg 3 or 6\n        ap.memory_identity =\n            ap.memory_identity + ap.RAM_timestamp_check_identity * (wire(p, WIRE.Q_4) * wire(p, WIRE.Q_L)); // deg 4\n        ap.memory_identity = ap.memory_identity + ap.memory_record_check * (wire(p, WIRE.Q_M) * wire(p, WIRE.Q_L)); // deg 3 or 6\n        ap.memory_identity = ap.memory_identity + ap.RAM_consistency_check_identity; // deg 3 or 9\n\n        // (deg 3 or 9) + (deg 4) + (deg 3)\n        ap.auxiliary_identity = ap.memory_identity + non_native_field_identity + limb_accumulator_identity;\n        ap.auxiliary_identity = ap.auxiliary_identity * (wire(p, WIRE.Q_AUX) * domainSep); // deg 4 or 10\n        evals[12] = ap.auxiliary_identity;\n    }\n\n    struct PoseidonExternalParams {\n        Fr s1;\n        Fr s2;\n        Fr s3;\n        Fr s4;\n        Fr u1;\n        Fr u2;\n        Fr u3;\n        Fr u4;\n        Fr t0;\n        Fr t1;\n        Fr t2;\n        Fr t3;\n        Fr v1;\n        Fr v2;\n        Fr v3;\n        Fr v4;\n        Fr q_pos_by_scaling;\n    }\n\n    function accumulatePoseidonExternalRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        PoseidonExternalParams memory ep;\n\n        ep.s1 = wire(p, WIRE.W_L) + wire(p, WIRE.Q_L);\n        ep.s2 = wire(p, WIRE.W_R) + wire(p, WIRE.Q_R);\n        ep.s3 = wire(p, WIRE.W_O) + wire(p, WIRE.Q_O);\n        ep.s4 = wire(p, WIRE.W_4) + wire(p, WIRE.Q_4);\n\n        ep.u1 = ep.s1 * ep.s1 * ep.s1 * ep.s1 * ep.s1;\n        ep.u2 = ep.s2 * ep.s2 * ep.s2 * ep.s2 * ep.s2;\n        ep.u3 = ep.s3 * ep.s3 * ep.s3 * ep.s3 * ep.s3;\n        ep.u4 = ep.s4 * ep.s4 * ep.s4 * ep.s4 * ep.s4;\n        // matrix mul v = M_E * u with 14 additions\n        ep.t0 = ep.u1 + ep.u2; // u_1 + u_2\n        ep.t1 = ep.u3 + ep.u4; // u_3 + u_4\n        ep.t2 = ep.u2 + ep.u2 + ep.t1; // 2u_2\n        // ep.t2 += ep.t1; // 2u_2 + u_3 + u_4\n        ep.t3 = ep.u4 + ep.u4 + ep.t0; // 2u_4\n        // ep.t3 += ep.t0; // u_1 + u_2 + 2u_4\n        ep.v4 = ep.t1 + ep.t1;\n        ep.v4 = ep.v4 + ep.v4 + ep.t3;\n        // ep.v4 += ep.t3; // u_1 + u_2 + 4u_3 + 6u_4\n        ep.v2 = ep.t0 + ep.t0;\n        ep.v2 = ep.v2 + ep.v2 + ep.t2;\n        // ep.v2 += ep.t2; // 4u_1 + 6u_2 + u_3 + u_4\n        ep.v1 = ep.t3 + ep.v2; // 5u_1 + 7u_2 + u_3 + 3u_4\n        ep.v3 = ep.t2 + ep.v4; // u_1 + 3u_2 + 5u_3 + 7u_4\n\n        ep.q_pos_by_scaling = wire(p, WIRE.Q_POSEIDON2_EXTERNAL) * domainSep;\n        evals[18] = evals[18] + ep.q_pos_by_scaling * (ep.v1 - wire(p, WIRE.W_L_SHIFT));\n\n        evals[19] = evals[19] + ep.q_pos_by_scaling * (ep.v2 - wire(p, WIRE.W_R_SHIFT));\n\n        evals[20] = evals[20] + ep.q_pos_by_scaling * (ep.v3 - wire(p, WIRE.W_O_SHIFT));\n\n        evals[21] = evals[21] + ep.q_pos_by_scaling * (ep.v4 - wire(p, WIRE.W_4_SHIFT));\n    }\n\n    struct PoseidonInternalParams {\n        Fr u1;\n        Fr u2;\n        Fr u3;\n        Fr u4;\n        Fr u_sum;\n        Fr v1;\n        Fr v2;\n        Fr v3;\n        Fr v4;\n        Fr s1;\n        Fr q_pos_by_scaling;\n    }\n\n    function accumulatePoseidonInternalRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        PoseidonInternalParams memory ip;\n\n        Fr[4] memory INTERNAL_MATRIX_DIAGONAL = [\n            FrLib.from(0x10dc6e9c006ea38b04b1e03b4bd9490c0d03f98929ca1d7fb56821fd19d3b6e7),\n            FrLib.from(0x0c28145b6a44df3e0149b3d0a30b3bb599df9756d4dd9b84a86b38cfb45a740b),\n            FrLib.from(0x00544b8338791518b2c7645a50392798b21f75bb60e3596170067d00141cac15),\n            FrLib.from(0x222c01175718386f2e2e82eb122789e352e105a3b8fa852613bc534433ee428b)\n        ];\n\n        // add round constants\n        ip.s1 = wire(p, WIRE.W_L) + wire(p, WIRE.Q_L);\n\n        // apply s-box round\n        ip.u1 = ip.s1 * ip.s1 * ip.s1 * ip.s1 * ip.s1;\n        ip.u2 = wire(p, WIRE.W_R);\n        ip.u3 = wire(p, WIRE.W_O);\n        ip.u4 = wire(p, WIRE.W_4);\n\n        // matrix mul with v = M_I * u 4 muls and 7 additions\n        ip.u_sum = ip.u1 + ip.u2 + ip.u3 + ip.u4;\n\n        ip.q_pos_by_scaling = wire(p, WIRE.Q_POSEIDON2_INTERNAL) * domainSep;\n\n        ip.v1 = ip.u1 * INTERNAL_MATRIX_DIAGONAL[0] + ip.u_sum;\n        evals[22] = evals[22] + ip.q_pos_by_scaling * (ip.v1 - wire(p, WIRE.W_L_SHIFT));\n\n        ip.v2 = ip.u2 * INTERNAL_MATRIX_DIAGONAL[1] + ip.u_sum;\n        evals[23] = evals[23] + ip.q_pos_by_scaling * (ip.v2 - wire(p, WIRE.W_R_SHIFT));\n\n        ip.v3 = ip.u3 * INTERNAL_MATRIX_DIAGONAL[2] + ip.u_sum;\n        evals[24] = evals[24] + ip.q_pos_by_scaling * (ip.v3 - wire(p, WIRE.W_O_SHIFT));\n\n        ip.v4 = ip.u4 * INTERNAL_MATRIX_DIAGONAL[3] + ip.u_sum;\n        evals[25] = evals[25] + ip.q_pos_by_scaling * (ip.v4 - wire(p, WIRE.W_4_SHIFT));\n    }\n\n    function scaleAndBatchSubrelations(\n        Fr[NUMBER_OF_SUBRELATIONS] memory evaluations,\n        Fr[NUMBER_OF_ALPHAS] memory subrelationChallenges\n    ) internal pure returns (Fr accumulator) {\n        accumulator = accumulator + evaluations[0];\n\n        for (uint256 i = 1; i < NUMBER_OF_SUBRELATIONS; ++i) {\n            accumulator = accumulator + evaluations[i] * subrelationChallenges[i - 1];\n        }\n    }\n}\n\nstruct ShpleminiIntermediates {\n    Fr unshiftedScalar;\n    Fr shiftedScalar;\n    // Scalar to be multiplied by [1]₁\n    Fr constantTermAccumulator;\n    // Accumulator for powers of rho\n    Fr batchingChallenge;\n    // Linear combination of multilinear (sumcheck) evaluations and powers of rho\n    Fr batchedEvaluation;\n    // 1/(z - r^{2^i}) for i = 0, ..., logSize, dynamically updated\n    Fr posInvertedDenominator;\n    // 1/(z + r^{2^i}) for i = 0, ..., logSize, dynamically updated\n    Fr negInvertedDenominator;\n    // v^{2i} * 1/(z - r^{2^i})\n    Fr scalingFactorPos;\n    // v^{2i+1} * 1/(z + r^{2^i})\n    Fr scalingFactorNeg;\n    // // Fold_i(r^{2^i}) reconstructed by Verifier\n    // Fr[CONST_PROOF_SIZE_LOG_N] foldPosEvaluations;\n}\n\nlibrary CommitmentSchemeLib {\n    using FrLib for Fr;\n\n    function computeSquares(Fr r) internal pure returns (Fr[CONST_PROOF_SIZE_LOG_N] memory squares) {\n        squares[0] = r;\n        for (uint256 i = 1; i < CONST_PROOF_SIZE_LOG_N; ++i) {\n            squares[i] = squares[i - 1].sqr();\n        }\n    }\n\n    // Compute the evaluations  A_l(r^{2^l}) for l = 0, ..., m-1\n    function computeFoldPosEvaluations(\n        Fr[CONST_PROOF_SIZE_LOG_N] memory sumcheckUChallenges,\n        Fr batchedEvalAccumulator,\n        Fr[CONST_PROOF_SIZE_LOG_N] memory geminiEvaluations,\n        Fr[CONST_PROOF_SIZE_LOG_N] memory geminiEvalChallengePowers,\n        uint256 logSize\n    ) internal view returns (Fr[CONST_PROOF_SIZE_LOG_N] memory foldPosEvaluations) {\n        for (uint256 i = CONST_PROOF_SIZE_LOG_N; i > 0; --i) {\n            Fr challengePower = geminiEvalChallengePowers[i - 1];\n            Fr u = sumcheckUChallenges[i - 1];\n\n            Fr batchedEvalRoundAcc = (\n                (challengePower * batchedEvalAccumulator * Fr.wrap(2))\n                    - geminiEvaluations[i - 1] * (challengePower * (Fr.wrap(1) - u) - u)\n            );\n            // Divide by the denominator\n            batchedEvalRoundAcc = batchedEvalRoundAcc * (challengePower * (Fr.wrap(1) - u) + u).invert();\n\n            if (i <= logSize) {\n                batchedEvalAccumulator = batchedEvalRoundAcc;\n                foldPosEvaluations[i - 1] = batchedEvalRoundAcc;\n            }\n        }\n\n    }\n}\n\ninterface IVerifier {\n    function verify(bytes calldata _proof, bytes32[] calldata _publicInputs) external view returns (bool);\n}\n\n\nabstract contract BaseHonkVerifier is IVerifier {\n    using FrLib for Fr;\n\n    uint256 immutable n;\n    uint256 immutable logN;\n    uint256 immutable numPublicInputs;\n\n    constructor(uint256 _n, uint256 _logN, uint256 _numPublicInputs) {\n        n = _n;\n        logN = _logN;\n        numPublicInputs = _numPublicInputs;\n    }\n\n    error ProofLengthWrong();\n    error PublicInputsLengthWrong();\n    error SumcheckFailed();\n    error ShpleminiFailed();\n\n    // Number of field elements in a ultra honk zero knowledge proof\n    uint256 constant PROOF_SIZE = 440;\n\n    function loadVerificationKey() internal pure virtual returns (Honk.VerificationKey memory);\n\n    function verify(bytes calldata proof, bytes32[] calldata publicInputs) public view override returns (bool) {\n         // Check the received proof is the expected size where each field element is 32 bytes\n        if (proof.length != PROOF_SIZE * 32) {\n            revert ProofLengthWrong();\n        }\n\n        Honk.VerificationKey memory vk = loadVerificationKey();\n        Honk.Proof memory p = TranscriptLib.loadProof(proof);\n\n        if (publicInputs.length != vk.publicInputsSize) {\n            revert PublicInputsLengthWrong();\n        }\n\n        // Generate the fiat shamir challenges for the whole protocol\n        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1281): Add pubInputsOffset to VK or remove entirely.\n        Transcript memory t = TranscriptLib.generateTranscript(p, publicInputs, vk.circuitSize, vk.publicInputsSize, /*pubInputsOffset=*/1);\n\n        // Derive public input delta\n        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1281): Add pubInputsOffset to VK or remove entirely.\n        t.relationParameters.publicInputsDelta = computePublicInputDelta(\n            publicInputs, t.relationParameters.beta, t.relationParameters.gamma, /*pubInputsOffset=*/1\n        );\n\n        // Sumcheck\n        bool sumcheckVerified = verifySumcheck(p, t);\n        if (!sumcheckVerified) revert SumcheckFailed();\n\n        bool shpleminiVerified = verifyShplemini(p, vk, t);\n        if (!shpleminiVerified) revert ShpleminiFailed();\n\n        return sumcheckVerified && shpleminiVerified; // Boolean condition not required - nice for vanity :)\n    }\n\n    function computePublicInputDelta(bytes32[] memory publicInputs, Fr beta, Fr gamma, uint256 offset)\n        internal\n        view\n        returns (Fr publicInputDelta)\n    {\n        Fr numerator = Fr.wrap(1);\n        Fr denominator = Fr.wrap(1);\n\n        Fr numeratorAcc = gamma + (beta * FrLib.from(n + offset));\n        Fr denominatorAcc = gamma - (beta * FrLib.from(offset + 1));\n\n        {\n            for (uint256 i = 0; i < numPublicInputs; i++) {\n                Fr pubInput = FrLib.fromBytes32(publicInputs[i]);\n\n                numerator = numerator * (numeratorAcc + pubInput);\n                denominator = denominator * (denominatorAcc + pubInput);\n\n                numeratorAcc = numeratorAcc + beta;\n                denominatorAcc = denominatorAcc - beta;\n            }\n        }\n\n        // Fr delta = numerator / denominator; // TOOO: batch invert later?\n        publicInputDelta = FrLib.div(numerator, denominator);\n    }\n\n    function verifySumcheck(Honk.Proof memory proof, Transcript memory tp) internal view returns (bool verified) {\n        Fr roundTarget;\n        Fr powPartialEvaluation = Fr.wrap(1);\n\n        // We perform sumcheck reductions over log n rounds ( the multivariate degree )\n        for (uint256 round; round < logN; ++round) {\n            Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory roundUnivariate = proof.sumcheckUnivariates[round];\n            bool valid = checkSum(roundUnivariate, roundTarget);\n            if (!valid) revert SumcheckFailed();\n\n            Fr roundChallenge = tp.sumCheckUChallenges[round];\n\n            // Update the round target for the next rounf\n            roundTarget = computeNextTargetSum(roundUnivariate, roundChallenge);\n            powPartialEvaluation = partiallyEvaluatePOW(tp.gateChallenges[round], powPartialEvaluation, roundChallenge);\n        }\n\n        // Last round\n        Fr grandHonkRelationSum =\n            RelationsLib.accumulateRelationEvaluations(proof.sumcheckEvaluations, tp.relationParameters, tp.alphas, powPartialEvaluation);\n        verified = (grandHonkRelationSum == roundTarget);\n    }\n\n    function checkSum(Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory roundUnivariate, Fr roundTarget)\n        internal\n        pure\n        returns (bool checked)\n    {\n        Fr totalSum = roundUnivariate[0] + roundUnivariate[1];\n        checked = totalSum == roundTarget;\n    }\n\n    // Return the new target sum for the next sumcheck round\n    function computeNextTargetSum(Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory roundUnivariates, Fr roundChallenge)\n        internal\n        view\n        returns (Fr targetSum)\n    {\n        // TODO: inline\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory BARYCENTRIC_LAGRANGE_DENOMINATORS = [\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffec51),\n            Fr.wrap(0x00000000000000000000000000000000000000000000000000000000000002d0),\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffff11),\n            Fr.wrap(0x0000000000000000000000000000000000000000000000000000000000000090),\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffff71),\n            Fr.wrap(0x00000000000000000000000000000000000000000000000000000000000000f0),\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593effffd31),\n            Fr.wrap(0x00000000000000000000000000000000000000000000000000000000000013b0)\n        ];\n\n        // To compute the next target sum, we evaluate the given univariate at a point u (challenge).\n\n        // Performing Barycentric evaluations\n        // Compute B(x)\n        Fr numeratorValue = Fr.wrap(1);\n        for (uint256 i = 0; i < BATCHED_RELATION_PARTIAL_LENGTH; ++i) {\n            numeratorValue = numeratorValue * (roundChallenge - Fr.wrap(i));\n        }\n\n        // Calculate domain size N of inverses\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory denominatorInverses;\n        for (uint256 i = 0; i < BATCHED_RELATION_PARTIAL_LENGTH; ++i) {\n            Fr inv = BARYCENTRIC_LAGRANGE_DENOMINATORS[i];\n            inv = inv * (roundChallenge - Fr.wrap(i));\n            inv = FrLib.invert(inv);\n            denominatorInverses[i] = inv;\n        }\n\n        for (uint256 i = 0; i < BATCHED_RELATION_PARTIAL_LENGTH; ++i) {\n            Fr term = roundUnivariates[i];\n            term = term * denominatorInverses[i];\n            targetSum = targetSum + term;\n        }\n\n        // Scale the sum by the value of B(x)\n        targetSum = targetSum * numeratorValue;\n    }\n\n    // Univariate evaluation of the monomial ((1-X_l) + X_l.B_l) at the challenge point X_l=u_l\n    function partiallyEvaluatePOW(Fr gateChallenge, Fr currentEvaluation, Fr roundChallenge)\n        internal\n        pure\n        returns (Fr newEvaluation)\n    {\n        Fr univariateEval = Fr.wrap(1) + (roundChallenge * (gateChallenge - Fr.wrap(1)));\n        newEvaluation = currentEvaluation * univariateEval;\n    }\n\n    function verifyShplemini(Honk.Proof memory proof, Honk.VerificationKey memory vk, Transcript memory tp)\n        internal\n        view\n        returns (bool verified)\n    {\n        ShpleminiIntermediates memory mem; // stack\n\n        // - Compute vector (r, r², ... , r²⁽ⁿ⁻¹⁾), where n = log_circuit_size\n        Fr[CONST_PROOF_SIZE_LOG_N] memory powers_of_evaluation_challenge = CommitmentSchemeLib.computeSquares(tp.geminiR);\n\n        // Arrays hold values that will be linearly combined for the gemini and shplonk batch openings\n        Fr[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory scalars;\n        Honk.G1Point[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory commitments;\n\n        mem.posInvertedDenominator = (tp.shplonkZ - powers_of_evaluation_challenge[0]).invert();\n        mem.negInvertedDenominator = (tp.shplonkZ + powers_of_evaluation_challenge[0]).invert();\n\n        mem.unshiftedScalar = mem.posInvertedDenominator + (tp.shplonkNu * mem.negInvertedDenominator);\n        mem.shiftedScalar =\n            tp.geminiR.invert() * (mem.posInvertedDenominator - (tp.shplonkNu * mem.negInvertedDenominator));\n\n        scalars[0] = Fr.wrap(1);\n        commitments[0] = convertProofPoint(proof.shplonkQ);\n\n        mem.batchingChallenge = Fr.wrap(1);\n        mem.batchedEvaluation = Fr.wrap(0);\n\n        for (uint256 i = 1; i <= NUMBER_UNSHIFTED; ++i) {\n            scalars[i] = mem.unshiftedScalar.neg() * mem.batchingChallenge;\n            mem.batchedEvaluation = mem.batchedEvaluation + (proof.sumcheckEvaluations[i - 1] * mem.batchingChallenge);\n            mem.batchingChallenge = mem.batchingChallenge * tp.rho;\n        }\n        // g commitments are accumulated at r\n        for (uint256 i = NUMBER_UNSHIFTED + 1; i <= NUMBER_OF_ENTITIES; ++i) {\n            scalars[i] = mem.shiftedScalar.neg() * mem.batchingChallenge;\n            mem.batchedEvaluation = mem.batchedEvaluation + (proof.sumcheckEvaluations[i - 1] * mem.batchingChallenge);\n            mem.batchingChallenge = mem.batchingChallenge * tp.rho;\n        }\n\n        commitments[1] = vk.qm;\n        commitments[2] = vk.qc;\n        commitments[3] = vk.ql;\n        commitments[4] = vk.qr;\n        commitments[5] = vk.qo;\n        commitments[6] = vk.q4;\n        commitments[7] = vk.qLookup;\n        commitments[8] = vk.qArith;\n        commitments[9] = vk.qDeltaRange;\n        commitments[10] = vk.qElliptic;\n        commitments[11] = vk.qAux;\n        commitments[12] = vk.qPoseidon2External;\n        commitments[13] = vk.qPoseidon2Internal;\n        commitments[14] = vk.s1;\n        commitments[15] = vk.s2;\n        commitments[16] = vk.s3;\n        commitments[17] = vk.s4;\n        commitments[18] = vk.id1;\n        commitments[19] = vk.id2;\n        commitments[20] = vk.id3;\n        commitments[21] = vk.id4;\n        commitments[22] = vk.t1;\n        commitments[23] = vk.t2;\n        commitments[24] = vk.t3;\n        commitments[25] = vk.t4;\n        commitments[26] = vk.lagrangeFirst;\n        commitments[27] = vk.lagrangeLast;\n\n        // Accumulate proof points\n        commitments[28] = convertProofPoint(proof.w1);\n        commitments[29] = convertProofPoint(proof.w2);\n        commitments[30] = convertProofPoint(proof.w3);\n        commitments[31] = convertProofPoint(proof.w4);\n        commitments[32] = convertProofPoint(proof.zPerm);\n        commitments[33] = convertProofPoint(proof.lookupInverses);\n        commitments[34] = convertProofPoint(proof.lookupReadCounts);\n        commitments[35] = convertProofPoint(proof.lookupReadTags);\n\n        // to be Shifted\n        commitments[36] = convertProofPoint(proof.w1);\n        commitments[37] = convertProofPoint(proof.w2);\n        commitments[38] = convertProofPoint(proof.w3);\n        commitments[39] = convertProofPoint(proof.w4);\n        commitments[40] = convertProofPoint(proof.zPerm);\n\n        // Add contributions from A₀(r) and A₀(-r) to constant_term_accumulator:\n        // Compute the evaluations A_l(r^{2^l}) for l = 0, ..., logN - 1\n        Fr[CONST_PROOF_SIZE_LOG_N] memory foldPosEvaluations = CommitmentSchemeLib.computeFoldPosEvaluations(\n            tp.sumCheckUChallenges,\n            mem.batchedEvaluation,\n            proof.geminiAEvaluations,\n            powers_of_evaluation_challenge,\n            logN\n        );\n\n        // Compute the Shplonk constant term contributions from A₀(±r)\n        mem.constantTermAccumulator = foldPosEvaluations[0] * mem.posInvertedDenominator;\n        mem.constantTermAccumulator =\n            mem.constantTermAccumulator + (proof.geminiAEvaluations[0] * tp.shplonkNu * mem.negInvertedDenominator);\n        mem.batchingChallenge = tp.shplonkNu.sqr();\n\n        // Compute Shplonk constant term contributions from Aₗ(±r^{2ˡ}) for l = 1, ..., m-1;\n        // Compute scalar multipliers for each fold commitment\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; ++i) {\n            bool dummy_round = i >= (logN - 1);\n\n            if (!dummy_round) {\n                // Update inverted denominators\n                mem.posInvertedDenominator = (tp.shplonkZ - powers_of_evaluation_challenge[i + 1]).invert();\n                mem.negInvertedDenominator = (tp.shplonkZ + powers_of_evaluation_challenge[i + 1]).invert();\n\n                // Compute the scalar multipliers for Aₗ(± r^{2ˡ}) and [Aₗ]\n                mem.scalingFactorPos = mem.batchingChallenge * mem.posInvertedDenominator;\n                mem.scalingFactorNeg = mem.batchingChallenge * tp.shplonkNu * mem.negInvertedDenominator;\n                // [Aₗ] is multiplied by -v^{2l}/(z-r^{2^l}) - v^{2l+1} /(z+ r^{2^l})\n                scalars[NUMBER_OF_ENTITIES + 1 + i] = mem.scalingFactorNeg.neg() + mem.scalingFactorPos.neg();\n\n                // Accumulate the const term contribution given by\n                // v^{2l} * Aₗ(r^{2ˡ}) /(z-r^{2^l}) + v^{2l+1} * Aₗ(-r^{2ˡ}) /(z+ r^{2^l})\n                Fr accumContribution = mem.scalingFactorNeg * proof.geminiAEvaluations[i + 1];\n                accumContribution = accumContribution + mem.scalingFactorPos * foldPosEvaluations[i + 1];\n                mem.constantTermAccumulator = mem.constantTermAccumulator + accumContribution;\n                // Update the running power of v\n                mem.batchingChallenge = mem.batchingChallenge * tp.shplonkNu * tp.shplonkNu;\n            }\n\n            commitments[NUMBER_OF_ENTITIES + 1 + i] = convertProofPoint(proof.geminiFoldComms[i]);\n        }\n\n        // Finalise the batch opening claim\n        commitments[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N] = Honk.G1Point({x: 1, y: 2});\n        scalars[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N] = mem.constantTermAccumulator;\n\n        Honk.G1Point memory quotient_commitment = convertProofPoint(proof.kzgQuotient);\n\n        commitments[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 1] = quotient_commitment;\n        scalars[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 1] = tp.shplonkZ; // evaluation challenge\n\n        Honk.G1Point memory P_0 = batchMul(commitments, scalars);\n        Honk.G1Point memory P_1 = negateInplace(quotient_commitment);\n\n        return pairing(P_0, P_1);\n    }\n\n    // This implementation is the same as above with different constants\n    function batchMul(\n        Honk.G1Point[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory base,\n        Fr[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory scalars\n    ) internal view returns (Honk.G1Point memory result) {\n        uint256 limit = NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2;\n        assembly {\n            let success := 0x01\n            let free := mload(0x40)\n\n            // Write the original into the accumulator\n            // Load into memory for ecMUL, leave offset for eccAdd result\n            // base is an array of pointers, so we have to dereference them\n            mstore(add(free, 0x40), mload(mload(base)))\n            mstore(add(free, 0x60), mload(add(0x20, mload(base))))\n            // Add scalar\n            mstore(add(free, 0x80), mload(scalars))\n            success := and(success, staticcall(gas(), 7, add(free, 0x40), 0x60, free, 0x40))\n\n            let count := 0x01\n            for {} lt(count, limit) { count := add(count, 1) } {\n                // Get loop offsets\n                let base_base := add(base, mul(count, 0x20))\n                let scalar_base := add(scalars, mul(count, 0x20))\n\n                mstore(add(free, 0x40), mload(mload(base_base)))\n                mstore(add(free, 0x60), mload(add(0x20, mload(base_base))))\n                // Add scalar\n                mstore(add(free, 0x80), mload(scalar_base))\n\n                success := and(success, staticcall(gas(), 7, add(free, 0x40), 0x60, add(free, 0x40), 0x40))\n                // accumulator = accumulator + accumulator_2\n                success := and(success, staticcall(gas(), 6, free, 0x80, free, 0x40))\n            }\n\n            // Return the result - i hate this\n            mstore(result, mload(free))\n            mstore(add(result, 0x20), mload(add(free, 0x20)))\n        }\n    }\n}\n\ncontract TransferVerifier is BaseHonkVerifier(N, LOG_N, NUMBER_OF_PUBLIC_INPUTS) {\n     function loadVerificationKey() internal pure override returns (Honk.VerificationKey memory) {\n       return HonkVerificationKey.loadVerificationKey();\n    }\n}\n"
    },
    "contracts/verifiers/WarpVerifier.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n// Copyright 2022 Aztec\npragma solidity >=0.8.21;\n\nuint256 constant N = 65536;\nuint256 constant LOG_N = 16;\nuint256 constant NUMBER_OF_PUBLIC_INPUTS = 13;\nlibrary HonkVerificationKey {\n    function loadVerificationKey() internal pure returns (Honk.VerificationKey memory) {\n        Honk.VerificationKey memory vk = Honk.VerificationKey({\n            circuitSize: uint256(65536),\n            logCircuitSize: uint256(16),\n            publicInputsSize: uint256(13),\n            ql: Honk.G1Point({ \n               x: uint256(0x1ce5284e57eec1da9390f763be54c15ebcc9511c2bc8d0fe967b6471d5a49db4),\n               y: uint256(0x17327f894a0fc388fd74f65d5a69fe840a857bb5367f0af61f844068c85cbcab)\n            }),\n            qr: Honk.G1Point({ \n               x: uint256(0x01f7756c8407551613a6557a694ff4092a6d1cae5279753b0b2568059efda594),\n               y: uint256(0x099d2de120befdfa7c86d1ac1ee7de000342948ef7e71e8c29d38ab9a4eedaae)\n            }),\n            qo: Honk.G1Point({ \n               x: uint256(0x2ac0b616d4f90412247f352b2316f28190ae20ba24cfa0559430a811e74be8de),\n               y: uint256(0x016648857a68a54a015d7d00bbf0d0bf6a883141a07df9cbf22dd71045d60584)\n            }),\n            q4: Honk.G1Point({ \n               x: uint256(0x2e2bf195f49357aa0feb52d610a4be7c379a61e8e7f5ba7ff5855c87fd9587a2),\n               y: uint256(0x1900a6abd1f46261f7420c6da1811adf4d51678f9d177b2d89b81857c2ae3bbd)\n            }),\n            qm: Honk.G1Point({ \n               x: uint256(0x013b87da999be2eb27cefc2d18d8dcc23da9b6fa0f1e71ae472defac67283990),\n               y: uint256(0x08baeb05244c55b36905d963cb2758dded02b0112ec6f7344d9d4d34b4386cb4)\n            }),\n            qc: Honk.G1Point({ \n               x: uint256(0x2af0a51c1df728b06fcd22ac53b1e9b415a4559b8394b6dc3f925c3dcbe2f529),\n               y: uint256(0x0ce5afea23c8634da3281b1f4fb5940f46ddf42ca431273fe312382c885d2aac)\n            }),\n            qArith: Honk.G1Point({ \n               x: uint256(0x1a4babb4de86b7107d2f365732c011cfd25d72fee62caed957c256630aa926d6),\n               y: uint256(0x02281a8a3a9c0e34f82b4590ac1c84ffcc9e55f8ec04dec3f7951f61ff7849d0)\n            }),\n            qDeltaRange: Honk.G1Point({ \n               x: uint256(0x1e1edaecd36dd220dda81f1375f23f5a6723af391d8fbc61292a332eb808c4f6),\n               y: uint256(0x14d9e2bb53a9f54496670f3f0dc07d64fcf2d4664e55eb76ad683ada3193306b)\n            }),\n            qElliptic: Honk.G1Point({ \n               x: uint256(0x09ab42c6175cc1d611f5067f3343c3948689c7d5d34ce9c37121ee7f33e80acb),\n               y: uint256(0x0753a5089d10651a07d908418bcca07673e4d0004cdce4a6452419ddd80a17aa)\n            }),\n            qAux: Honk.G1Point({ \n               x: uint256(0x0c61853d79cba01a0051b496804eb59744477b11ef651ca7d443e1f379c3679b),\n               y: uint256(0x264d8f182b29e97472807954cf78b2fb0aaca11d894e4377b2262946605b1207)\n            }),\n            qLookup: Honk.G1Point({ \n               x: uint256(0x2ccf97777978aa36adcdd05588e03d4de649085cda7fe019d46d0ec179c56274),\n               y: uint256(0x0973ebba2ca18abf3ad084c6fc0c7ef2dccadbc4f0cb96e4c98e950a23e2b847)\n            }),\n            qPoseidon2External: Honk.G1Point({ \n               x: uint256(0x0a78d787ca41356d680e3b40d1f6abeb3875792a0161a78d60e2e656a94bfda5),\n               y: uint256(0x0565ced95de885ae641285c4ed01ec662544640f059206940c46dc0112c3afe3)\n            }),\n            qPoseidon2Internal: Honk.G1Point({ \n               x: uint256(0x11c2beff37b28a9a0ac8b4e8769654529bf2f00e835c3b06174dd10b522cf38e),\n               y: uint256(0x116e051d3ff0e148b17bbeff87ed952d9b9f4e1805b4fdd5c094c4609a23e647)\n            }),\n            s1: Honk.G1Point({ \n               x: uint256(0x2b9112266371ac3a4621c2cacdbaafa864adf13e28a6e51e51326b25c13ca927),\n               y: uint256(0x29b23d51fd5d69736f72fb677d1984d6a8c35b3a5fa12adbde849057a5978480)\n            }),\n            s2: Honk.G1Point({ \n               x: uint256(0x0a9d3125792e07136651aad0cc0ecb4fcfe409503e374ef04755bb0c4b99f5ee),\n               y: uint256(0x2c0535a17f3985cff93643f43f23d18416eb9cbc06321096ad3e54e4e0defccf)\n            }),\n            s3: Honk.G1Point({ \n               x: uint256(0x18b96748b6c6908b8600182107ed8984b7d1759804eb883eeb0d6c8a3f3cc72d),\n               y: uint256(0x1106380602c0ad3ada9e3ba9240be442b10c73843fce276f68117d3c86f8d066)\n            }),\n            s4: Honk.G1Point({ \n               x: uint256(0x1ef88d9a16d9f6c0ddb090a6ecf7f7dcc4ff93f83d0bada7c4426d545d7544ee),\n               y: uint256(0x02f2b9d56eb9d923aa6018c79322799095ea9328906dd1a2bad6a46e1dfb32c6)\n            }),\n            t1: Honk.G1Point({ \n               x: uint256(0x2556e21486b5f6bd26f6c94db4b13368c505935644a97aa5e01aef1bb48a8c9b),\n               y: uint256(0x2c1f41f10952cec3566549ee86a528106e4441bbe766efbf0f2c5132c050ea86)\n            }),\n            t2: Honk.G1Point({ \n               x: uint256(0x2ab362ed7eca1658a620dc13c7c5afc7bf6fe13868b80beca9b2da2a058ce81a),\n               y: uint256(0x2075d4f79b05b78ab63c7c9ed02a8667658d8459dd5ed2598ea1364481f76d3a)\n            }),\n            t3: Honk.G1Point({ \n               x: uint256(0x057de5b29539e1d9385cb36aec6c0999e96da37647f1dae9abb090242e86f349),\n               y: uint256(0x0313b277a78d70906d8b77fc8429a445a7e47116d4fd881a8989ec7bc5fc9248)\n            }),\n            t4: Honk.G1Point({ \n               x: uint256(0x2002681bb417184b2df070a16a38589ce1faac6f8de6ebb18f1db17372c82ad5),\n               y: uint256(0x0be0064399c2a1efff9eb0cdcb2223161baa651a8092e0e84725594de5aba511)\n            }),\n            id1: Honk.G1Point({ \n               x: uint256(0x02edc30e825dcbca9cf927da1f9d94953b907c9edbd4a59b69b69afc2da512eb),\n               y: uint256(0x2ac7c2a7662f9e63a7306e21105e5f99d0e5ea1b99137b2c2333e532a085e737)\n            }),\n            id2: Honk.G1Point({ \n               x: uint256(0x2bd34de330da6a84ab0b67f0bfe66dc28df19bc42c15cbfb69d6ff73e96d5d00),\n               y: uint256(0x2731729f2d082cbde2d0d0cf3bbf9f29e6a6fa27ad965cd6f60556fa94d43d0e)\n            }),\n            id3: Honk.G1Point({ \n               x: uint256(0x1c390ea4deec29f5dc0e42ea75fb0b2035e50802ee926ad372108546611e1c5e),\n               y: uint256(0x23f6be6d39d419a40a4a577b7b5cf69985f37d591210a23f60facf710764b562)\n            }),\n            id4: Honk.G1Point({ \n               x: uint256(0x24061c7c7ec8b047df7923cbe5a954c0b9b8af8c070711c06e5951b550ae3e12),\n               y: uint256(0x087222c70c9e82edc154234ac3d7644e20a94b0b73a8077b86b6d71d03749b82)\n            }),\n            lagrangeFirst: Honk.G1Point({ \n               x: uint256(0x0000000000000000000000000000000000000000000000000000000000000001),\n               y: uint256(0x0000000000000000000000000000000000000000000000000000000000000002)\n            }),\n            lagrangeLast: Honk.G1Point({ \n               x: uint256(0x0c2255ea79e0493755b109f9cdc3fdeae17b367b9db741161893501fa267c59d),\n               y: uint256(0x192f1cdc56f383d16a0c52b09b46b578f11fc3e530e3a9224637703a59daa08a)\n            })\n        });\n        return vk;\n    }\n}\n\npragma solidity ^0.8.27;\n\ntype Fr is uint256;\n\nusing { add as + } for Fr global;\nusing { sub as - } for Fr global;\nusing { mul as * } for Fr global;\nusing { exp as ^ } for Fr global;\nusing { notEqual as != } for Fr global;\nusing { equal as == } for Fr global;\n\nuint256 constant MODULUS =\n    21888242871839275222246405745257275088548364400416034343698204186575808495617; // Prime field order\n\nFr constant MINUS_ONE = Fr.wrap(MODULUS - 1);\n\n// Instantiation\nlibrary FrLib\n{\n    function from(uint256 value) internal pure returns(Fr)\n    {\n        return Fr.wrap(value % MODULUS);\n    }\n\n    function fromBytes32(bytes32 value) internal pure returns(Fr)\n    {\n        return Fr.wrap(uint256(value) % MODULUS);\n    }\n\n    function toBytes32(Fr value) internal pure returns(bytes32)\n    {\n        return bytes32(Fr.unwrap(value));\n    }\n\n    function invert(Fr value) internal view returns(Fr)\n    {\n        uint256 v = Fr.unwrap(value);\n        uint256 result;\n\n        // Call the modexp precompile to invert in the field\n        assembly\n        {\n            let free := mload(0x40)\n            mstore(free, 0x20)\n            mstore(add(free, 0x20), 0x20)\n            mstore(add(free, 0x40), 0x20)\n            mstore(add(free, 0x60), v)\n            mstore(add(free, 0x80), sub(MODULUS, 2))\n            mstore(add(free, 0xa0), MODULUS)\n            let success := staticcall(gas(), 0x05, free, 0xc0, 0x00, 0x20)\n            if iszero(success) {\n                revert(0, 0)\n            }\n            result := mload(0x00)\n        }\n\n        return Fr.wrap(result);\n    }\n\n    function pow(Fr base, uint256 v) internal view returns(Fr)\n    {\n        uint256 b = Fr.unwrap(base);\n        uint256 result;\n\n        // Call the modexp precompile to invert in the field\n        assembly\n        {\n            let free := mload(0x40)\n            mstore(free, 0x20)\n            mstore(add(free, 0x20), 0x20)\n            mstore(add(free, 0x40), 0x20)\n            mstore(add(free, 0x60), b)\n            mstore(add(free, 0x80), v)\n            mstore(add(free, 0xa0), MODULUS)\n            let success := staticcall(gas(), 0x05, free, 0xc0, 0x00, 0x20)\n            if iszero(success) {\n                revert(0, 0)\n            }\n            result := mload(0x00)\n        }\n\n        return Fr.wrap(result);\n    }\n\n    function div(Fr numerator, Fr denominator) internal view returns(Fr)\n    {\n        return numerator * invert(denominator);\n    }\n\n    function sqr(Fr value) internal pure returns (Fr) {\n        return value * value;\n    }\n\n    function unwrap(Fr value) internal pure returns (uint256) {\n        return Fr.unwrap(value);\n    }\n\n    function neg(Fr value) internal pure returns (Fr) {\n        return Fr.wrap(MODULUS - Fr.unwrap(value));\n    }\n}\n\n// Free functions\nfunction add(Fr a, Fr b) pure returns(Fr)\n{\n    return Fr.wrap(addmod(Fr.unwrap(a), Fr.unwrap(b), MODULUS));\n}\n\nfunction mul(Fr a, Fr b) pure returns(Fr)\n{\n    return Fr.wrap(mulmod(Fr.unwrap(a), Fr.unwrap(b), MODULUS));\n}\n\nfunction sub(Fr a, Fr b) pure returns(Fr)\n{\n    return Fr.wrap(addmod(Fr.unwrap(a), MODULUS - Fr.unwrap(b), MODULUS));\n}\n\nfunction exp(Fr base, Fr exponent) pure returns(Fr)\n{\n    if (Fr.unwrap(exponent) == 0) return Fr.wrap(1);\n\n    for (uint256 i = 1; i < Fr.unwrap(exponent); i += i) {\n        base = base * base;\n    }\n    return base;\n}\n\nfunction notEqual(Fr a, Fr b) pure returns(bool)\n{\n    return Fr.unwrap(a) != Fr.unwrap(b);\n}\n\nfunction equal(Fr a, Fr b) pure returns(bool)\n{\n    return Fr.unwrap(a) == Fr.unwrap(b);\n}\n\nuint256 constant CONST_PROOF_SIZE_LOG_N = 28;\n\nuint256 constant NUMBER_OF_SUBRELATIONS = 26;\nuint256 constant BATCHED_RELATION_PARTIAL_LENGTH = 8;\nuint256 constant NUMBER_OF_ENTITIES = 40;\nuint256 constant NUMBER_UNSHIFTED = 35;\nuint256 constant NUMBER_TO_BE_SHIFTED = 5;\n\n// Alphas are used as relation separators so there should be NUMBER_OF_SUBRELATIONS - 1\nuint256 constant NUMBER_OF_ALPHAS = 25;\n\n// Prime field order\nuint256 constant Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583; // EC group order. F_q\nuint256 constant P = 21888242871839275222246405745257275088548364400416034343698204186575808495617; // Prime field order, F_r\n\n// ENUM FOR WIRES\nenum WIRE {\n    Q_M,\n    Q_C,\n    Q_L,\n    Q_R,\n    Q_O,\n    Q_4,\n    Q_LOOKUP,\n    Q_ARITH,\n    Q_RANGE,\n    Q_ELLIPTIC,\n    Q_AUX,\n    Q_POSEIDON2_EXTERNAL,\n    Q_POSEIDON2_INTERNAL,\n    SIGMA_1,\n    SIGMA_2,\n    SIGMA_3,\n    SIGMA_4,\n    ID_1,\n    ID_2,\n    ID_3,\n    ID_4,\n    TABLE_1,\n    TABLE_2,\n    TABLE_3,\n    TABLE_4,\n    LAGRANGE_FIRST,\n    LAGRANGE_LAST,\n    W_L,\n    W_R,\n    W_O,\n    W_4,\n    Z_PERM,\n    LOOKUP_INVERSES,\n    LOOKUP_READ_COUNTS,\n    LOOKUP_READ_TAGS,\n    W_L_SHIFT,\n    W_R_SHIFT,\n    W_O_SHIFT,\n    W_4_SHIFT,\n    Z_PERM_SHIFT\n}\n\nlibrary Honk {\n    struct G1Point {\n        uint256 x;\n        uint256 y;\n    }\n\n    struct G1ProofPoint {\n        uint256 x_0;\n        uint256 x_1;\n        uint256 y_0;\n        uint256 y_1;\n    }\n\n    struct VerificationKey {\n        // Misc Params\n        uint256 circuitSize;\n        uint256 logCircuitSize;\n        uint256 publicInputsSize;\n        // Selectors\n        G1Point qm;\n        G1Point qc;\n        G1Point ql;\n        G1Point qr;\n        G1Point qo;\n        G1Point q4;\n        G1Point qLookup; // Lookup\n        G1Point qArith; // Arithmetic widget\n        G1Point qDeltaRange; // Delta Range sort\n        G1Point qAux; // Auxillary\n        G1Point qElliptic; // Auxillary\n        G1Point qPoseidon2External;\n        G1Point qPoseidon2Internal;\n        // Copy cnstraints\n        G1Point s1;\n        G1Point s2;\n        G1Point s3;\n        G1Point s4;\n        // Copy identity\n        G1Point id1;\n        G1Point id2;\n        G1Point id3;\n        G1Point id4;\n        // Precomputed lookup table\n        G1Point t1;\n        G1Point t2;\n        G1Point t3;\n        G1Point t4;\n        // Fixed first and last\n        G1Point lagrangeFirst;\n        G1Point lagrangeLast;\n    }\n\n    struct RelationParameters {\n        // challenges\n        Fr eta;\n        Fr etaTwo;\n        Fr etaThree;\n        Fr beta;\n        Fr gamma;\n        // derived\n        Fr publicInputsDelta;\n    }\n\n\n    struct Proof {\n        // Free wires\n        Honk.G1ProofPoint w1;\n        Honk.G1ProofPoint w2;\n        Honk.G1ProofPoint w3;\n        Honk.G1ProofPoint w4;\n        // Lookup helpers - Permutations\n        Honk.G1ProofPoint zPerm;\n        // Lookup helpers - logup\n        Honk.G1ProofPoint lookupReadCounts;\n        Honk.G1ProofPoint lookupReadTags;\n        Honk.G1ProofPoint lookupInverses;\n        // Sumcheck\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH][CONST_PROOF_SIZE_LOG_N] sumcheckUnivariates;\n        Fr[NUMBER_OF_ENTITIES] sumcheckEvaluations;\n        // Shplemini\n        Honk.G1ProofPoint[CONST_PROOF_SIZE_LOG_N - 1] geminiFoldComms;\n        Fr[CONST_PROOF_SIZE_LOG_N] geminiAEvaluations;\n        Honk.G1ProofPoint shplonkQ;\n        Honk.G1ProofPoint kzgQuotient;\n    }\n}\n\n// Transcript library to generate fiat shamir challenges\nstruct Transcript {\n    // Oink\n    Honk.RelationParameters relationParameters;\n    Fr[NUMBER_OF_ALPHAS] alphas;\n    Fr[CONST_PROOF_SIZE_LOG_N] gateChallenges;\n    // Sumcheck\n    Fr[CONST_PROOF_SIZE_LOG_N] sumCheckUChallenges;\n    // Gemini\n    Fr rho;\n    Fr geminiR;\n    // Shplonk\n    Fr shplonkNu;\n    Fr shplonkZ;\n}\n\nlibrary TranscriptLib {\n    function generateTranscript(Honk.Proof memory proof, bytes32[] calldata publicInputs, uint256 circuitSize, uint256 publicInputsSize, uint256 pubInputsOffset)\n        internal\n        pure\n        returns (Transcript memory t)\n    {\n        Fr previousChallenge;\n        (t.relationParameters, previousChallenge) =\n            generateRelationParametersChallenges(proof, publicInputs, circuitSize, publicInputsSize, pubInputsOffset, previousChallenge);\n\n        (t.alphas, previousChallenge) = generateAlphaChallenges(previousChallenge, proof);\n\n        (t.gateChallenges, previousChallenge) = generateGateChallenges(previousChallenge);\n\n        (t.sumCheckUChallenges, previousChallenge) = generateSumcheckChallenges(proof, previousChallenge);\n\n        (t.rho, previousChallenge) = generateRhoChallenge(proof, previousChallenge);\n\n        (t.geminiR, previousChallenge) = generateGeminiRChallenge(proof, previousChallenge);\n\n        (t.shplonkNu, previousChallenge) = generateShplonkNuChallenge(proof, previousChallenge);\n\n        (t.shplonkZ, previousChallenge) = generateShplonkZChallenge(proof, previousChallenge);\n\n        return t;\n    }\n\n    function splitChallenge(Fr challenge) internal pure returns (Fr first, Fr second) {\n        uint256 challengeU256 = uint256(Fr.unwrap(challenge));\n        uint256 lo = challengeU256 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n        uint256 hi = challengeU256 >> 128;\n        first = FrLib.fromBytes32(bytes32(lo));\n        second = FrLib.fromBytes32(bytes32(hi));\n    }\n\n    function generateRelationParametersChallenges(\n        Honk.Proof memory proof,\n        bytes32[] calldata publicInputs,\n        uint256 circuitSize,\n        uint256 publicInputsSize,\n        uint256 pubInputsOffset,\n        Fr previousChallenge\n    ) internal pure returns (Honk.RelationParameters memory rp, Fr nextPreviousChallenge) {\n        (rp.eta, rp.etaTwo, rp.etaThree, previousChallenge) =\n            generateEtaChallenge(proof, publicInputs, circuitSize, publicInputsSize, pubInputsOffset);\n\n        (rp.beta, rp.gamma, nextPreviousChallenge) = generateBetaAndGammaChallenges(previousChallenge, proof);\n\n    }\n\n    function generateEtaChallenge(Honk.Proof memory proof, bytes32[] calldata publicInputs, uint256 circuitSize, uint256 publicInputsSize, uint256 pubInputsOffset)\n        internal\n        pure\n        returns (Fr eta, Fr etaTwo, Fr etaThree, Fr previousChallenge)\n    {\n        bytes32[] memory round0 = new bytes32[](3 + publicInputsSize + 12);\n        round0[0] = bytes32(circuitSize);\n        round0[1] = bytes32(publicInputsSize);\n        round0[2] = bytes32(pubInputsOffset);\n        for (uint256 i = 0; i < publicInputsSize; i++) {\n            round0[3 + i] = bytes32(publicInputs[i]);\n        }\n\n        // Create the first challenge\n        // Note: w4 is added to the challenge later on\n        round0[3 + publicInputsSize] = bytes32(proof.w1.x_0);\n        round0[3 + publicInputsSize + 1] = bytes32(proof.w1.x_1);\n        round0[3 + publicInputsSize + 2] = bytes32(proof.w1.y_0);\n        round0[3 + publicInputsSize + 3] = bytes32(proof.w1.y_1);\n        round0[3 + publicInputsSize + 4] = bytes32(proof.w2.x_0);\n        round0[3 + publicInputsSize + 5] = bytes32(proof.w2.x_1);\n        round0[3 + publicInputsSize + 6] = bytes32(proof.w2.y_0);\n        round0[3 + publicInputsSize + 7] = bytes32(proof.w2.y_1);\n        round0[3 + publicInputsSize + 8] = bytes32(proof.w3.x_0);\n        round0[3 + publicInputsSize + 9] = bytes32(proof.w3.x_1);\n        round0[3 + publicInputsSize + 10] = bytes32(proof.w3.y_0);\n        round0[3 + publicInputsSize + 11] = bytes32(proof.w3.y_1);\n\n        previousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(round0)));\n        (eta, etaTwo) = splitChallenge(previousChallenge);\n        previousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(previousChallenge))));\n        Fr unused;\n        (etaThree, unused) = splitChallenge(previousChallenge);\n    }\n\n    function generateBetaAndGammaChallenges(Fr previousChallenge, Honk.Proof memory proof)\n        internal\n        pure\n        returns (Fr beta, Fr gamma, Fr nextPreviousChallenge)\n    {\n        bytes32[13] memory round1;\n        round1[0] = FrLib.toBytes32(previousChallenge);\n        round1[1] = bytes32(proof.lookupReadCounts.x_0);\n        round1[2] = bytes32(proof.lookupReadCounts.x_1);\n        round1[3] = bytes32(proof.lookupReadCounts.y_0);\n        round1[4] = bytes32(proof.lookupReadCounts.y_1);\n        round1[5] = bytes32(proof.lookupReadTags.x_0);\n        round1[6] = bytes32(proof.lookupReadTags.x_1);\n        round1[7] = bytes32(proof.lookupReadTags.y_0);\n        round1[8] = bytes32(proof.lookupReadTags.y_1);\n        round1[9] = bytes32(proof.w4.x_0);\n        round1[10] = bytes32(proof.w4.x_1);\n        round1[11] = bytes32(proof.w4.y_0);\n        round1[12] = bytes32(proof.w4.y_1);\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(round1)));\n        (beta, gamma) = splitChallenge(nextPreviousChallenge);\n    }\n\n    // Alpha challenges non-linearise the gate contributions\n    function generateAlphaChallenges(Fr previousChallenge, Honk.Proof memory proof)\n        internal\n        pure\n        returns (Fr[NUMBER_OF_ALPHAS] memory alphas, Fr nextPreviousChallenge)\n    {\n        // Generate the original sumcheck alpha 0 by hashing zPerm and zLookup\n        uint256[9] memory alpha0;\n        alpha0[0] = Fr.unwrap(previousChallenge);\n        alpha0[1] = proof.lookupInverses.x_0;\n        alpha0[2] = proof.lookupInverses.x_1;\n        alpha0[3] = proof.lookupInverses.y_0;\n        alpha0[4] = proof.lookupInverses.y_1;\n        alpha0[5] = proof.zPerm.x_0;\n        alpha0[6] = proof.zPerm.x_1;\n        alpha0[7] = proof.zPerm.y_0;\n        alpha0[8] = proof.zPerm.y_1;\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(alpha0)));\n        (alphas[0], alphas[1]) = splitChallenge(nextPreviousChallenge);\n\n        for (uint256 i = 1; i < NUMBER_OF_ALPHAS / 2; i++) {\n            nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(nextPreviousChallenge))));\n            (alphas[2 * i], alphas[2 * i + 1]) = splitChallenge(nextPreviousChallenge);\n        }\n        if (((NUMBER_OF_ALPHAS & 1) == 1) && (NUMBER_OF_ALPHAS > 2)) {\n            nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(nextPreviousChallenge))));\n            Fr unused;\n            (alphas[NUMBER_OF_ALPHAS - 1], unused) = splitChallenge(nextPreviousChallenge);\n        }\n    }\n\n    function generateGateChallenges(Fr previousChallenge)\n        internal\n        pure\n        returns (Fr[CONST_PROOF_SIZE_LOG_N] memory gateChallenges, Fr nextPreviousChallenge)\n    {\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            previousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(previousChallenge))));\n            Fr unused;\n            (gateChallenges[i], unused) = splitChallenge(previousChallenge);\n        }\n        nextPreviousChallenge = previousChallenge;\n    }\n\n    function generateSumcheckChallenges(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr[CONST_PROOF_SIZE_LOG_N] memory sumcheckChallenges, Fr nextPreviousChallenge)\n    {\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            Fr[BATCHED_RELATION_PARTIAL_LENGTH + 1] memory univariateChal;\n            univariateChal[0] = prevChallenge;\n\n            for (uint256 j = 0; j < BATCHED_RELATION_PARTIAL_LENGTH; j++) {\n                univariateChal[j + 1] = proof.sumcheckUnivariates[i][j];\n            }\n            prevChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(univariateChal)));\n            Fr unused;\n            (sumcheckChallenges[i], unused) = splitChallenge(prevChallenge);\n        }\n        nextPreviousChallenge = prevChallenge;\n    }\n\n    function generateRhoChallenge(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr rho, Fr nextPreviousChallenge)\n    {\n        Fr[NUMBER_OF_ENTITIES + 1] memory rhoChallengeElements;\n        rhoChallengeElements[0] = prevChallenge;\n\n        for (uint256 i = 0; i < NUMBER_OF_ENTITIES; i++) {\n            rhoChallengeElements[i + 1] = proof.sumcheckEvaluations[i];\n        }\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(rhoChallengeElements)));\n        Fr unused;\n        (rho, unused) = splitChallenge(nextPreviousChallenge);\n    }\n\n    function generateGeminiRChallenge(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr geminiR, Fr nextPreviousChallenge)\n    {\n        uint256[(CONST_PROOF_SIZE_LOG_N - 1) * 4 + 1] memory gR;\n        gR[0] = Fr.unwrap(prevChallenge);\n\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; i++) {\n            gR[1 + i * 4] = proof.geminiFoldComms[i].x_0;\n            gR[2 + i * 4] = proof.geminiFoldComms[i].x_1;\n            gR[3 + i * 4] = proof.geminiFoldComms[i].y_0;\n            gR[4 + i * 4] = proof.geminiFoldComms[i].y_1;\n        }\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(gR)));\n        Fr unused;\n        (geminiR, unused) = splitChallenge(nextPreviousChallenge);\n    }\n\n    function generateShplonkNuChallenge(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr shplonkNu, Fr nextPreviousChallenge)\n    {\n        uint256[(CONST_PROOF_SIZE_LOG_N) + 1] memory shplonkNuChallengeElements;\n        shplonkNuChallengeElements[0] = Fr.unwrap(prevChallenge);\n\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            shplonkNuChallengeElements[i + 1] = Fr.unwrap(proof.geminiAEvaluations[i]);\n        }\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(shplonkNuChallengeElements)));\n        Fr unused;\n        (shplonkNu, unused) = splitChallenge(nextPreviousChallenge);\n    }\n\n    function generateShplonkZChallenge(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr shplonkZ, Fr nextPreviousChallenge)\n    {\n        uint256[5] memory shplonkZChallengeElements;\n        shplonkZChallengeElements[0] = Fr.unwrap(prevChallenge);\n\n        shplonkZChallengeElements[1] = proof.shplonkQ.x_0;\n        shplonkZChallengeElements[2] = proof.shplonkQ.x_1;\n        shplonkZChallengeElements[3] = proof.shplonkQ.y_0;\n        shplonkZChallengeElements[4] = proof.shplonkQ.y_1;\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(shplonkZChallengeElements)));\n        Fr unused;\n        (shplonkZ, unused) = splitChallenge(nextPreviousChallenge);\n    }\n\n    function loadProof(bytes calldata proof) internal pure returns (Honk.Proof memory p) {\n        // Commitments\n        p.w1 = bytesToG1ProofPoint(proof[0x0:0x80]);\n\n        p.w2 = bytesToG1ProofPoint(proof[0x80:0x100]);\n        p.w3 = bytesToG1ProofPoint(proof[0x100:0x180]);\n\n        // Lookup / Permutation Helper Commitments\n        p.lookupReadCounts = bytesToG1ProofPoint(proof[0x180:0x200]);\n        p.lookupReadTags = bytesToG1ProofPoint(proof[0x200:0x280]);\n        p.w4 = bytesToG1ProofPoint(proof[0x280:0x300]);\n        p.lookupInverses = bytesToG1ProofPoint(proof[0x300:0x380]);\n        p.zPerm = bytesToG1ProofPoint(proof[0x380:0x400]);\n        uint256 boundary = 0x400;\n\n        // Sumcheck univariates\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            for (uint256 j = 0; j < BATCHED_RELATION_PARTIAL_LENGTH; j++) {\n                p.sumcheckUnivariates[i][j] = bytesToFr(proof[boundary:boundary + 0x20]);\n                boundary += 0x20;\n            }\n        }\n        // Sumcheck evaluations\n        for (uint256 i = 0; i < NUMBER_OF_ENTITIES; i++) {\n            p.sumcheckEvaluations[i] = bytesToFr(proof[boundary:boundary + 0x20]);\n            boundary += 0x20;\n        }\n\n        // Gemini\n        // Read gemini fold univariates\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; i++) {\n            p.geminiFoldComms[i] = bytesToG1ProofPoint(proof[boundary:boundary + 0x80]);\n            boundary += 0x80;\n        }\n\n        // Read gemini a evaluations\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            p.geminiAEvaluations[i] = bytesToFr(proof[boundary:boundary + 0x20]);\n            boundary += 0x20;\n        }\n\n        // Shplonk\n        p.shplonkQ = bytesToG1ProofPoint(proof[boundary:boundary + 0x80]);\n        boundary = boundary + 0x80;\n        // KZG\n        p.kzgQuotient = bytesToG1ProofPoint(proof[boundary:boundary + 0x80]);\n    }\n}\n\n\n// Fr utility\n\nfunction bytesToFr(bytes calldata proofSection) pure returns (Fr scalar) {\n    require(proofSection.length == 0x20, \"invalid bytes scalar\");\n    scalar = FrLib.fromBytes32(bytes32(proofSection));\n}\n\n// EC Point utilities\nfunction convertProofPoint(Honk.G1ProofPoint memory input) pure returns (Honk.G1Point memory) {\n    return Honk.G1Point({x: input.x_0 | (input.x_1 << 136), y: input.y_0 | (input.y_1 << 136)});\n}\n\nfunction bytesToG1ProofPoint(bytes calldata proofSection) pure returns (Honk.G1ProofPoint memory point) {\n    require(proofSection.length == 0x80, \"invalid bytes point\");\n    point = Honk.G1ProofPoint({\n        x_0: uint256(bytes32(proofSection[0x00:0x20])),\n        x_1: uint256(bytes32(proofSection[0x20:0x40])),\n        y_0: uint256(bytes32(proofSection[0x40:0x60])),\n        y_1: uint256(bytes32(proofSection[0x60:0x80]))\n    });\n}\n\nfunction negateInplace(Honk.G1Point memory point) pure returns (Honk.G1Point memory) {\n    point.y = (Q - point.y) % Q;\n    return point;\n}\n\n function pairing(Honk.G1Point memory rhs, Honk.G1Point memory lhs) view returns (bool) {\n        bytes memory input = abi.encodePacked(\n            rhs.x,\n            rhs.y,\n            // Fixed G1 point\n            uint256(0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2),\n            uint256(0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed),\n            uint256(0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b),\n            uint256(0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa),\n            lhs.x,\n            lhs.y,\n            // G1 point from VK\n            uint256(0x260e01b251f6f1c7e7ff4e580791dee8ea51d87a358e038b4efe30fac09383c1),\n            uint256(0x0118c4d5b837bcc2bc89b5b398b5974e9f5944073b32078b7e231fec938883b0),\n            uint256(0x04fc6369f7110fe3d25156c1bb9a72859cf2a04641f99ba4ee413c80da6a5fe4),\n            uint256(0x22febda3c0c0632a56475b4214e5615e11e6dd3f96e6cea2854a87d4dacc5e55)\n        );\n\n        (bool success, bytes memory result) = address(0x08).staticcall(input);\n        bool decodedResult = abi.decode(result, (bool));\n        return success && decodedResult;\n    }\n\n\nlibrary RelationsLib {\n    Fr internal constant GRUMPKIN_CURVE_B_PARAMETER_NEGATED = Fr.wrap(17); // -(-17)\n\n    function accumulateRelationEvaluations(\n         Fr[NUMBER_OF_ENTITIES] memory purportedEvaluations,\n        Honk.RelationParameters memory rp,\n        Fr[NUMBER_OF_ALPHAS] memory alphas,\n        Fr powPartialEval\n    ) internal pure returns (Fr accumulator) {\n        Fr[NUMBER_OF_SUBRELATIONS] memory evaluations;\n\n        // Accumulate all relations in Ultra Honk - each with varying number of subrelations\n        accumulateArithmeticRelation(purportedEvaluations, evaluations, powPartialEval);\n        accumulatePermutationRelation(purportedEvaluations, rp, evaluations, powPartialEval);\n        accumulateLogDerivativeLookupRelation(purportedEvaluations, rp, evaluations, powPartialEval);\n        accumulateDeltaRangeRelation(purportedEvaluations, evaluations, powPartialEval);\n        accumulateEllipticRelation(purportedEvaluations, evaluations, powPartialEval);\n        accumulateAuxillaryRelation(purportedEvaluations, rp, evaluations, powPartialEval);\n        accumulatePoseidonExternalRelation(purportedEvaluations, evaluations, powPartialEval);\n        accumulatePoseidonInternalRelation(purportedEvaluations, evaluations, powPartialEval);\n        // batch the subrelations with the alpha challenges to obtain the full honk relation\n        accumulator = scaleAndBatchSubrelations(evaluations, alphas);\n    }\n\n    /**\n     * Aesthetic helper function that is used to index by enum into proof.sumcheckEvaluations, it avoids\n     * the relation checking code being cluttered with uint256 type casting, which is often a different colour in code\n     * editors, and thus is noisy.\n     */\n    function wire(Fr[NUMBER_OF_ENTITIES] memory p, WIRE _wire) internal pure returns (Fr) {\n        return p[uint256(_wire)];\n    }\n\n    uint256 internal constant NEG_HALF_MODULO_P = 0x183227397098d014dc2822db40c0ac2e9419f4243cdcb848a1f0fac9f8000000;\n    /**\n     * Ultra Arithmetic Relation\n     *\n     */\n    function accumulateArithmeticRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        // Relation 0\n        Fr q_arith = wire(p, WIRE.Q_ARITH);\n        {\n            Fr neg_half = Fr.wrap(NEG_HALF_MODULO_P);\n\n            Fr accum = (q_arith - Fr.wrap(3)) * (wire(p, WIRE.Q_M) * wire(p, WIRE.W_R) * wire(p, WIRE.W_L)) * neg_half;\n            accum = accum + (wire(p, WIRE.Q_L) * wire(p, WIRE.W_L)) + (wire(p, WIRE.Q_R) * wire(p, WIRE.W_R))\n                + (wire(p, WIRE.Q_O) * wire(p, WIRE.W_O)) + (wire(p, WIRE.Q_4) * wire(p, WIRE.W_4)) + wire(p, WIRE.Q_C);\n            accum = accum + (q_arith - Fr.wrap(1)) * wire(p, WIRE.W_4_SHIFT);\n            accum = accum * q_arith;\n            accum = accum * domainSep;\n            evals[0] = accum;\n        }\n\n        // Relation 1\n        {\n            Fr accum = wire(p, WIRE.W_L) + wire(p, WIRE.W_4) - wire(p, WIRE.W_L_SHIFT) + wire(p, WIRE.Q_M);\n            accum = accum * (q_arith - Fr.wrap(2));\n            accum = accum * (q_arith - Fr.wrap(1));\n            accum = accum * q_arith;\n            accum = accum * domainSep;\n            evals[1] = accum;\n        }\n    }\n\n    function accumulatePermutationRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Honk.RelationParameters memory rp,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        Fr grand_product_numerator;\n        Fr grand_product_denominator;\n\n        {\n            Fr num = wire(p, WIRE.W_L) + wire(p, WIRE.ID_1) * rp.beta + rp.gamma;\n            num = num * (wire(p, WIRE.W_R) + wire(p, WIRE.ID_2) * rp.beta + rp.gamma);\n            num = num * (wire(p, WIRE.W_O) + wire(p, WIRE.ID_3) * rp.beta + rp.gamma);\n            num = num * (wire(p, WIRE.W_4) + wire(p, WIRE.ID_4) * rp.beta + rp.gamma);\n\n            grand_product_numerator = num;\n        }\n        {\n            Fr den = wire(p, WIRE.W_L) + wire(p, WIRE.SIGMA_1) * rp.beta + rp.gamma;\n            den = den * (wire(p, WIRE.W_R) + wire(p, WIRE.SIGMA_2) * rp.beta + rp.gamma);\n            den = den * (wire(p, WIRE.W_O) + wire(p, WIRE.SIGMA_3) * rp.beta + rp.gamma);\n            den = den * (wire(p, WIRE.W_4) + wire(p, WIRE.SIGMA_4) * rp.beta + rp.gamma);\n\n            grand_product_denominator = den;\n        }\n\n        // Contribution 2\n        {\n            Fr acc = (wire(p, WIRE.Z_PERM) + wire(p, WIRE.LAGRANGE_FIRST)) * grand_product_numerator;\n\n            acc = acc\n                - (\n                    (wire(p, WIRE.Z_PERM_SHIFT) + (wire(p, WIRE.LAGRANGE_LAST) * rp.publicInputsDelta))\n                        * grand_product_denominator\n                );\n            acc = acc * domainSep;\n            evals[2] = acc;\n        }\n\n        // Contribution 3\n        {\n            Fr acc = (wire(p, WIRE.LAGRANGE_LAST) * wire(p, WIRE.Z_PERM_SHIFT)) * domainSep;\n            evals[3] = acc;\n        }\n    }\n\n    function accumulateLogDerivativeLookupRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Honk.RelationParameters memory rp,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        Fr write_term;\n        Fr read_term;\n\n        // Calculate the write term (the table accumulation)\n        {\n            write_term = wire(p, WIRE.TABLE_1) + rp.gamma + (wire(p, WIRE.TABLE_2) * rp.eta)\n                + (wire(p, WIRE.TABLE_3) * rp.etaTwo) + (wire(p, WIRE.TABLE_4) * rp.etaThree);\n        }\n\n        // Calculate the write term\n        {\n            Fr derived_entry_1 = wire(p, WIRE.W_L) + rp.gamma + (wire(p, WIRE.Q_R) * wire(p, WIRE.W_L_SHIFT));\n            Fr derived_entry_2 = wire(p, WIRE.W_R) + wire(p, WIRE.Q_M) * wire(p, WIRE.W_R_SHIFT);\n            Fr derived_entry_3 = wire(p, WIRE.W_O) + wire(p, WIRE.Q_C) * wire(p, WIRE.W_O_SHIFT);\n\n            read_term = derived_entry_1 + (derived_entry_2 * rp.eta) + (derived_entry_3 * rp.etaTwo)\n                + (wire(p, WIRE.Q_O) * rp.etaThree);\n        }\n\n        Fr read_inverse = wire(p, WIRE.LOOKUP_INVERSES) * write_term;\n        Fr write_inverse = wire(p, WIRE.LOOKUP_INVERSES) * read_term;\n\n        Fr inverse_exists_xor = wire(p, WIRE.LOOKUP_READ_TAGS) + wire(p, WIRE.Q_LOOKUP)\n            - (wire(p, WIRE.LOOKUP_READ_TAGS) * wire(p, WIRE.Q_LOOKUP));\n\n        // Inverse calculated correctly relation\n        Fr accumulatorNone = read_term * write_term * wire(p, WIRE.LOOKUP_INVERSES) - inverse_exists_xor;\n        accumulatorNone = accumulatorNone * domainSep;\n\n        // Inverse\n        Fr accumulatorOne = wire(p, WIRE.Q_LOOKUP) * read_inverse - wire(p, WIRE.LOOKUP_READ_COUNTS) * write_inverse;\n\n        evals[4] = accumulatorNone;\n        evals[5] = accumulatorOne;\n    }\n\n    function accumulateDeltaRangeRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        Fr minus_one = Fr.wrap(0) - Fr.wrap(1);\n        Fr minus_two = Fr.wrap(0) - Fr.wrap(2);\n        Fr minus_three = Fr.wrap(0) - Fr.wrap(3);\n\n        // Compute wire differences\n        Fr delta_1 = wire(p, WIRE.W_R) - wire(p, WIRE.W_L);\n        Fr delta_2 = wire(p, WIRE.W_O) - wire(p, WIRE.W_R);\n        Fr delta_3 = wire(p, WIRE.W_4) - wire(p, WIRE.W_O);\n        Fr delta_4 = wire(p, WIRE.W_L_SHIFT) - wire(p, WIRE.W_4);\n\n        // Contribution 6\n        {\n            Fr acc = delta_1;\n            acc = acc * (delta_1 + minus_one);\n            acc = acc * (delta_1 + minus_two);\n            acc = acc * (delta_1 + minus_three);\n            acc = acc * wire(p, WIRE.Q_RANGE);\n            acc = acc * domainSep;\n            evals[6] = acc;\n        }\n\n        // Contribution 7\n        {\n            Fr acc = delta_2;\n            acc = acc * (delta_2 + minus_one);\n            acc = acc * (delta_2 + minus_two);\n            acc = acc * (delta_2 + minus_three);\n            acc = acc * wire(p, WIRE.Q_RANGE);\n            acc = acc * domainSep;\n            evals[7] = acc;\n        }\n\n        // Contribution 8\n        {\n            Fr acc = delta_3;\n            acc = acc * (delta_3 + minus_one);\n            acc = acc * (delta_3 + minus_two);\n            acc = acc * (delta_3 + minus_three);\n            acc = acc * wire(p, WIRE.Q_RANGE);\n            acc = acc * domainSep;\n            evals[8] = acc;\n        }\n\n        // Contribution 9\n        {\n            Fr acc = delta_4;\n            acc = acc * (delta_4 + minus_one);\n            acc = acc * (delta_4 + minus_two);\n            acc = acc * (delta_4 + minus_three);\n            acc = acc * wire(p, WIRE.Q_RANGE);\n            acc = acc * domainSep;\n            evals[9] = acc;\n        }\n    }\n\n    struct EllipticParams {\n        // Points\n        Fr x_1;\n        Fr y_1;\n        Fr x_2;\n        Fr y_2;\n        Fr y_3;\n        Fr x_3;\n        // push accumulators into memory\n        Fr x_double_identity;\n    }\n\n    function accumulateEllipticRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        EllipticParams memory ep;\n        ep.x_1 = wire(p, WIRE.W_R);\n        ep.y_1 = wire(p, WIRE.W_O);\n\n        ep.x_2 = wire(p, WIRE.W_L_SHIFT);\n        ep.y_2 = wire(p, WIRE.W_4_SHIFT);\n        ep.y_3 = wire(p, WIRE.W_O_SHIFT);\n        ep.x_3 = wire(p, WIRE.W_R_SHIFT);\n\n        Fr q_sign = wire(p, WIRE.Q_L);\n        Fr q_is_double = wire(p, WIRE.Q_M);\n\n        // Contribution 10 point addition, x-coordinate check\n        // q_elliptic * (x3 + x2 + x1)(x2 - x1)(x2 - x1) - y2^2 - y1^2 + 2(y2y1)*q_sign = 0\n        Fr x_diff = (ep.x_2 - ep.x_1);\n        Fr y1_sqr = (ep.y_1 * ep.y_1);\n        {\n            // Move to top\n            Fr partialEval = domainSep;\n\n            Fr y2_sqr = (ep.y_2 * ep.y_2);\n            Fr y1y2 = ep.y_1 * ep.y_2 * q_sign;\n            Fr x_add_identity = (ep.x_3 + ep.x_2 + ep.x_1);\n            x_add_identity = x_add_identity * x_diff * x_diff;\n            x_add_identity = x_add_identity - y2_sqr - y1_sqr + y1y2 + y1y2;\n\n            evals[10] = x_add_identity * partialEval * wire(p, WIRE.Q_ELLIPTIC) * (Fr.wrap(1) - q_is_double);\n        }\n\n        // Contribution 11 point addition, x-coordinate check\n        // q_elliptic * (q_sign * y1 + y3)(x2 - x1) + (x3 - x1)(y2 - q_sign * y1) = 0\n        {\n            Fr y1_plus_y3 = ep.y_1 + ep.y_3;\n            Fr y_diff = ep.y_2 * q_sign - ep.y_1;\n            Fr y_add_identity = y1_plus_y3 * x_diff + (ep.x_3 - ep.x_1) * y_diff;\n            evals[11] = y_add_identity * domainSep * wire(p, WIRE.Q_ELLIPTIC) * (Fr.wrap(1) - q_is_double);\n        }\n\n        // Contribution 10 point doubling, x-coordinate check\n        // (x3 + x1 + x1) (4y1*y1) - 9 * x1 * x1 * x1 * x1 = 0\n        // N.B. we're using the equivalence x1*x1*x1 === y1*y1 - curve_b to reduce degree by 1\n        {\n            Fr x_pow_4 = (y1_sqr + GRUMPKIN_CURVE_B_PARAMETER_NEGATED) * ep.x_1;\n            Fr y1_sqr_mul_4 = y1_sqr + y1_sqr;\n            y1_sqr_mul_4 = y1_sqr_mul_4 + y1_sqr_mul_4;\n            Fr x1_pow_4_mul_9 = x_pow_4 * Fr.wrap(9);\n\n            // NOTE: pushed into memory (stack >:'( )\n            ep.x_double_identity = (ep.x_3 + ep.x_1 + ep.x_1) * y1_sqr_mul_4 - x1_pow_4_mul_9;\n\n            Fr acc = ep.x_double_identity * domainSep * wire(p, WIRE.Q_ELLIPTIC) * q_is_double;\n            evals[10] = evals[10] + acc;\n        }\n\n        // Contribution 11 point doubling, y-coordinate check\n        // (y1 + y1) (2y1) - (3 * x1 * x1)(x1 - x3) = 0\n        {\n            Fr x1_sqr_mul_3 = (ep.x_1 + ep.x_1 + ep.x_1) * ep.x_1;\n            Fr y_double_identity = x1_sqr_mul_3 * (ep.x_1 - ep.x_3) - (ep.y_1 + ep.y_1) * (ep.y_1 + ep.y_3);\n            evals[11] = evals[11] + y_double_identity * domainSep * wire(p, WIRE.Q_ELLIPTIC) * q_is_double;\n        }\n    }\n\n    // Constants for the auxiliary relation\n    Fr constant LIMB_SIZE = Fr.wrap(uint256(1) << 68);\n    Fr constant SUBLIMB_SHIFT = Fr.wrap(uint256(1) << 14);\n\n    // Parameters used within the Auxiliary Relation\n    // A struct is used to work around stack too deep. This relation has alot of variables\n    struct AuxParams {\n        Fr limb_subproduct;\n        Fr non_native_field_gate_1;\n        Fr non_native_field_gate_2;\n        Fr non_native_field_gate_3;\n        Fr limb_accumulator_1;\n        Fr limb_accumulator_2;\n        Fr memory_record_check;\n        Fr partial_record_check;\n        Fr next_gate_access_type;\n        Fr record_delta;\n        Fr index_delta;\n        Fr adjacent_values_match_if_adjacent_indices_match;\n        Fr adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation;\n        Fr access_check;\n        Fr next_gate_access_type_is_boolean;\n        Fr ROM_consistency_check_identity;\n        Fr RAM_consistency_check_identity;\n        Fr timestamp_delta;\n        Fr RAM_timestamp_check_identity;\n        Fr memory_identity;\n        Fr index_is_monotonically_increasing;\n        Fr auxiliary_identity;\n    }\n\n    function accumulateAuxillaryRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Honk.RelationParameters memory rp,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        AuxParams memory ap;\n\n        /**\n         * Contribution 12\n         * Non native field arithmetic gate 2\n         * deg 4\n         *\n         *             _                                                                               _\n         *            /   _                   _                               _       14                \\\n         * q_2 . q_4 |   (w_1 . w_2) + (w_1 . w_2) + (w_1 . w_4 + w_2 . w_3 - w_3) . 2    - w_3 - w_4   |\n         *            \\_                                                                               _/\n         *\n         *\n         */\n        ap.limb_subproduct = wire(p, WIRE.W_L) * wire(p, WIRE.W_R_SHIFT) + wire(p, WIRE.W_L_SHIFT) * wire(p, WIRE.W_R);\n        ap.non_native_field_gate_2 =\n            (wire(p, WIRE.W_L) * wire(p, WIRE.W_4) + wire(p, WIRE.W_R) * wire(p, WIRE.W_O) - wire(p, WIRE.W_O_SHIFT));\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 * LIMB_SIZE;\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 - wire(p, WIRE.W_4_SHIFT);\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 + ap.limb_subproduct;\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 * wire(p, WIRE.Q_4);\n\n        ap.limb_subproduct = ap.limb_subproduct * LIMB_SIZE;\n        ap.limb_subproduct = ap.limb_subproduct + (wire(p, WIRE.W_L_SHIFT) * wire(p, WIRE.W_R_SHIFT));\n        ap.non_native_field_gate_1 = ap.limb_subproduct;\n        ap.non_native_field_gate_1 = ap.non_native_field_gate_1 - (wire(p, WIRE.W_O) + wire(p, WIRE.W_4));\n        ap.non_native_field_gate_1 = ap.non_native_field_gate_1 * wire(p, WIRE.Q_O);\n\n        ap.non_native_field_gate_3 = ap.limb_subproduct;\n        ap.non_native_field_gate_3 = ap.non_native_field_gate_3 + wire(p, WIRE.W_4);\n        ap.non_native_field_gate_3 = ap.non_native_field_gate_3 - (wire(p, WIRE.W_O_SHIFT) + wire(p, WIRE.W_4_SHIFT));\n        ap.non_native_field_gate_3 = ap.non_native_field_gate_3 * wire(p, WIRE.Q_M);\n\n        Fr non_native_field_identity =\n            ap.non_native_field_gate_1 + ap.non_native_field_gate_2 + ap.non_native_field_gate_3;\n        non_native_field_identity = non_native_field_identity * wire(p, WIRE.Q_R);\n\n        // ((((w2' * 2^14 + w1') * 2^14 + w3) * 2^14 + w2) * 2^14 + w1 - w4) * qm\n        // deg 2\n        ap.limb_accumulator_1 = wire(p, WIRE.W_R_SHIFT) * SUBLIMB_SHIFT;\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_L_SHIFT);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_O);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_R);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_L);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 - wire(p, WIRE.W_4);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * wire(p, WIRE.Q_4);\n\n        // ((((w3' * 2^14 + w2') * 2^14 + w1') * 2^14 + w4) * 2^14 + w3 - w4') * qm\n        // deg 2\n        ap.limb_accumulator_2 = wire(p, WIRE.W_O_SHIFT) * SUBLIMB_SHIFT;\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_R_SHIFT);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_L_SHIFT);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_4);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_O);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 - wire(p, WIRE.W_4_SHIFT);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * wire(p, WIRE.Q_M);\n\n        Fr limb_accumulator_identity = ap.limb_accumulator_1 + ap.limb_accumulator_2;\n        limb_accumulator_identity = limb_accumulator_identity * wire(p, WIRE.Q_O); //  deg 3\n\n        /**\n         * MEMORY\n         *\n         * A RAM memory record contains a tuple of the following fields:\n         *  * i: `index` of memory cell being accessed\n         *  * t: `timestamp` of memory cell being accessed (used for RAM, set to 0 for ROM)\n         *  * v: `value` of memory cell being accessed\n         *  * a: `access` type of record. read: 0 = read, 1 = write\n         *  * r: `record` of memory cell. record = access + index * eta + timestamp * eta_two + value * eta_three\n         *\n         * A ROM memory record contains a tuple of the following fields:\n         *  * i: `index` of memory cell being accessed\n         *  * v: `value1` of memory cell being accessed (ROM tables can store up to 2 values per index)\n         *  * v2:`value2` of memory cell being accessed (ROM tables can store up to 2 values per index)\n         *  * r: `record` of memory cell. record = index * eta + value2 * eta_two + value1 * eta_three\n         *\n         *  When performing a read/write access, the values of i, t, v, v2, a, r are stored in the following wires +\n         * selectors, depending on whether the gate is a RAM read/write or a ROM read\n         *\n         *  | gate type | i  | v2/t  |  v | a  | r  |\n         *  | --------- | -- | ----- | -- | -- | -- |\n         *  | ROM       | w1 | w2    | w3 | -- | w4 |\n         *  | RAM       | w1 | w2    | w3 | qc | w4 |\n         *\n         * (for accesses where `index` is a circuit constant, it is assumed the circuit will apply a copy constraint on\n         * `w2` to fix its value)\n         *\n         *\n         */\n\n        /**\n         * Memory Record Check\n         * Partial degree: 1\n         * Total degree: 4\n         *\n         * A ROM/ROM access gate can be evaluated with the identity:\n         *\n         * qc + w1 \\eta + w2 \\eta_two + w3 \\eta_three - w4 = 0\n         *\n         * For ROM gates, qc = 0\n         */\n        ap.memory_record_check = wire(p, WIRE.W_O) * rp.etaThree;\n        ap.memory_record_check = ap.memory_record_check + (wire(p, WIRE.W_R) * rp.etaTwo);\n        ap.memory_record_check = ap.memory_record_check + (wire(p, WIRE.W_L) * rp.eta);\n        ap.memory_record_check = ap.memory_record_check + wire(p, WIRE.Q_C);\n        ap.partial_record_check = ap.memory_record_check; // used in RAM consistency check; deg 1 or 4\n        ap.memory_record_check = ap.memory_record_check - wire(p, WIRE.W_4);\n\n        /**\n         * Contribution 13 & 14\n         * ROM Consistency Check\n         * Partial degree: 1\n         * Total degree: 4\n         *\n         * For every ROM read, a set equivalence check is applied between the record witnesses, and a second set of\n         * records that are sorted.\n         *\n         * We apply the following checks for the sorted records:\n         *\n         * 1. w1, w2, w3 correctly map to 'index', 'v1, 'v2' for a given record value at w4\n         * 2. index values for adjacent records are monotonically increasing\n         * 3. if, at gate i, index_i == index_{i + 1}, then value1_i == value1_{i + 1} and value2_i == value2_{i + 1}\n         *\n         */\n        ap.index_delta = wire(p, WIRE.W_L_SHIFT) - wire(p, WIRE.W_L);\n        ap.record_delta = wire(p, WIRE.W_4_SHIFT) - wire(p, WIRE.W_4);\n\n        ap.index_is_monotonically_increasing = ap.index_delta * ap.index_delta - ap.index_delta; // deg 2\n\n        ap.adjacent_values_match_if_adjacent_indices_match = (ap.index_delta * MINUS_ONE + Fr.wrap(1)) * ap.record_delta; // deg 2\n\n        evals[13] = ap.adjacent_values_match_if_adjacent_indices_match * (wire(p, WIRE.Q_L) * wire(p, WIRE.Q_R))\n            * (wire(p, WIRE.Q_AUX) * domainSep); // deg 5\n        evals[14] = ap.index_is_monotonically_increasing * (wire(p, WIRE.Q_L) * wire(p, WIRE.Q_R))\n            * (wire(p, WIRE.Q_AUX) * domainSep); // deg 5\n\n        ap.ROM_consistency_check_identity = ap.memory_record_check * (wire(p, WIRE.Q_L) * wire(p, WIRE.Q_R)); // deg 3 or 7\n\n        /**\n         * Contributions 15,16,17\n         * RAM Consistency Check\n         *\n         * The 'access' type of the record is extracted with the expression `w_4 - ap.partial_record_check`\n         * (i.e. for an honest Prover `w1 * eta + w2 * eta^2 + w3 * eta^3 - w4 = access`.\n         * This is validated by requiring `access` to be boolean\n         *\n         * For two adjacent entries in the sorted list if _both_\n         *  A) index values match\n         *  B) adjacent access value is 0 (i.e. next gate is a READ)\n         * then\n         *  C) both values must match.\n         * The gate boolean check is\n         * (A && B) => C  === !(A && B) || C ===  !A || !B || C\n         *\n         * N.B. it is the responsibility of the circuit writer to ensure that every RAM cell is initialized\n         * with a WRITE operation.\n         */\n        Fr access_type = (wire(p, WIRE.W_4) - ap.partial_record_check); // will be 0 or 1 for honest Prover; deg 1 or 4\n        ap.access_check = access_type * access_type - access_type; // check value is 0 or 1; deg 2 or 8\n\n        ap.next_gate_access_type = wire(p, WIRE.W_O_SHIFT) * rp.etaThree;\n        ap.next_gate_access_type = ap.next_gate_access_type + (wire(p, WIRE.W_R_SHIFT) * rp.etaTwo);\n        ap.next_gate_access_type = ap.next_gate_access_type + (wire(p, WIRE.W_L_SHIFT) * rp.eta);\n        ap.next_gate_access_type = wire(p, WIRE.W_4_SHIFT) - ap.next_gate_access_type;\n\n        Fr value_delta = wire(p, WIRE.W_O_SHIFT) - wire(p, WIRE.W_O);\n        ap.adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation = (\n            ap.index_delta * MINUS_ONE + Fr.wrap(1)\n        ) * value_delta * (ap.next_gate_access_type * MINUS_ONE + Fr.wrap(1)); // deg 3 or 6\n\n        // We can't apply the RAM consistency check identity on the final entry in the sorted list (the wires in the\n        // next gate would make the identity fail).  We need to validate that its 'access type' bool is correct. Can't\n        // do  with an arithmetic gate because of the  `eta` factors. We need to check that the *next* gate's access\n        // type is  correct, to cover this edge case\n        // deg 2 or 4\n        ap.next_gate_access_type_is_boolean =\n            ap.next_gate_access_type * ap.next_gate_access_type - ap.next_gate_access_type;\n\n        // Putting it all together...\n        evals[15] = ap.adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation\n            * (wire(p, WIRE.Q_ARITH)) * (wire(p, WIRE.Q_AUX) * domainSep); // deg 5 or 8\n        evals[16] = ap.index_is_monotonically_increasing * (wire(p, WIRE.Q_ARITH)) * (wire(p, WIRE.Q_AUX) * domainSep); // deg 4\n        evals[17] = ap.next_gate_access_type_is_boolean * (wire(p, WIRE.Q_ARITH)) * (wire(p, WIRE.Q_AUX) * domainSep); // deg 4 or 6\n\n        ap.RAM_consistency_check_identity = ap.access_check * (wire(p, WIRE.Q_ARITH)); // deg 3 or 9\n\n        /**\n         * RAM Timestamp Consistency Check\n         *\n         * | w1 | w2 | w3 | w4 |\n         * | index | timestamp | timestamp_check | -- |\n         *\n         * Let delta_index = index_{i + 1} - index_{i}\n         *\n         * Iff delta_index == 0, timestamp_check = timestamp_{i + 1} - timestamp_i\n         * Else timestamp_check = 0\n         */\n        ap.timestamp_delta = wire(p, WIRE.W_R_SHIFT) - wire(p, WIRE.W_R);\n        ap.RAM_timestamp_check_identity =\n            (ap.index_delta * MINUS_ONE + Fr.wrap(1)) * ap.timestamp_delta - wire(p, WIRE.W_O); // deg 3\n\n        /**\n         * Complete Contribution 12\n         * The complete RAM/ROM memory identity\n         * Partial degree:\n         */\n        ap.memory_identity = ap.ROM_consistency_check_identity; // deg 3 or 6\n        ap.memory_identity =\n            ap.memory_identity + ap.RAM_timestamp_check_identity * (wire(p, WIRE.Q_4) * wire(p, WIRE.Q_L)); // deg 4\n        ap.memory_identity = ap.memory_identity + ap.memory_record_check * (wire(p, WIRE.Q_M) * wire(p, WIRE.Q_L)); // deg 3 or 6\n        ap.memory_identity = ap.memory_identity + ap.RAM_consistency_check_identity; // deg 3 or 9\n\n        // (deg 3 or 9) + (deg 4) + (deg 3)\n        ap.auxiliary_identity = ap.memory_identity + non_native_field_identity + limb_accumulator_identity;\n        ap.auxiliary_identity = ap.auxiliary_identity * (wire(p, WIRE.Q_AUX) * domainSep); // deg 4 or 10\n        evals[12] = ap.auxiliary_identity;\n    }\n\n    struct PoseidonExternalParams {\n        Fr s1;\n        Fr s2;\n        Fr s3;\n        Fr s4;\n        Fr u1;\n        Fr u2;\n        Fr u3;\n        Fr u4;\n        Fr t0;\n        Fr t1;\n        Fr t2;\n        Fr t3;\n        Fr v1;\n        Fr v2;\n        Fr v3;\n        Fr v4;\n        Fr q_pos_by_scaling;\n    }\n\n    function accumulatePoseidonExternalRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        PoseidonExternalParams memory ep;\n\n        ep.s1 = wire(p, WIRE.W_L) + wire(p, WIRE.Q_L);\n        ep.s2 = wire(p, WIRE.W_R) + wire(p, WIRE.Q_R);\n        ep.s3 = wire(p, WIRE.W_O) + wire(p, WIRE.Q_O);\n        ep.s4 = wire(p, WIRE.W_4) + wire(p, WIRE.Q_4);\n\n        ep.u1 = ep.s1 * ep.s1 * ep.s1 * ep.s1 * ep.s1;\n        ep.u2 = ep.s2 * ep.s2 * ep.s2 * ep.s2 * ep.s2;\n        ep.u3 = ep.s3 * ep.s3 * ep.s3 * ep.s3 * ep.s3;\n        ep.u4 = ep.s4 * ep.s4 * ep.s4 * ep.s4 * ep.s4;\n        // matrix mul v = M_E * u with 14 additions\n        ep.t0 = ep.u1 + ep.u2; // u_1 + u_2\n        ep.t1 = ep.u3 + ep.u4; // u_3 + u_4\n        ep.t2 = ep.u2 + ep.u2 + ep.t1; // 2u_2\n        // ep.t2 += ep.t1; // 2u_2 + u_3 + u_4\n        ep.t3 = ep.u4 + ep.u4 + ep.t0; // 2u_4\n        // ep.t3 += ep.t0; // u_1 + u_2 + 2u_4\n        ep.v4 = ep.t1 + ep.t1;\n        ep.v4 = ep.v4 + ep.v4 + ep.t3;\n        // ep.v4 += ep.t3; // u_1 + u_2 + 4u_3 + 6u_4\n        ep.v2 = ep.t0 + ep.t0;\n        ep.v2 = ep.v2 + ep.v2 + ep.t2;\n        // ep.v2 += ep.t2; // 4u_1 + 6u_2 + u_3 + u_4\n        ep.v1 = ep.t3 + ep.v2; // 5u_1 + 7u_2 + u_3 + 3u_4\n        ep.v3 = ep.t2 + ep.v4; // u_1 + 3u_2 + 5u_3 + 7u_4\n\n        ep.q_pos_by_scaling = wire(p, WIRE.Q_POSEIDON2_EXTERNAL) * domainSep;\n        evals[18] = evals[18] + ep.q_pos_by_scaling * (ep.v1 - wire(p, WIRE.W_L_SHIFT));\n\n        evals[19] = evals[19] + ep.q_pos_by_scaling * (ep.v2 - wire(p, WIRE.W_R_SHIFT));\n\n        evals[20] = evals[20] + ep.q_pos_by_scaling * (ep.v3 - wire(p, WIRE.W_O_SHIFT));\n\n        evals[21] = evals[21] + ep.q_pos_by_scaling * (ep.v4 - wire(p, WIRE.W_4_SHIFT));\n    }\n\n    struct PoseidonInternalParams {\n        Fr u1;\n        Fr u2;\n        Fr u3;\n        Fr u4;\n        Fr u_sum;\n        Fr v1;\n        Fr v2;\n        Fr v3;\n        Fr v4;\n        Fr s1;\n        Fr q_pos_by_scaling;\n    }\n\n    function accumulatePoseidonInternalRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        PoseidonInternalParams memory ip;\n\n        Fr[4] memory INTERNAL_MATRIX_DIAGONAL = [\n            FrLib.from(0x10dc6e9c006ea38b04b1e03b4bd9490c0d03f98929ca1d7fb56821fd19d3b6e7),\n            FrLib.from(0x0c28145b6a44df3e0149b3d0a30b3bb599df9756d4dd9b84a86b38cfb45a740b),\n            FrLib.from(0x00544b8338791518b2c7645a50392798b21f75bb60e3596170067d00141cac15),\n            FrLib.from(0x222c01175718386f2e2e82eb122789e352e105a3b8fa852613bc534433ee428b)\n        ];\n\n        // add round constants\n        ip.s1 = wire(p, WIRE.W_L) + wire(p, WIRE.Q_L);\n\n        // apply s-box round\n        ip.u1 = ip.s1 * ip.s1 * ip.s1 * ip.s1 * ip.s1;\n        ip.u2 = wire(p, WIRE.W_R);\n        ip.u3 = wire(p, WIRE.W_O);\n        ip.u4 = wire(p, WIRE.W_4);\n\n        // matrix mul with v = M_I * u 4 muls and 7 additions\n        ip.u_sum = ip.u1 + ip.u2 + ip.u3 + ip.u4;\n\n        ip.q_pos_by_scaling = wire(p, WIRE.Q_POSEIDON2_INTERNAL) * domainSep;\n\n        ip.v1 = ip.u1 * INTERNAL_MATRIX_DIAGONAL[0] + ip.u_sum;\n        evals[22] = evals[22] + ip.q_pos_by_scaling * (ip.v1 - wire(p, WIRE.W_L_SHIFT));\n\n        ip.v2 = ip.u2 * INTERNAL_MATRIX_DIAGONAL[1] + ip.u_sum;\n        evals[23] = evals[23] + ip.q_pos_by_scaling * (ip.v2 - wire(p, WIRE.W_R_SHIFT));\n\n        ip.v3 = ip.u3 * INTERNAL_MATRIX_DIAGONAL[2] + ip.u_sum;\n        evals[24] = evals[24] + ip.q_pos_by_scaling * (ip.v3 - wire(p, WIRE.W_O_SHIFT));\n\n        ip.v4 = ip.u4 * INTERNAL_MATRIX_DIAGONAL[3] + ip.u_sum;\n        evals[25] = evals[25] + ip.q_pos_by_scaling * (ip.v4 - wire(p, WIRE.W_4_SHIFT));\n    }\n\n    function scaleAndBatchSubrelations(\n        Fr[NUMBER_OF_SUBRELATIONS] memory evaluations,\n        Fr[NUMBER_OF_ALPHAS] memory subrelationChallenges\n    ) internal pure returns (Fr accumulator) {\n        accumulator = accumulator + evaluations[0];\n\n        for (uint256 i = 1; i < NUMBER_OF_SUBRELATIONS; ++i) {\n            accumulator = accumulator + evaluations[i] * subrelationChallenges[i - 1];\n        }\n    }\n}\n\nstruct ShpleminiIntermediates {\n    Fr unshiftedScalar;\n    Fr shiftedScalar;\n    // Scalar to be multiplied by [1]₁\n    Fr constantTermAccumulator;\n    // Accumulator for powers of rho\n    Fr batchingChallenge;\n    // Linear combination of multilinear (sumcheck) evaluations and powers of rho\n    Fr batchedEvaluation;\n    // 1/(z - r^{2^i}) for i = 0, ..., logSize, dynamically updated\n    Fr posInvertedDenominator;\n    // 1/(z + r^{2^i}) for i = 0, ..., logSize, dynamically updated\n    Fr negInvertedDenominator;\n    // v^{2i} * 1/(z - r^{2^i})\n    Fr scalingFactorPos;\n    // v^{2i+1} * 1/(z + r^{2^i})\n    Fr scalingFactorNeg;\n    // // Fold_i(r^{2^i}) reconstructed by Verifier\n    // Fr[CONST_PROOF_SIZE_LOG_N] foldPosEvaluations;\n}\n\nlibrary CommitmentSchemeLib {\n    using FrLib for Fr;\n\n    function computeSquares(Fr r) internal pure returns (Fr[CONST_PROOF_SIZE_LOG_N] memory squares) {\n        squares[0] = r;\n        for (uint256 i = 1; i < CONST_PROOF_SIZE_LOG_N; ++i) {\n            squares[i] = squares[i - 1].sqr();\n        }\n    }\n\n    // Compute the evaluations  A_l(r^{2^l}) for l = 0, ..., m-1\n    function computeFoldPosEvaluations(\n        Fr[CONST_PROOF_SIZE_LOG_N] memory sumcheckUChallenges,\n        Fr batchedEvalAccumulator,\n        Fr[CONST_PROOF_SIZE_LOG_N] memory geminiEvaluations,\n        Fr[CONST_PROOF_SIZE_LOG_N] memory geminiEvalChallengePowers,\n        uint256 logSize\n    ) internal view returns (Fr[CONST_PROOF_SIZE_LOG_N] memory foldPosEvaluations) {\n        for (uint256 i = CONST_PROOF_SIZE_LOG_N; i > 0; --i) {\n            Fr challengePower = geminiEvalChallengePowers[i - 1];\n            Fr u = sumcheckUChallenges[i - 1];\n\n            Fr batchedEvalRoundAcc = (\n                (challengePower * batchedEvalAccumulator * Fr.wrap(2))\n                    - geminiEvaluations[i - 1] * (challengePower * (Fr.wrap(1) - u) - u)\n            );\n            // Divide by the denominator\n            batchedEvalRoundAcc = batchedEvalRoundAcc * (challengePower * (Fr.wrap(1) - u) + u).invert();\n\n            if (i <= logSize) {\n                batchedEvalAccumulator = batchedEvalRoundAcc;\n                foldPosEvaluations[i - 1] = batchedEvalRoundAcc;\n            }\n        }\n\n    }\n}\n\ninterface IVerifier {\n    function verify(bytes calldata _proof, bytes32[] calldata _publicInputs) external view returns (bool);\n}\n\n\nabstract contract BaseHonkVerifier is IVerifier {\n    using FrLib for Fr;\n\n    uint256 immutable n;\n    uint256 immutable logN;\n    uint256 immutable numPublicInputs;\n\n    constructor(uint256 _n, uint256 _logN, uint256 _numPublicInputs) {\n        n = _n;\n        logN = _logN;\n        numPublicInputs = _numPublicInputs;\n    }\n\n    error ProofLengthWrong();\n    error PublicInputsLengthWrong();\n    error SumcheckFailed();\n    error ShpleminiFailed();\n\n    // Number of field elements in a ultra honk zero knowledge proof\n    uint256 constant PROOF_SIZE = 440;\n\n    function loadVerificationKey() internal pure virtual returns (Honk.VerificationKey memory);\n\n    function verify(bytes calldata proof, bytes32[] calldata publicInputs) public view override returns (bool) {\n         // Check the received proof is the expected size where each field element is 32 bytes\n        if (proof.length != PROOF_SIZE * 32) {\n            revert ProofLengthWrong();\n        }\n\n        Honk.VerificationKey memory vk = loadVerificationKey();\n        Honk.Proof memory p = TranscriptLib.loadProof(proof);\n\n        if (publicInputs.length != vk.publicInputsSize) {\n            revert PublicInputsLengthWrong();\n        }\n\n        // Generate the fiat shamir challenges for the whole protocol\n        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1281): Add pubInputsOffset to VK or remove entirely.\n        Transcript memory t = TranscriptLib.generateTranscript(p, publicInputs, vk.circuitSize, vk.publicInputsSize, /*pubInputsOffset=*/1);\n\n        // Derive public input delta\n        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1281): Add pubInputsOffset to VK or remove entirely.\n        t.relationParameters.publicInputsDelta = computePublicInputDelta(\n            publicInputs, t.relationParameters.beta, t.relationParameters.gamma, /*pubInputsOffset=*/1\n        );\n\n        // Sumcheck\n        bool sumcheckVerified = verifySumcheck(p, t);\n        if (!sumcheckVerified) revert SumcheckFailed();\n\n        bool shpleminiVerified = verifyShplemini(p, vk, t);\n        if (!shpleminiVerified) revert ShpleminiFailed();\n\n        return sumcheckVerified && shpleminiVerified; // Boolean condition not required - nice for vanity :)\n    }\n\n    function computePublicInputDelta(bytes32[] memory publicInputs, Fr beta, Fr gamma, uint256 offset)\n        internal\n        view\n        returns (Fr publicInputDelta)\n    {\n        Fr numerator = Fr.wrap(1);\n        Fr denominator = Fr.wrap(1);\n\n        Fr numeratorAcc = gamma + (beta * FrLib.from(n + offset));\n        Fr denominatorAcc = gamma - (beta * FrLib.from(offset + 1));\n\n        {\n            for (uint256 i = 0; i < numPublicInputs; i++) {\n                Fr pubInput = FrLib.fromBytes32(publicInputs[i]);\n\n                numerator = numerator * (numeratorAcc + pubInput);\n                denominator = denominator * (denominatorAcc + pubInput);\n\n                numeratorAcc = numeratorAcc + beta;\n                denominatorAcc = denominatorAcc - beta;\n            }\n        }\n\n        // Fr delta = numerator / denominator; // TOOO: batch invert later?\n        publicInputDelta = FrLib.div(numerator, denominator);\n    }\n\n    function verifySumcheck(Honk.Proof memory proof, Transcript memory tp) internal view returns (bool verified) {\n        Fr roundTarget;\n        Fr powPartialEvaluation = Fr.wrap(1);\n\n        // We perform sumcheck reductions over log n rounds ( the multivariate degree )\n        for (uint256 round; round < logN; ++round) {\n            Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory roundUnivariate = proof.sumcheckUnivariates[round];\n            bool valid = checkSum(roundUnivariate, roundTarget);\n            if (!valid) revert SumcheckFailed();\n\n            Fr roundChallenge = tp.sumCheckUChallenges[round];\n\n            // Update the round target for the next rounf\n            roundTarget = computeNextTargetSum(roundUnivariate, roundChallenge);\n            powPartialEvaluation = partiallyEvaluatePOW(tp.gateChallenges[round], powPartialEvaluation, roundChallenge);\n        }\n\n        // Last round\n        Fr grandHonkRelationSum =\n            RelationsLib.accumulateRelationEvaluations(proof.sumcheckEvaluations, tp.relationParameters, tp.alphas, powPartialEvaluation);\n        verified = (grandHonkRelationSum == roundTarget);\n    }\n\n    function checkSum(Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory roundUnivariate, Fr roundTarget)\n        internal\n        pure\n        returns (bool checked)\n    {\n        Fr totalSum = roundUnivariate[0] + roundUnivariate[1];\n        checked = totalSum == roundTarget;\n    }\n\n    // Return the new target sum for the next sumcheck round\n    function computeNextTargetSum(Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory roundUnivariates, Fr roundChallenge)\n        internal\n        view\n        returns (Fr targetSum)\n    {\n        // TODO: inline\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory BARYCENTRIC_LAGRANGE_DENOMINATORS = [\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffec51),\n            Fr.wrap(0x00000000000000000000000000000000000000000000000000000000000002d0),\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffff11),\n            Fr.wrap(0x0000000000000000000000000000000000000000000000000000000000000090),\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffff71),\n            Fr.wrap(0x00000000000000000000000000000000000000000000000000000000000000f0),\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593effffd31),\n            Fr.wrap(0x00000000000000000000000000000000000000000000000000000000000013b0)\n        ];\n\n        // To compute the next target sum, we evaluate the given univariate at a point u (challenge).\n\n        // Performing Barycentric evaluations\n        // Compute B(x)\n        Fr numeratorValue = Fr.wrap(1);\n        for (uint256 i = 0; i < BATCHED_RELATION_PARTIAL_LENGTH; ++i) {\n            numeratorValue = numeratorValue * (roundChallenge - Fr.wrap(i));\n        }\n\n        // Calculate domain size N of inverses\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory denominatorInverses;\n        for (uint256 i = 0; i < BATCHED_RELATION_PARTIAL_LENGTH; ++i) {\n            Fr inv = BARYCENTRIC_LAGRANGE_DENOMINATORS[i];\n            inv = inv * (roundChallenge - Fr.wrap(i));\n            inv = FrLib.invert(inv);\n            denominatorInverses[i] = inv;\n        }\n\n        for (uint256 i = 0; i < BATCHED_RELATION_PARTIAL_LENGTH; ++i) {\n            Fr term = roundUnivariates[i];\n            term = term * denominatorInverses[i];\n            targetSum = targetSum + term;\n        }\n\n        // Scale the sum by the value of B(x)\n        targetSum = targetSum * numeratorValue;\n    }\n\n    // Univariate evaluation of the monomial ((1-X_l) + X_l.B_l) at the challenge point X_l=u_l\n    function partiallyEvaluatePOW(Fr gateChallenge, Fr currentEvaluation, Fr roundChallenge)\n        internal\n        pure\n        returns (Fr newEvaluation)\n    {\n        Fr univariateEval = Fr.wrap(1) + (roundChallenge * (gateChallenge - Fr.wrap(1)));\n        newEvaluation = currentEvaluation * univariateEval;\n    }\n\n    function verifyShplemini(Honk.Proof memory proof, Honk.VerificationKey memory vk, Transcript memory tp)\n        internal\n        view\n        returns (bool verified)\n    {\n        ShpleminiIntermediates memory mem; // stack\n\n        // - Compute vector (r, r², ... , r²⁽ⁿ⁻¹⁾), where n = log_circuit_size\n        Fr[CONST_PROOF_SIZE_LOG_N] memory powers_of_evaluation_challenge = CommitmentSchemeLib.computeSquares(tp.geminiR);\n\n        // Arrays hold values that will be linearly combined for the gemini and shplonk batch openings\n        Fr[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory scalars;\n        Honk.G1Point[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory commitments;\n\n        mem.posInvertedDenominator = (tp.shplonkZ - powers_of_evaluation_challenge[0]).invert();\n        mem.negInvertedDenominator = (tp.shplonkZ + powers_of_evaluation_challenge[0]).invert();\n\n        mem.unshiftedScalar = mem.posInvertedDenominator + (tp.shplonkNu * mem.negInvertedDenominator);\n        mem.shiftedScalar =\n            tp.geminiR.invert() * (mem.posInvertedDenominator - (tp.shplonkNu * mem.negInvertedDenominator));\n\n        scalars[0] = Fr.wrap(1);\n        commitments[0] = convertProofPoint(proof.shplonkQ);\n\n        mem.batchingChallenge = Fr.wrap(1);\n        mem.batchedEvaluation = Fr.wrap(0);\n\n        for (uint256 i = 1; i <= NUMBER_UNSHIFTED; ++i) {\n            scalars[i] = mem.unshiftedScalar.neg() * mem.batchingChallenge;\n            mem.batchedEvaluation = mem.batchedEvaluation + (proof.sumcheckEvaluations[i - 1] * mem.batchingChallenge);\n            mem.batchingChallenge = mem.batchingChallenge * tp.rho;\n        }\n        // g commitments are accumulated at r\n        for (uint256 i = NUMBER_UNSHIFTED + 1; i <= NUMBER_OF_ENTITIES; ++i) {\n            scalars[i] = mem.shiftedScalar.neg() * mem.batchingChallenge;\n            mem.batchedEvaluation = mem.batchedEvaluation + (proof.sumcheckEvaluations[i - 1] * mem.batchingChallenge);\n            mem.batchingChallenge = mem.batchingChallenge * tp.rho;\n        }\n\n        commitments[1] = vk.qm;\n        commitments[2] = vk.qc;\n        commitments[3] = vk.ql;\n        commitments[4] = vk.qr;\n        commitments[5] = vk.qo;\n        commitments[6] = vk.q4;\n        commitments[7] = vk.qLookup;\n        commitments[8] = vk.qArith;\n        commitments[9] = vk.qDeltaRange;\n        commitments[10] = vk.qElliptic;\n        commitments[11] = vk.qAux;\n        commitments[12] = vk.qPoseidon2External;\n        commitments[13] = vk.qPoseidon2Internal;\n        commitments[14] = vk.s1;\n        commitments[15] = vk.s2;\n        commitments[16] = vk.s3;\n        commitments[17] = vk.s4;\n        commitments[18] = vk.id1;\n        commitments[19] = vk.id2;\n        commitments[20] = vk.id3;\n        commitments[21] = vk.id4;\n        commitments[22] = vk.t1;\n        commitments[23] = vk.t2;\n        commitments[24] = vk.t3;\n        commitments[25] = vk.t4;\n        commitments[26] = vk.lagrangeFirst;\n        commitments[27] = vk.lagrangeLast;\n\n        // Accumulate proof points\n        commitments[28] = convertProofPoint(proof.w1);\n        commitments[29] = convertProofPoint(proof.w2);\n        commitments[30] = convertProofPoint(proof.w3);\n        commitments[31] = convertProofPoint(proof.w4);\n        commitments[32] = convertProofPoint(proof.zPerm);\n        commitments[33] = convertProofPoint(proof.lookupInverses);\n        commitments[34] = convertProofPoint(proof.lookupReadCounts);\n        commitments[35] = convertProofPoint(proof.lookupReadTags);\n\n        // to be Shifted\n        commitments[36] = convertProofPoint(proof.w1);\n        commitments[37] = convertProofPoint(proof.w2);\n        commitments[38] = convertProofPoint(proof.w3);\n        commitments[39] = convertProofPoint(proof.w4);\n        commitments[40] = convertProofPoint(proof.zPerm);\n\n        // Add contributions from A₀(r) and A₀(-r) to constant_term_accumulator:\n        // Compute the evaluations A_l(r^{2^l}) for l = 0, ..., logN - 1\n        Fr[CONST_PROOF_SIZE_LOG_N] memory foldPosEvaluations = CommitmentSchemeLib.computeFoldPosEvaluations(\n            tp.sumCheckUChallenges,\n            mem.batchedEvaluation,\n            proof.geminiAEvaluations,\n            powers_of_evaluation_challenge,\n            logN\n        );\n\n        // Compute the Shplonk constant term contributions from A₀(±r)\n        mem.constantTermAccumulator = foldPosEvaluations[0] * mem.posInvertedDenominator;\n        mem.constantTermAccumulator =\n            mem.constantTermAccumulator + (proof.geminiAEvaluations[0] * tp.shplonkNu * mem.negInvertedDenominator);\n        mem.batchingChallenge = tp.shplonkNu.sqr();\n\n        // Compute Shplonk constant term contributions from Aₗ(±r^{2ˡ}) for l = 1, ..., m-1;\n        // Compute scalar multipliers for each fold commitment\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; ++i) {\n            bool dummy_round = i >= (logN - 1);\n\n            if (!dummy_round) {\n                // Update inverted denominators\n                mem.posInvertedDenominator = (tp.shplonkZ - powers_of_evaluation_challenge[i + 1]).invert();\n                mem.negInvertedDenominator = (tp.shplonkZ + powers_of_evaluation_challenge[i + 1]).invert();\n\n                // Compute the scalar multipliers for Aₗ(± r^{2ˡ}) and [Aₗ]\n                mem.scalingFactorPos = mem.batchingChallenge * mem.posInvertedDenominator;\n                mem.scalingFactorNeg = mem.batchingChallenge * tp.shplonkNu * mem.negInvertedDenominator;\n                // [Aₗ] is multiplied by -v^{2l}/(z-r^{2^l}) - v^{2l+1} /(z+ r^{2^l})\n                scalars[NUMBER_OF_ENTITIES + 1 + i] = mem.scalingFactorNeg.neg() + mem.scalingFactorPos.neg();\n\n                // Accumulate the const term contribution given by\n                // v^{2l} * Aₗ(r^{2ˡ}) /(z-r^{2^l}) + v^{2l+1} * Aₗ(-r^{2ˡ}) /(z+ r^{2^l})\n                Fr accumContribution = mem.scalingFactorNeg * proof.geminiAEvaluations[i + 1];\n                accumContribution = accumContribution + mem.scalingFactorPos * foldPosEvaluations[i + 1];\n                mem.constantTermAccumulator = mem.constantTermAccumulator + accumContribution;\n                // Update the running power of v\n                mem.batchingChallenge = mem.batchingChallenge * tp.shplonkNu * tp.shplonkNu;\n            }\n\n            commitments[NUMBER_OF_ENTITIES + 1 + i] = convertProofPoint(proof.geminiFoldComms[i]);\n        }\n\n        // Finalise the batch opening claim\n        commitments[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N] = Honk.G1Point({x: 1, y: 2});\n        scalars[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N] = mem.constantTermAccumulator;\n\n        Honk.G1Point memory quotient_commitment = convertProofPoint(proof.kzgQuotient);\n\n        commitments[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 1] = quotient_commitment;\n        scalars[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 1] = tp.shplonkZ; // evaluation challenge\n\n        Honk.G1Point memory P_0 = batchMul(commitments, scalars);\n        Honk.G1Point memory P_1 = negateInplace(quotient_commitment);\n\n        return pairing(P_0, P_1);\n    }\n\n    // This implementation is the same as above with different constants\n    function batchMul(\n        Honk.G1Point[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory base,\n        Fr[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory scalars\n    ) internal view returns (Honk.G1Point memory result) {\n        uint256 limit = NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2;\n        assembly {\n            let success := 0x01\n            let free := mload(0x40)\n\n            // Write the original into the accumulator\n            // Load into memory for ecMUL, leave offset for eccAdd result\n            // base is an array of pointers, so we have to dereference them\n            mstore(add(free, 0x40), mload(mload(base)))\n            mstore(add(free, 0x60), mload(add(0x20, mload(base))))\n            // Add scalar\n            mstore(add(free, 0x80), mload(scalars))\n            success := and(success, staticcall(gas(), 7, add(free, 0x40), 0x60, free, 0x40))\n\n            let count := 0x01\n            for {} lt(count, limit) { count := add(count, 1) } {\n                // Get loop offsets\n                let base_base := add(base, mul(count, 0x20))\n                let scalar_base := add(scalars, mul(count, 0x20))\n\n                mstore(add(free, 0x40), mload(mload(base_base)))\n                mstore(add(free, 0x60), mload(add(0x20, mload(base_base))))\n                // Add scalar\n                mstore(add(free, 0x80), mload(scalar_base))\n\n                success := and(success, staticcall(gas(), 7, add(free, 0x40), 0x60, add(free, 0x40), 0x40))\n                // accumulator = accumulator + accumulator_2\n                success := and(success, staticcall(gas(), 6, free, 0x80, free, 0x40))\n            }\n\n            // Return the result - i hate this\n            mstore(result, mload(free))\n            mstore(add(result, 0x20), mload(add(free, 0x20)))\n        }\n    }\n}\n\ncontract WarpVerifier is BaseHonkVerifier(N, LOG_N, NUMBER_OF_PUBLIC_INPUTS) {\n     function loadVerificationKey() internal pure override returns (Honk.VerificationKey memory) {\n       return HonkVerificationKey.loadVerificationKey();\n    }\n}\n"
    },
    "contracts/verifiers/WithdrawVerifier.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n// Copyright 2022 Aztec\npragma solidity >=0.8.21;\n\nuint256 constant N = 4096;\nuint256 constant LOG_N = 12;\nuint256 constant NUMBER_OF_PUBLIC_INPUTS = 16;\nlibrary HonkVerificationKey {\n    function loadVerificationKey() internal pure returns (Honk.VerificationKey memory) {\n        Honk.VerificationKey memory vk = Honk.VerificationKey({\n            circuitSize: uint256(4096),\n            logCircuitSize: uint256(12),\n            publicInputsSize: uint256(16),\n            ql: Honk.G1Point({ \n               x: uint256(0x1168a21bccccb62c8eba4882b480dd731a9ad07b75082b751c16033fd83fe053),\n               y: uint256(0x289847693233333a6a62f946bfd1f9bf72ab52b7e9fec4dd7db0398623e2a22a)\n            }),\n            qr: Honk.G1Point({ \n               x: uint256(0x047fa5d34be4ca099a52a5c47812daf28b7d55d64c377f4fa8158dbfc46cc5bf),\n               y: uint256(0x19b5b52e46e881641f88909460df7404186d83c53b509170957107c5a71cf469)\n            }),\n            qo: Honk.G1Point({ \n               x: uint256(0x1691734df3dc95622c71c75530885eabde66197e9193a5586f666909067fe013),\n               y: uint256(0x196d9b453ffaa6278f4745618281aa360a10a50504b510d43e443522af6306af)\n            }),\n            q4: Honk.G1Point({ \n               x: uint256(0x2935c2047daa69e60aeffa109e991d36d6c4035d3f2fab334528fc8ccf0616a3),\n               y: uint256(0x10e07c6bd862e8b3919aaac5da715e58eeb0691d24b01ddf87d9c5659a5bc6e9)\n            }),\n            qm: Honk.G1Point({ \n               x: uint256(0x118ef3e5fb359996b228f796c13331452ac585226069145196249402659ebc51),\n               y: uint256(0x171924a585a0c305b7233029aee74892479a9025cc3fb13fb734ca828f231eb2)\n            }),\n            qc: Honk.G1Point({ \n               x: uint256(0x1964f25928302ee321cbfdb0291dc5232b4b9210ba0f4e93d692709675b9b36e),\n               y: uint256(0x047d1ff2a6c907ad97810276724d9dcc02da20e01f50d6d3a903b82e8a74bcec)\n            }),\n            qArith: Honk.G1Point({ \n               x: uint256(0x1ffd1625b5f60dbc8e97d7977b1adcc647878e8049742de62b2e902c3e3abb98),\n               y: uint256(0x034f60a0f225daad086ee07b062fd304010ac4d927b9b0824498a1508cb762ae)\n            }),\n            qDeltaRange: Honk.G1Point({ \n               x: uint256(0x25ba14ed8b453eb58052d27bc923cfceb669b29e19e24fb04c19671ad8dc629b),\n               y: uint256(0x011be1fc199e075119bd1c11b46d183ca7accea8f9eb50b2f79ef3205ab59c13)\n            }),\n            qElliptic: Honk.G1Point({ \n               x: uint256(0x2c6ffadedade6bd791d05d2b288620b914328a4c5a603942ae15d8e6f92635ac),\n               y: uint256(0x2623a92a9a47d40333cc721e8bc81d5acdb670c0a3a29b4ea036654a8fdfc30a)\n            }),\n            qAux: Honk.G1Point({ \n               x: uint256(0x1b891590a063297d7436a51f725ed1e2771c2246c0e4f5a69ea0fd4e9dc534e8),\n               y: uint256(0x2c1378d8000c7aa69dee830127818002b7f719f57da9102ee07168833e4f2d9e)\n            }),\n            qLookup: Honk.G1Point({ \n               x: uint256(0x17c6d9d50e48678a2ac344538de4c7ece661d9ddf8d6ce71e63ee377b120f70f),\n               y: uint256(0x19c51b736e4c5a7d8380246160d19aad54bcdd8f21bebc775e9dfb36b9a73d45)\n            }),\n            qPoseidon2External: Honk.G1Point({ \n               x: uint256(0x0074407a779294298c588f1039481e1053f82a4b47df79f5cda5bcf16932c8b5),\n               y: uint256(0x1296476007e165dff1edf3532a2b67f9fb71d62d272e7aebf2bafad3d590651b)\n            }),\n            qPoseidon2Internal: Honk.G1Point({ \n               x: uint256(0x058cbfeffd442a8aa53c913ece8aa44261d89e0cb268d2f9bbac0ce3e05038a2),\n               y: uint256(0x0a8cfbdc13a02c94b7d0826893e5e04fd4cfec9424b4ca902ca686d0d767c0cb)\n            }),\n            s1: Honk.G1Point({ \n               x: uint256(0x224ff00bc02c0087816e66c1c1f0c048bef12f857e8a4f4eddafe97e12cc9bd8),\n               y: uint256(0x16152a6837014c61fd55e6973eb4309317ba0d1c28f184bbc960486ec420b53e)\n            }),\n            s2: Honk.G1Point({ \n               x: uint256(0x11eaf2aad2271b02fe28b0ba11a2a699f88fc0fe2942e9dd6444741de4df5549),\n               y: uint256(0x164e8c1d562964f084a433b8b6cb90ee6dab5a5d25b152d88c5a1053164fbebb)\n            }),\n            s3: Honk.G1Point({ \n               x: uint256(0x26a97ad4f31a63c21aca44b92847f6b93027dbc9521c92cd2a1e9b3dc64b8d73),\n               y: uint256(0x1a257bdd0ee0fee68b2c5ed5703961d4667efd43026d648a9c77a5363a56cb5d)\n            }),\n            s4: Honk.G1Point({ \n               x: uint256(0x2e1bebfba104ec9b5b73b085e8cfd3e4c9c6b364e18437ecd2adfe8caeed581e),\n               y: uint256(0x0f356418ea731a572fe77b864deb1d6148d131999a602136dec90b6c1caa1e83)\n            }),\n            t1: Honk.G1Point({ \n               x: uint256(0x1f1156b93b4396e0dac3bd312fdc94243cf3e0cfba606d27d5999f4927ff92b3),\n               y: uint256(0x116a7935196d39ea9178a285c53a6b419d9961d76a65ed28914ca5cc3ffd2433)\n            }),\n            t2: Honk.G1Point({ \n               x: uint256(0x23aebc5efc1d0e6d03030b242308fdf369409c76a0245d4f389193b554c30065),\n               y: uint256(0x19f38f8e7cf18f375d75db06fca92a0cbfc1214af084c189478e34dc04c77419)\n            }),\n            t3: Honk.G1Point({ \n               x: uint256(0x15642d62fc17d119ba4afb77ab424e0a771b5bbb501c75790a1a4e2906931045),\n               y: uint256(0x21cea98314ec6efc5f8f1f648f42a7a5c1396036397af54a729801cc1c37d4e2)\n            }),\n            t4: Honk.G1Point({ \n               x: uint256(0x1f3bd0ebf0709ac30745d0dafb183cdd5b4a42e59fe1e447cad24659049d13a7),\n               y: uint256(0x05900180ddd1cec6e340c70c9bff6f16c2efd51d298fee5fce4355fc26890195)\n            }),\n            id1: Honk.G1Point({ \n               x: uint256(0x29cbed7087b772afbab7b9fead491c49eb2875b379e92aed9a0bea7b29ac554b),\n               y: uint256(0x1caccb1ac5e0b69c8f20d5b6d7719a7412ed6190783f32b5ad26237f20a7b293)\n            }),\n            id2: Honk.G1Point({ \n               x: uint256(0x0976effccb6a71f22c277603aa271a5da0ce903e5ea36adb7f5e83b098b595c5),\n               y: uint256(0x0b6a1c20ed4582b91f7a9c2015e080983d28f1771e5e51141e1ccfa5db3f6308)\n            }),\n            id3: Honk.G1Point({ \n               x: uint256(0x2036cee78bdcc4b74e8c8c55681a9e7bdf01d14bbc4cae866fada1607c5da6f4),\n               y: uint256(0x06eb876c05faf21705a9d0109057ad1758a9f36907cb738edd4e75737ca89a16)\n            }),\n            id4: Honk.G1Point({ \n               x: uint256(0x1c4e769a651c395fa8b9871f215e60c73624bee2872fc732f07827b16ff50103),\n               y: uint256(0x2446dd78e6a5b21801317528210852ada90d48316a3ed9eea3ad667f370781a5)\n            }),\n            lagrangeFirst: Honk.G1Point({ \n               x: uint256(0x0000000000000000000000000000000000000000000000000000000000000001),\n               y: uint256(0x0000000000000000000000000000000000000000000000000000000000000002)\n            }),\n            lagrangeLast: Honk.G1Point({ \n               x: uint256(0x0af1e0c46a2ec7edb75410c62febfa2c8d796347d571cbeab2231a5ee822aa38),\n               y: uint256(0x15fca0b1c078eb810392f4f315136d8c02b74d2cdc8b40e3433e6feed8cc0cb6)\n            })\n        });\n        return vk;\n    }\n}\n\npragma solidity ^0.8.27;\n\ntype Fr is uint256;\n\nusing { add as + } for Fr global;\nusing { sub as - } for Fr global;\nusing { mul as * } for Fr global;\nusing { exp as ^ } for Fr global;\nusing { notEqual as != } for Fr global;\nusing { equal as == } for Fr global;\n\nuint256 constant MODULUS =\n    21888242871839275222246405745257275088548364400416034343698204186575808495617; // Prime field order\n\nFr constant MINUS_ONE = Fr.wrap(MODULUS - 1);\n\n// Instantiation\nlibrary FrLib\n{\n    function from(uint256 value) internal pure returns(Fr)\n    {\n        return Fr.wrap(value % MODULUS);\n    }\n\n    function fromBytes32(bytes32 value) internal pure returns(Fr)\n    {\n        return Fr.wrap(uint256(value) % MODULUS);\n    }\n\n    function toBytes32(Fr value) internal pure returns(bytes32)\n    {\n        return bytes32(Fr.unwrap(value));\n    }\n\n    function invert(Fr value) internal view returns(Fr)\n    {\n        uint256 v = Fr.unwrap(value);\n        uint256 result;\n\n        // Call the modexp precompile to invert in the field\n        assembly\n        {\n            let free := mload(0x40)\n            mstore(free, 0x20)\n            mstore(add(free, 0x20), 0x20)\n            mstore(add(free, 0x40), 0x20)\n            mstore(add(free, 0x60), v)\n            mstore(add(free, 0x80), sub(MODULUS, 2))\n            mstore(add(free, 0xa0), MODULUS)\n            let success := staticcall(gas(), 0x05, free, 0xc0, 0x00, 0x20)\n            if iszero(success) {\n                revert(0, 0)\n            }\n            result := mload(0x00)\n        }\n\n        return Fr.wrap(result);\n    }\n\n    function pow(Fr base, uint256 v) internal view returns(Fr)\n    {\n        uint256 b = Fr.unwrap(base);\n        uint256 result;\n\n        // Call the modexp precompile to invert in the field\n        assembly\n        {\n            let free := mload(0x40)\n            mstore(free, 0x20)\n            mstore(add(free, 0x20), 0x20)\n            mstore(add(free, 0x40), 0x20)\n            mstore(add(free, 0x60), b)\n            mstore(add(free, 0x80), v)\n            mstore(add(free, 0xa0), MODULUS)\n            let success := staticcall(gas(), 0x05, free, 0xc0, 0x00, 0x20)\n            if iszero(success) {\n                revert(0, 0)\n            }\n            result := mload(0x00)\n        }\n\n        return Fr.wrap(result);\n    }\n\n    function div(Fr numerator, Fr denominator) internal view returns(Fr)\n    {\n        return numerator * invert(denominator);\n    }\n\n    function sqr(Fr value) internal pure returns (Fr) {\n        return value * value;\n    }\n\n    function unwrap(Fr value) internal pure returns (uint256) {\n        return Fr.unwrap(value);\n    }\n\n    function neg(Fr value) internal pure returns (Fr) {\n        return Fr.wrap(MODULUS - Fr.unwrap(value));\n    }\n}\n\n// Free functions\nfunction add(Fr a, Fr b) pure returns(Fr)\n{\n    return Fr.wrap(addmod(Fr.unwrap(a), Fr.unwrap(b), MODULUS));\n}\n\nfunction mul(Fr a, Fr b) pure returns(Fr)\n{\n    return Fr.wrap(mulmod(Fr.unwrap(a), Fr.unwrap(b), MODULUS));\n}\n\nfunction sub(Fr a, Fr b) pure returns(Fr)\n{\n    return Fr.wrap(addmod(Fr.unwrap(a), MODULUS - Fr.unwrap(b), MODULUS));\n}\n\nfunction exp(Fr base, Fr exponent) pure returns(Fr)\n{\n    if (Fr.unwrap(exponent) == 0) return Fr.wrap(1);\n\n    for (uint256 i = 1; i < Fr.unwrap(exponent); i += i) {\n        base = base * base;\n    }\n    return base;\n}\n\nfunction notEqual(Fr a, Fr b) pure returns(bool)\n{\n    return Fr.unwrap(a) != Fr.unwrap(b);\n}\n\nfunction equal(Fr a, Fr b) pure returns(bool)\n{\n    return Fr.unwrap(a) == Fr.unwrap(b);\n}\n\nuint256 constant CONST_PROOF_SIZE_LOG_N = 28;\n\nuint256 constant NUMBER_OF_SUBRELATIONS = 26;\nuint256 constant BATCHED_RELATION_PARTIAL_LENGTH = 8;\nuint256 constant NUMBER_OF_ENTITIES = 40;\nuint256 constant NUMBER_UNSHIFTED = 35;\nuint256 constant NUMBER_TO_BE_SHIFTED = 5;\n\n// Alphas are used as relation separators so there should be NUMBER_OF_SUBRELATIONS - 1\nuint256 constant NUMBER_OF_ALPHAS = 25;\n\n// Prime field order\nuint256 constant Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583; // EC group order. F_q\nuint256 constant P = 21888242871839275222246405745257275088548364400416034343698204186575808495617; // Prime field order, F_r\n\n// ENUM FOR WIRES\nenum WIRE {\n    Q_M,\n    Q_C,\n    Q_L,\n    Q_R,\n    Q_O,\n    Q_4,\n    Q_LOOKUP,\n    Q_ARITH,\n    Q_RANGE,\n    Q_ELLIPTIC,\n    Q_AUX,\n    Q_POSEIDON2_EXTERNAL,\n    Q_POSEIDON2_INTERNAL,\n    SIGMA_1,\n    SIGMA_2,\n    SIGMA_3,\n    SIGMA_4,\n    ID_1,\n    ID_2,\n    ID_3,\n    ID_4,\n    TABLE_1,\n    TABLE_2,\n    TABLE_3,\n    TABLE_4,\n    LAGRANGE_FIRST,\n    LAGRANGE_LAST,\n    W_L,\n    W_R,\n    W_O,\n    W_4,\n    Z_PERM,\n    LOOKUP_INVERSES,\n    LOOKUP_READ_COUNTS,\n    LOOKUP_READ_TAGS,\n    W_L_SHIFT,\n    W_R_SHIFT,\n    W_O_SHIFT,\n    W_4_SHIFT,\n    Z_PERM_SHIFT\n}\n\nlibrary Honk {\n    struct G1Point {\n        uint256 x;\n        uint256 y;\n    }\n\n    struct G1ProofPoint {\n        uint256 x_0;\n        uint256 x_1;\n        uint256 y_0;\n        uint256 y_1;\n    }\n\n    struct VerificationKey {\n        // Misc Params\n        uint256 circuitSize;\n        uint256 logCircuitSize;\n        uint256 publicInputsSize;\n        // Selectors\n        G1Point qm;\n        G1Point qc;\n        G1Point ql;\n        G1Point qr;\n        G1Point qo;\n        G1Point q4;\n        G1Point qLookup; // Lookup\n        G1Point qArith; // Arithmetic widget\n        G1Point qDeltaRange; // Delta Range sort\n        G1Point qAux; // Auxillary\n        G1Point qElliptic; // Auxillary\n        G1Point qPoseidon2External;\n        G1Point qPoseidon2Internal;\n        // Copy cnstraints\n        G1Point s1;\n        G1Point s2;\n        G1Point s3;\n        G1Point s4;\n        // Copy identity\n        G1Point id1;\n        G1Point id2;\n        G1Point id3;\n        G1Point id4;\n        // Precomputed lookup table\n        G1Point t1;\n        G1Point t2;\n        G1Point t3;\n        G1Point t4;\n        // Fixed first and last\n        G1Point lagrangeFirst;\n        G1Point lagrangeLast;\n    }\n\n    struct RelationParameters {\n        // challenges\n        Fr eta;\n        Fr etaTwo;\n        Fr etaThree;\n        Fr beta;\n        Fr gamma;\n        // derived\n        Fr publicInputsDelta;\n    }\n\n\n    struct Proof {\n        // Free wires\n        Honk.G1ProofPoint w1;\n        Honk.G1ProofPoint w2;\n        Honk.G1ProofPoint w3;\n        Honk.G1ProofPoint w4;\n        // Lookup helpers - Permutations\n        Honk.G1ProofPoint zPerm;\n        // Lookup helpers - logup\n        Honk.G1ProofPoint lookupReadCounts;\n        Honk.G1ProofPoint lookupReadTags;\n        Honk.G1ProofPoint lookupInverses;\n        // Sumcheck\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH][CONST_PROOF_SIZE_LOG_N] sumcheckUnivariates;\n        Fr[NUMBER_OF_ENTITIES] sumcheckEvaluations;\n        // Shplemini\n        Honk.G1ProofPoint[CONST_PROOF_SIZE_LOG_N - 1] geminiFoldComms;\n        Fr[CONST_PROOF_SIZE_LOG_N] geminiAEvaluations;\n        Honk.G1ProofPoint shplonkQ;\n        Honk.G1ProofPoint kzgQuotient;\n    }\n}\n\n// Transcript library to generate fiat shamir challenges\nstruct Transcript {\n    // Oink\n    Honk.RelationParameters relationParameters;\n    Fr[NUMBER_OF_ALPHAS] alphas;\n    Fr[CONST_PROOF_SIZE_LOG_N] gateChallenges;\n    // Sumcheck\n    Fr[CONST_PROOF_SIZE_LOG_N] sumCheckUChallenges;\n    // Gemini\n    Fr rho;\n    Fr geminiR;\n    // Shplonk\n    Fr shplonkNu;\n    Fr shplonkZ;\n}\n\nlibrary TranscriptLib {\n    function generateTranscript(Honk.Proof memory proof, bytes32[] calldata publicInputs, uint256 circuitSize, uint256 publicInputsSize, uint256 pubInputsOffset)\n        internal\n        pure\n        returns (Transcript memory t)\n    {\n        Fr previousChallenge;\n        (t.relationParameters, previousChallenge) =\n            generateRelationParametersChallenges(proof, publicInputs, circuitSize, publicInputsSize, pubInputsOffset, previousChallenge);\n\n        (t.alphas, previousChallenge) = generateAlphaChallenges(previousChallenge, proof);\n\n        (t.gateChallenges, previousChallenge) = generateGateChallenges(previousChallenge);\n\n        (t.sumCheckUChallenges, previousChallenge) = generateSumcheckChallenges(proof, previousChallenge);\n\n        (t.rho, previousChallenge) = generateRhoChallenge(proof, previousChallenge);\n\n        (t.geminiR, previousChallenge) = generateGeminiRChallenge(proof, previousChallenge);\n\n        (t.shplonkNu, previousChallenge) = generateShplonkNuChallenge(proof, previousChallenge);\n\n        (t.shplonkZ, previousChallenge) = generateShplonkZChallenge(proof, previousChallenge);\n\n        return t;\n    }\n\n    function splitChallenge(Fr challenge) internal pure returns (Fr first, Fr second) {\n        uint256 challengeU256 = uint256(Fr.unwrap(challenge));\n        uint256 lo = challengeU256 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n        uint256 hi = challengeU256 >> 128;\n        first = FrLib.fromBytes32(bytes32(lo));\n        second = FrLib.fromBytes32(bytes32(hi));\n    }\n\n    function generateRelationParametersChallenges(\n        Honk.Proof memory proof,\n        bytes32[] calldata publicInputs,\n        uint256 circuitSize,\n        uint256 publicInputsSize,\n        uint256 pubInputsOffset,\n        Fr previousChallenge\n    ) internal pure returns (Honk.RelationParameters memory rp, Fr nextPreviousChallenge) {\n        (rp.eta, rp.etaTwo, rp.etaThree, previousChallenge) =\n            generateEtaChallenge(proof, publicInputs, circuitSize, publicInputsSize, pubInputsOffset);\n\n        (rp.beta, rp.gamma, nextPreviousChallenge) = generateBetaAndGammaChallenges(previousChallenge, proof);\n\n    }\n\n    function generateEtaChallenge(Honk.Proof memory proof, bytes32[] calldata publicInputs, uint256 circuitSize, uint256 publicInputsSize, uint256 pubInputsOffset)\n        internal\n        pure\n        returns (Fr eta, Fr etaTwo, Fr etaThree, Fr previousChallenge)\n    {\n        bytes32[] memory round0 = new bytes32[](3 + publicInputsSize + 12);\n        round0[0] = bytes32(circuitSize);\n        round0[1] = bytes32(publicInputsSize);\n        round0[2] = bytes32(pubInputsOffset);\n        for (uint256 i = 0; i < publicInputsSize; i++) {\n            round0[3 + i] = bytes32(publicInputs[i]);\n        }\n\n        // Create the first challenge\n        // Note: w4 is added to the challenge later on\n        round0[3 + publicInputsSize] = bytes32(proof.w1.x_0);\n        round0[3 + publicInputsSize + 1] = bytes32(proof.w1.x_1);\n        round0[3 + publicInputsSize + 2] = bytes32(proof.w1.y_0);\n        round0[3 + publicInputsSize + 3] = bytes32(proof.w1.y_1);\n        round0[3 + publicInputsSize + 4] = bytes32(proof.w2.x_0);\n        round0[3 + publicInputsSize + 5] = bytes32(proof.w2.x_1);\n        round0[3 + publicInputsSize + 6] = bytes32(proof.w2.y_0);\n        round0[3 + publicInputsSize + 7] = bytes32(proof.w2.y_1);\n        round0[3 + publicInputsSize + 8] = bytes32(proof.w3.x_0);\n        round0[3 + publicInputsSize + 9] = bytes32(proof.w3.x_1);\n        round0[3 + publicInputsSize + 10] = bytes32(proof.w3.y_0);\n        round0[3 + publicInputsSize + 11] = bytes32(proof.w3.y_1);\n\n        previousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(round0)));\n        (eta, etaTwo) = splitChallenge(previousChallenge);\n        previousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(previousChallenge))));\n        Fr unused;\n        (etaThree, unused) = splitChallenge(previousChallenge);\n    }\n\n    function generateBetaAndGammaChallenges(Fr previousChallenge, Honk.Proof memory proof)\n        internal\n        pure\n        returns (Fr beta, Fr gamma, Fr nextPreviousChallenge)\n    {\n        bytes32[13] memory round1;\n        round1[0] = FrLib.toBytes32(previousChallenge);\n        round1[1] = bytes32(proof.lookupReadCounts.x_0);\n        round1[2] = bytes32(proof.lookupReadCounts.x_1);\n        round1[3] = bytes32(proof.lookupReadCounts.y_0);\n        round1[4] = bytes32(proof.lookupReadCounts.y_1);\n        round1[5] = bytes32(proof.lookupReadTags.x_0);\n        round1[6] = bytes32(proof.lookupReadTags.x_1);\n        round1[7] = bytes32(proof.lookupReadTags.y_0);\n        round1[8] = bytes32(proof.lookupReadTags.y_1);\n        round1[9] = bytes32(proof.w4.x_0);\n        round1[10] = bytes32(proof.w4.x_1);\n        round1[11] = bytes32(proof.w4.y_0);\n        round1[12] = bytes32(proof.w4.y_1);\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(round1)));\n        (beta, gamma) = splitChallenge(nextPreviousChallenge);\n    }\n\n    // Alpha challenges non-linearise the gate contributions\n    function generateAlphaChallenges(Fr previousChallenge, Honk.Proof memory proof)\n        internal\n        pure\n        returns (Fr[NUMBER_OF_ALPHAS] memory alphas, Fr nextPreviousChallenge)\n    {\n        // Generate the original sumcheck alpha 0 by hashing zPerm and zLookup\n        uint256[9] memory alpha0;\n        alpha0[0] = Fr.unwrap(previousChallenge);\n        alpha0[1] = proof.lookupInverses.x_0;\n        alpha0[2] = proof.lookupInverses.x_1;\n        alpha0[3] = proof.lookupInverses.y_0;\n        alpha0[4] = proof.lookupInverses.y_1;\n        alpha0[5] = proof.zPerm.x_0;\n        alpha0[6] = proof.zPerm.x_1;\n        alpha0[7] = proof.zPerm.y_0;\n        alpha0[8] = proof.zPerm.y_1;\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(alpha0)));\n        (alphas[0], alphas[1]) = splitChallenge(nextPreviousChallenge);\n\n        for (uint256 i = 1; i < NUMBER_OF_ALPHAS / 2; i++) {\n            nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(nextPreviousChallenge))));\n            (alphas[2 * i], alphas[2 * i + 1]) = splitChallenge(nextPreviousChallenge);\n        }\n        if (((NUMBER_OF_ALPHAS & 1) == 1) && (NUMBER_OF_ALPHAS > 2)) {\n            nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(nextPreviousChallenge))));\n            Fr unused;\n            (alphas[NUMBER_OF_ALPHAS - 1], unused) = splitChallenge(nextPreviousChallenge);\n        }\n    }\n\n    function generateGateChallenges(Fr previousChallenge)\n        internal\n        pure\n        returns (Fr[CONST_PROOF_SIZE_LOG_N] memory gateChallenges, Fr nextPreviousChallenge)\n    {\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            previousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(Fr.unwrap(previousChallenge))));\n            Fr unused;\n            (gateChallenges[i], unused) = splitChallenge(previousChallenge);\n        }\n        nextPreviousChallenge = previousChallenge;\n    }\n\n    function generateSumcheckChallenges(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr[CONST_PROOF_SIZE_LOG_N] memory sumcheckChallenges, Fr nextPreviousChallenge)\n    {\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            Fr[BATCHED_RELATION_PARTIAL_LENGTH + 1] memory univariateChal;\n            univariateChal[0] = prevChallenge;\n\n            for (uint256 j = 0; j < BATCHED_RELATION_PARTIAL_LENGTH; j++) {\n                univariateChal[j + 1] = proof.sumcheckUnivariates[i][j];\n            }\n            prevChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(univariateChal)));\n            Fr unused;\n            (sumcheckChallenges[i], unused) = splitChallenge(prevChallenge);\n        }\n        nextPreviousChallenge = prevChallenge;\n    }\n\n    function generateRhoChallenge(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr rho, Fr nextPreviousChallenge)\n    {\n        Fr[NUMBER_OF_ENTITIES + 1] memory rhoChallengeElements;\n        rhoChallengeElements[0] = prevChallenge;\n\n        for (uint256 i = 0; i < NUMBER_OF_ENTITIES; i++) {\n            rhoChallengeElements[i + 1] = proof.sumcheckEvaluations[i];\n        }\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(rhoChallengeElements)));\n        Fr unused;\n        (rho, unused) = splitChallenge(nextPreviousChallenge);\n    }\n\n    function generateGeminiRChallenge(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr geminiR, Fr nextPreviousChallenge)\n    {\n        uint256[(CONST_PROOF_SIZE_LOG_N - 1) * 4 + 1] memory gR;\n        gR[0] = Fr.unwrap(prevChallenge);\n\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; i++) {\n            gR[1 + i * 4] = proof.geminiFoldComms[i].x_0;\n            gR[2 + i * 4] = proof.geminiFoldComms[i].x_1;\n            gR[3 + i * 4] = proof.geminiFoldComms[i].y_0;\n            gR[4 + i * 4] = proof.geminiFoldComms[i].y_1;\n        }\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(gR)));\n        Fr unused;\n        (geminiR, unused) = splitChallenge(nextPreviousChallenge);\n    }\n\n    function generateShplonkNuChallenge(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr shplonkNu, Fr nextPreviousChallenge)\n    {\n        uint256[(CONST_PROOF_SIZE_LOG_N) + 1] memory shplonkNuChallengeElements;\n        shplonkNuChallengeElements[0] = Fr.unwrap(prevChallenge);\n\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            shplonkNuChallengeElements[i + 1] = Fr.unwrap(proof.geminiAEvaluations[i]);\n        }\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(shplonkNuChallengeElements)));\n        Fr unused;\n        (shplonkNu, unused) = splitChallenge(nextPreviousChallenge);\n    }\n\n    function generateShplonkZChallenge(Honk.Proof memory proof, Fr prevChallenge)\n        internal\n        pure\n        returns (Fr shplonkZ, Fr nextPreviousChallenge)\n    {\n        uint256[5] memory shplonkZChallengeElements;\n        shplonkZChallengeElements[0] = Fr.unwrap(prevChallenge);\n\n        shplonkZChallengeElements[1] = proof.shplonkQ.x_0;\n        shplonkZChallengeElements[2] = proof.shplonkQ.x_1;\n        shplonkZChallengeElements[3] = proof.shplonkQ.y_0;\n        shplonkZChallengeElements[4] = proof.shplonkQ.y_1;\n\n        nextPreviousChallenge = FrLib.fromBytes32(keccak256(abi.encodePacked(shplonkZChallengeElements)));\n        Fr unused;\n        (shplonkZ, unused) = splitChallenge(nextPreviousChallenge);\n    }\n\n    function loadProof(bytes calldata proof) internal pure returns (Honk.Proof memory p) {\n        // Commitments\n        p.w1 = bytesToG1ProofPoint(proof[0x0:0x80]);\n\n        p.w2 = bytesToG1ProofPoint(proof[0x80:0x100]);\n        p.w3 = bytesToG1ProofPoint(proof[0x100:0x180]);\n\n        // Lookup / Permutation Helper Commitments\n        p.lookupReadCounts = bytesToG1ProofPoint(proof[0x180:0x200]);\n        p.lookupReadTags = bytesToG1ProofPoint(proof[0x200:0x280]);\n        p.w4 = bytesToG1ProofPoint(proof[0x280:0x300]);\n        p.lookupInverses = bytesToG1ProofPoint(proof[0x300:0x380]);\n        p.zPerm = bytesToG1ProofPoint(proof[0x380:0x400]);\n        uint256 boundary = 0x400;\n\n        // Sumcheck univariates\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            for (uint256 j = 0; j < BATCHED_RELATION_PARTIAL_LENGTH; j++) {\n                p.sumcheckUnivariates[i][j] = bytesToFr(proof[boundary:boundary + 0x20]);\n                boundary += 0x20;\n            }\n        }\n        // Sumcheck evaluations\n        for (uint256 i = 0; i < NUMBER_OF_ENTITIES; i++) {\n            p.sumcheckEvaluations[i] = bytesToFr(proof[boundary:boundary + 0x20]);\n            boundary += 0x20;\n        }\n\n        // Gemini\n        // Read gemini fold univariates\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; i++) {\n            p.geminiFoldComms[i] = bytesToG1ProofPoint(proof[boundary:boundary + 0x80]);\n            boundary += 0x80;\n        }\n\n        // Read gemini a evaluations\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N; i++) {\n            p.geminiAEvaluations[i] = bytesToFr(proof[boundary:boundary + 0x20]);\n            boundary += 0x20;\n        }\n\n        // Shplonk\n        p.shplonkQ = bytesToG1ProofPoint(proof[boundary:boundary + 0x80]);\n        boundary = boundary + 0x80;\n        // KZG\n        p.kzgQuotient = bytesToG1ProofPoint(proof[boundary:boundary + 0x80]);\n    }\n}\n\n\n// Fr utility\n\nfunction bytesToFr(bytes calldata proofSection) pure returns (Fr scalar) {\n    require(proofSection.length == 0x20, \"invalid bytes scalar\");\n    scalar = FrLib.fromBytes32(bytes32(proofSection));\n}\n\n// EC Point utilities\nfunction convertProofPoint(Honk.G1ProofPoint memory input) pure returns (Honk.G1Point memory) {\n    return Honk.G1Point({x: input.x_0 | (input.x_1 << 136), y: input.y_0 | (input.y_1 << 136)});\n}\n\nfunction bytesToG1ProofPoint(bytes calldata proofSection) pure returns (Honk.G1ProofPoint memory point) {\n    require(proofSection.length == 0x80, \"invalid bytes point\");\n    point = Honk.G1ProofPoint({\n        x_0: uint256(bytes32(proofSection[0x00:0x20])),\n        x_1: uint256(bytes32(proofSection[0x20:0x40])),\n        y_0: uint256(bytes32(proofSection[0x40:0x60])),\n        y_1: uint256(bytes32(proofSection[0x60:0x80]))\n    });\n}\n\nfunction negateInplace(Honk.G1Point memory point) pure returns (Honk.G1Point memory) {\n    point.y = (Q - point.y) % Q;\n    return point;\n}\n\n function pairing(Honk.G1Point memory rhs, Honk.G1Point memory lhs) view returns (bool) {\n        bytes memory input = abi.encodePacked(\n            rhs.x,\n            rhs.y,\n            // Fixed G1 point\n            uint256(0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2),\n            uint256(0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed),\n            uint256(0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b),\n            uint256(0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa),\n            lhs.x,\n            lhs.y,\n            // G1 point from VK\n            uint256(0x260e01b251f6f1c7e7ff4e580791dee8ea51d87a358e038b4efe30fac09383c1),\n            uint256(0x0118c4d5b837bcc2bc89b5b398b5974e9f5944073b32078b7e231fec938883b0),\n            uint256(0x04fc6369f7110fe3d25156c1bb9a72859cf2a04641f99ba4ee413c80da6a5fe4),\n            uint256(0x22febda3c0c0632a56475b4214e5615e11e6dd3f96e6cea2854a87d4dacc5e55)\n        );\n\n        (bool success, bytes memory result) = address(0x08).staticcall(input);\n        bool decodedResult = abi.decode(result, (bool));\n        return success && decodedResult;\n    }\n\n\nlibrary RelationsLib {\n    Fr internal constant GRUMPKIN_CURVE_B_PARAMETER_NEGATED = Fr.wrap(17); // -(-17)\n\n    function accumulateRelationEvaluations(\n         Fr[NUMBER_OF_ENTITIES] memory purportedEvaluations,\n        Honk.RelationParameters memory rp,\n        Fr[NUMBER_OF_ALPHAS] memory alphas,\n        Fr powPartialEval\n    ) internal pure returns (Fr accumulator) {\n        Fr[NUMBER_OF_SUBRELATIONS] memory evaluations;\n\n        // Accumulate all relations in Ultra Honk - each with varying number of subrelations\n        accumulateArithmeticRelation(purportedEvaluations, evaluations, powPartialEval);\n        accumulatePermutationRelation(purportedEvaluations, rp, evaluations, powPartialEval);\n        accumulateLogDerivativeLookupRelation(purportedEvaluations, rp, evaluations, powPartialEval);\n        accumulateDeltaRangeRelation(purportedEvaluations, evaluations, powPartialEval);\n        accumulateEllipticRelation(purportedEvaluations, evaluations, powPartialEval);\n        accumulateAuxillaryRelation(purportedEvaluations, rp, evaluations, powPartialEval);\n        accumulatePoseidonExternalRelation(purportedEvaluations, evaluations, powPartialEval);\n        accumulatePoseidonInternalRelation(purportedEvaluations, evaluations, powPartialEval);\n        // batch the subrelations with the alpha challenges to obtain the full honk relation\n        accumulator = scaleAndBatchSubrelations(evaluations, alphas);\n    }\n\n    /**\n     * Aesthetic helper function that is used to index by enum into proof.sumcheckEvaluations, it avoids\n     * the relation checking code being cluttered with uint256 type casting, which is often a different colour in code\n     * editors, and thus is noisy.\n     */\n    function wire(Fr[NUMBER_OF_ENTITIES] memory p, WIRE _wire) internal pure returns (Fr) {\n        return p[uint256(_wire)];\n    }\n\n    uint256 internal constant NEG_HALF_MODULO_P = 0x183227397098d014dc2822db40c0ac2e9419f4243cdcb848a1f0fac9f8000000;\n    /**\n     * Ultra Arithmetic Relation\n     *\n     */\n    function accumulateArithmeticRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        // Relation 0\n        Fr q_arith = wire(p, WIRE.Q_ARITH);\n        {\n            Fr neg_half = Fr.wrap(NEG_HALF_MODULO_P);\n\n            Fr accum = (q_arith - Fr.wrap(3)) * (wire(p, WIRE.Q_M) * wire(p, WIRE.W_R) * wire(p, WIRE.W_L)) * neg_half;\n            accum = accum + (wire(p, WIRE.Q_L) * wire(p, WIRE.W_L)) + (wire(p, WIRE.Q_R) * wire(p, WIRE.W_R))\n                + (wire(p, WIRE.Q_O) * wire(p, WIRE.W_O)) + (wire(p, WIRE.Q_4) * wire(p, WIRE.W_4)) + wire(p, WIRE.Q_C);\n            accum = accum + (q_arith - Fr.wrap(1)) * wire(p, WIRE.W_4_SHIFT);\n            accum = accum * q_arith;\n            accum = accum * domainSep;\n            evals[0] = accum;\n        }\n\n        // Relation 1\n        {\n            Fr accum = wire(p, WIRE.W_L) + wire(p, WIRE.W_4) - wire(p, WIRE.W_L_SHIFT) + wire(p, WIRE.Q_M);\n            accum = accum * (q_arith - Fr.wrap(2));\n            accum = accum * (q_arith - Fr.wrap(1));\n            accum = accum * q_arith;\n            accum = accum * domainSep;\n            evals[1] = accum;\n        }\n    }\n\n    function accumulatePermutationRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Honk.RelationParameters memory rp,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        Fr grand_product_numerator;\n        Fr grand_product_denominator;\n\n        {\n            Fr num = wire(p, WIRE.W_L) + wire(p, WIRE.ID_1) * rp.beta + rp.gamma;\n            num = num * (wire(p, WIRE.W_R) + wire(p, WIRE.ID_2) * rp.beta + rp.gamma);\n            num = num * (wire(p, WIRE.W_O) + wire(p, WIRE.ID_3) * rp.beta + rp.gamma);\n            num = num * (wire(p, WIRE.W_4) + wire(p, WIRE.ID_4) * rp.beta + rp.gamma);\n\n            grand_product_numerator = num;\n        }\n        {\n            Fr den = wire(p, WIRE.W_L) + wire(p, WIRE.SIGMA_1) * rp.beta + rp.gamma;\n            den = den * (wire(p, WIRE.W_R) + wire(p, WIRE.SIGMA_2) * rp.beta + rp.gamma);\n            den = den * (wire(p, WIRE.W_O) + wire(p, WIRE.SIGMA_3) * rp.beta + rp.gamma);\n            den = den * (wire(p, WIRE.W_4) + wire(p, WIRE.SIGMA_4) * rp.beta + rp.gamma);\n\n            grand_product_denominator = den;\n        }\n\n        // Contribution 2\n        {\n            Fr acc = (wire(p, WIRE.Z_PERM) + wire(p, WIRE.LAGRANGE_FIRST)) * grand_product_numerator;\n\n            acc = acc\n                - (\n                    (wire(p, WIRE.Z_PERM_SHIFT) + (wire(p, WIRE.LAGRANGE_LAST) * rp.publicInputsDelta))\n                        * grand_product_denominator\n                );\n            acc = acc * domainSep;\n            evals[2] = acc;\n        }\n\n        // Contribution 3\n        {\n            Fr acc = (wire(p, WIRE.LAGRANGE_LAST) * wire(p, WIRE.Z_PERM_SHIFT)) * domainSep;\n            evals[3] = acc;\n        }\n    }\n\n    function accumulateLogDerivativeLookupRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Honk.RelationParameters memory rp,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        Fr write_term;\n        Fr read_term;\n\n        // Calculate the write term (the table accumulation)\n        {\n            write_term = wire(p, WIRE.TABLE_1) + rp.gamma + (wire(p, WIRE.TABLE_2) * rp.eta)\n                + (wire(p, WIRE.TABLE_3) * rp.etaTwo) + (wire(p, WIRE.TABLE_4) * rp.etaThree);\n        }\n\n        // Calculate the write term\n        {\n            Fr derived_entry_1 = wire(p, WIRE.W_L) + rp.gamma + (wire(p, WIRE.Q_R) * wire(p, WIRE.W_L_SHIFT));\n            Fr derived_entry_2 = wire(p, WIRE.W_R) + wire(p, WIRE.Q_M) * wire(p, WIRE.W_R_SHIFT);\n            Fr derived_entry_3 = wire(p, WIRE.W_O) + wire(p, WIRE.Q_C) * wire(p, WIRE.W_O_SHIFT);\n\n            read_term = derived_entry_1 + (derived_entry_2 * rp.eta) + (derived_entry_3 * rp.etaTwo)\n                + (wire(p, WIRE.Q_O) * rp.etaThree);\n        }\n\n        Fr read_inverse = wire(p, WIRE.LOOKUP_INVERSES) * write_term;\n        Fr write_inverse = wire(p, WIRE.LOOKUP_INVERSES) * read_term;\n\n        Fr inverse_exists_xor = wire(p, WIRE.LOOKUP_READ_TAGS) + wire(p, WIRE.Q_LOOKUP)\n            - (wire(p, WIRE.LOOKUP_READ_TAGS) * wire(p, WIRE.Q_LOOKUP));\n\n        // Inverse calculated correctly relation\n        Fr accumulatorNone = read_term * write_term * wire(p, WIRE.LOOKUP_INVERSES) - inverse_exists_xor;\n        accumulatorNone = accumulatorNone * domainSep;\n\n        // Inverse\n        Fr accumulatorOne = wire(p, WIRE.Q_LOOKUP) * read_inverse - wire(p, WIRE.LOOKUP_READ_COUNTS) * write_inverse;\n\n        evals[4] = accumulatorNone;\n        evals[5] = accumulatorOne;\n    }\n\n    function accumulateDeltaRangeRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        Fr minus_one = Fr.wrap(0) - Fr.wrap(1);\n        Fr minus_two = Fr.wrap(0) - Fr.wrap(2);\n        Fr minus_three = Fr.wrap(0) - Fr.wrap(3);\n\n        // Compute wire differences\n        Fr delta_1 = wire(p, WIRE.W_R) - wire(p, WIRE.W_L);\n        Fr delta_2 = wire(p, WIRE.W_O) - wire(p, WIRE.W_R);\n        Fr delta_3 = wire(p, WIRE.W_4) - wire(p, WIRE.W_O);\n        Fr delta_4 = wire(p, WIRE.W_L_SHIFT) - wire(p, WIRE.W_4);\n\n        // Contribution 6\n        {\n            Fr acc = delta_1;\n            acc = acc * (delta_1 + minus_one);\n            acc = acc * (delta_1 + minus_two);\n            acc = acc * (delta_1 + minus_three);\n            acc = acc * wire(p, WIRE.Q_RANGE);\n            acc = acc * domainSep;\n            evals[6] = acc;\n        }\n\n        // Contribution 7\n        {\n            Fr acc = delta_2;\n            acc = acc * (delta_2 + minus_one);\n            acc = acc * (delta_2 + minus_two);\n            acc = acc * (delta_2 + minus_three);\n            acc = acc * wire(p, WIRE.Q_RANGE);\n            acc = acc * domainSep;\n            evals[7] = acc;\n        }\n\n        // Contribution 8\n        {\n            Fr acc = delta_3;\n            acc = acc * (delta_3 + minus_one);\n            acc = acc * (delta_3 + minus_two);\n            acc = acc * (delta_3 + minus_three);\n            acc = acc * wire(p, WIRE.Q_RANGE);\n            acc = acc * domainSep;\n            evals[8] = acc;\n        }\n\n        // Contribution 9\n        {\n            Fr acc = delta_4;\n            acc = acc * (delta_4 + minus_one);\n            acc = acc * (delta_4 + minus_two);\n            acc = acc * (delta_4 + minus_three);\n            acc = acc * wire(p, WIRE.Q_RANGE);\n            acc = acc * domainSep;\n            evals[9] = acc;\n        }\n    }\n\n    struct EllipticParams {\n        // Points\n        Fr x_1;\n        Fr y_1;\n        Fr x_2;\n        Fr y_2;\n        Fr y_3;\n        Fr x_3;\n        // push accumulators into memory\n        Fr x_double_identity;\n    }\n\n    function accumulateEllipticRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        EllipticParams memory ep;\n        ep.x_1 = wire(p, WIRE.W_R);\n        ep.y_1 = wire(p, WIRE.W_O);\n\n        ep.x_2 = wire(p, WIRE.W_L_SHIFT);\n        ep.y_2 = wire(p, WIRE.W_4_SHIFT);\n        ep.y_3 = wire(p, WIRE.W_O_SHIFT);\n        ep.x_3 = wire(p, WIRE.W_R_SHIFT);\n\n        Fr q_sign = wire(p, WIRE.Q_L);\n        Fr q_is_double = wire(p, WIRE.Q_M);\n\n        // Contribution 10 point addition, x-coordinate check\n        // q_elliptic * (x3 + x2 + x1)(x2 - x1)(x2 - x1) - y2^2 - y1^2 + 2(y2y1)*q_sign = 0\n        Fr x_diff = (ep.x_2 - ep.x_1);\n        Fr y1_sqr = (ep.y_1 * ep.y_1);\n        {\n            // Move to top\n            Fr partialEval = domainSep;\n\n            Fr y2_sqr = (ep.y_2 * ep.y_2);\n            Fr y1y2 = ep.y_1 * ep.y_2 * q_sign;\n            Fr x_add_identity = (ep.x_3 + ep.x_2 + ep.x_1);\n            x_add_identity = x_add_identity * x_diff * x_diff;\n            x_add_identity = x_add_identity - y2_sqr - y1_sqr + y1y2 + y1y2;\n\n            evals[10] = x_add_identity * partialEval * wire(p, WIRE.Q_ELLIPTIC) * (Fr.wrap(1) - q_is_double);\n        }\n\n        // Contribution 11 point addition, x-coordinate check\n        // q_elliptic * (q_sign * y1 + y3)(x2 - x1) + (x3 - x1)(y2 - q_sign * y1) = 0\n        {\n            Fr y1_plus_y3 = ep.y_1 + ep.y_3;\n            Fr y_diff = ep.y_2 * q_sign - ep.y_1;\n            Fr y_add_identity = y1_plus_y3 * x_diff + (ep.x_3 - ep.x_1) * y_diff;\n            evals[11] = y_add_identity * domainSep * wire(p, WIRE.Q_ELLIPTIC) * (Fr.wrap(1) - q_is_double);\n        }\n\n        // Contribution 10 point doubling, x-coordinate check\n        // (x3 + x1 + x1) (4y1*y1) - 9 * x1 * x1 * x1 * x1 = 0\n        // N.B. we're using the equivalence x1*x1*x1 === y1*y1 - curve_b to reduce degree by 1\n        {\n            Fr x_pow_4 = (y1_sqr + GRUMPKIN_CURVE_B_PARAMETER_NEGATED) * ep.x_1;\n            Fr y1_sqr_mul_4 = y1_sqr + y1_sqr;\n            y1_sqr_mul_4 = y1_sqr_mul_4 + y1_sqr_mul_4;\n            Fr x1_pow_4_mul_9 = x_pow_4 * Fr.wrap(9);\n\n            // NOTE: pushed into memory (stack >:'( )\n            ep.x_double_identity = (ep.x_3 + ep.x_1 + ep.x_1) * y1_sqr_mul_4 - x1_pow_4_mul_9;\n\n            Fr acc = ep.x_double_identity * domainSep * wire(p, WIRE.Q_ELLIPTIC) * q_is_double;\n            evals[10] = evals[10] + acc;\n        }\n\n        // Contribution 11 point doubling, y-coordinate check\n        // (y1 + y1) (2y1) - (3 * x1 * x1)(x1 - x3) = 0\n        {\n            Fr x1_sqr_mul_3 = (ep.x_1 + ep.x_1 + ep.x_1) * ep.x_1;\n            Fr y_double_identity = x1_sqr_mul_3 * (ep.x_1 - ep.x_3) - (ep.y_1 + ep.y_1) * (ep.y_1 + ep.y_3);\n            evals[11] = evals[11] + y_double_identity * domainSep * wire(p, WIRE.Q_ELLIPTIC) * q_is_double;\n        }\n    }\n\n    // Constants for the auxiliary relation\n    Fr constant LIMB_SIZE = Fr.wrap(uint256(1) << 68);\n    Fr constant SUBLIMB_SHIFT = Fr.wrap(uint256(1) << 14);\n\n    // Parameters used within the Auxiliary Relation\n    // A struct is used to work around stack too deep. This relation has alot of variables\n    struct AuxParams {\n        Fr limb_subproduct;\n        Fr non_native_field_gate_1;\n        Fr non_native_field_gate_2;\n        Fr non_native_field_gate_3;\n        Fr limb_accumulator_1;\n        Fr limb_accumulator_2;\n        Fr memory_record_check;\n        Fr partial_record_check;\n        Fr next_gate_access_type;\n        Fr record_delta;\n        Fr index_delta;\n        Fr adjacent_values_match_if_adjacent_indices_match;\n        Fr adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation;\n        Fr access_check;\n        Fr next_gate_access_type_is_boolean;\n        Fr ROM_consistency_check_identity;\n        Fr RAM_consistency_check_identity;\n        Fr timestamp_delta;\n        Fr RAM_timestamp_check_identity;\n        Fr memory_identity;\n        Fr index_is_monotonically_increasing;\n        Fr auxiliary_identity;\n    }\n\n    function accumulateAuxillaryRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Honk.RelationParameters memory rp,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        AuxParams memory ap;\n\n        /**\n         * Contribution 12\n         * Non native field arithmetic gate 2\n         * deg 4\n         *\n         *             _                                                                               _\n         *            /   _                   _                               _       14                \\\n         * q_2 . q_4 |   (w_1 . w_2) + (w_1 . w_2) + (w_1 . w_4 + w_2 . w_3 - w_3) . 2    - w_3 - w_4   |\n         *            \\_                                                                               _/\n         *\n         *\n         */\n        ap.limb_subproduct = wire(p, WIRE.W_L) * wire(p, WIRE.W_R_SHIFT) + wire(p, WIRE.W_L_SHIFT) * wire(p, WIRE.W_R);\n        ap.non_native_field_gate_2 =\n            (wire(p, WIRE.W_L) * wire(p, WIRE.W_4) + wire(p, WIRE.W_R) * wire(p, WIRE.W_O) - wire(p, WIRE.W_O_SHIFT));\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 * LIMB_SIZE;\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 - wire(p, WIRE.W_4_SHIFT);\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 + ap.limb_subproduct;\n        ap.non_native_field_gate_2 = ap.non_native_field_gate_2 * wire(p, WIRE.Q_4);\n\n        ap.limb_subproduct = ap.limb_subproduct * LIMB_SIZE;\n        ap.limb_subproduct = ap.limb_subproduct + (wire(p, WIRE.W_L_SHIFT) * wire(p, WIRE.W_R_SHIFT));\n        ap.non_native_field_gate_1 = ap.limb_subproduct;\n        ap.non_native_field_gate_1 = ap.non_native_field_gate_1 - (wire(p, WIRE.W_O) + wire(p, WIRE.W_4));\n        ap.non_native_field_gate_1 = ap.non_native_field_gate_1 * wire(p, WIRE.Q_O);\n\n        ap.non_native_field_gate_3 = ap.limb_subproduct;\n        ap.non_native_field_gate_3 = ap.non_native_field_gate_3 + wire(p, WIRE.W_4);\n        ap.non_native_field_gate_3 = ap.non_native_field_gate_3 - (wire(p, WIRE.W_O_SHIFT) + wire(p, WIRE.W_4_SHIFT));\n        ap.non_native_field_gate_3 = ap.non_native_field_gate_3 * wire(p, WIRE.Q_M);\n\n        Fr non_native_field_identity =\n            ap.non_native_field_gate_1 + ap.non_native_field_gate_2 + ap.non_native_field_gate_3;\n        non_native_field_identity = non_native_field_identity * wire(p, WIRE.Q_R);\n\n        // ((((w2' * 2^14 + w1') * 2^14 + w3) * 2^14 + w2) * 2^14 + w1 - w4) * qm\n        // deg 2\n        ap.limb_accumulator_1 = wire(p, WIRE.W_R_SHIFT) * SUBLIMB_SHIFT;\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_L_SHIFT);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_O);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_R);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 + wire(p, WIRE.W_L);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 - wire(p, WIRE.W_4);\n        ap.limb_accumulator_1 = ap.limb_accumulator_1 * wire(p, WIRE.Q_4);\n\n        // ((((w3' * 2^14 + w2') * 2^14 + w1') * 2^14 + w4) * 2^14 + w3 - w4') * qm\n        // deg 2\n        ap.limb_accumulator_2 = wire(p, WIRE.W_O_SHIFT) * SUBLIMB_SHIFT;\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_R_SHIFT);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_L_SHIFT);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_4);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * SUBLIMB_SHIFT;\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 + wire(p, WIRE.W_O);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 - wire(p, WIRE.W_4_SHIFT);\n        ap.limb_accumulator_2 = ap.limb_accumulator_2 * wire(p, WIRE.Q_M);\n\n        Fr limb_accumulator_identity = ap.limb_accumulator_1 + ap.limb_accumulator_2;\n        limb_accumulator_identity = limb_accumulator_identity * wire(p, WIRE.Q_O); //  deg 3\n\n        /**\n         * MEMORY\n         *\n         * A RAM memory record contains a tuple of the following fields:\n         *  * i: `index` of memory cell being accessed\n         *  * t: `timestamp` of memory cell being accessed (used for RAM, set to 0 for ROM)\n         *  * v: `value` of memory cell being accessed\n         *  * a: `access` type of record. read: 0 = read, 1 = write\n         *  * r: `record` of memory cell. record = access + index * eta + timestamp * eta_two + value * eta_three\n         *\n         * A ROM memory record contains a tuple of the following fields:\n         *  * i: `index` of memory cell being accessed\n         *  * v: `value1` of memory cell being accessed (ROM tables can store up to 2 values per index)\n         *  * v2:`value2` of memory cell being accessed (ROM tables can store up to 2 values per index)\n         *  * r: `record` of memory cell. record = index * eta + value2 * eta_two + value1 * eta_three\n         *\n         *  When performing a read/write access, the values of i, t, v, v2, a, r are stored in the following wires +\n         * selectors, depending on whether the gate is a RAM read/write or a ROM read\n         *\n         *  | gate type | i  | v2/t  |  v | a  | r  |\n         *  | --------- | -- | ----- | -- | -- | -- |\n         *  | ROM       | w1 | w2    | w3 | -- | w4 |\n         *  | RAM       | w1 | w2    | w3 | qc | w4 |\n         *\n         * (for accesses where `index` is a circuit constant, it is assumed the circuit will apply a copy constraint on\n         * `w2` to fix its value)\n         *\n         *\n         */\n\n        /**\n         * Memory Record Check\n         * Partial degree: 1\n         * Total degree: 4\n         *\n         * A ROM/ROM access gate can be evaluated with the identity:\n         *\n         * qc + w1 \\eta + w2 \\eta_two + w3 \\eta_three - w4 = 0\n         *\n         * For ROM gates, qc = 0\n         */\n        ap.memory_record_check = wire(p, WIRE.W_O) * rp.etaThree;\n        ap.memory_record_check = ap.memory_record_check + (wire(p, WIRE.W_R) * rp.etaTwo);\n        ap.memory_record_check = ap.memory_record_check + (wire(p, WIRE.W_L) * rp.eta);\n        ap.memory_record_check = ap.memory_record_check + wire(p, WIRE.Q_C);\n        ap.partial_record_check = ap.memory_record_check; // used in RAM consistency check; deg 1 or 4\n        ap.memory_record_check = ap.memory_record_check - wire(p, WIRE.W_4);\n\n        /**\n         * Contribution 13 & 14\n         * ROM Consistency Check\n         * Partial degree: 1\n         * Total degree: 4\n         *\n         * For every ROM read, a set equivalence check is applied between the record witnesses, and a second set of\n         * records that are sorted.\n         *\n         * We apply the following checks for the sorted records:\n         *\n         * 1. w1, w2, w3 correctly map to 'index', 'v1, 'v2' for a given record value at w4\n         * 2. index values for adjacent records are monotonically increasing\n         * 3. if, at gate i, index_i == index_{i + 1}, then value1_i == value1_{i + 1} and value2_i == value2_{i + 1}\n         *\n         */\n        ap.index_delta = wire(p, WIRE.W_L_SHIFT) - wire(p, WIRE.W_L);\n        ap.record_delta = wire(p, WIRE.W_4_SHIFT) - wire(p, WIRE.W_4);\n\n        ap.index_is_monotonically_increasing = ap.index_delta * ap.index_delta - ap.index_delta; // deg 2\n\n        ap.adjacent_values_match_if_adjacent_indices_match = (ap.index_delta * MINUS_ONE + Fr.wrap(1)) * ap.record_delta; // deg 2\n\n        evals[13] = ap.adjacent_values_match_if_adjacent_indices_match * (wire(p, WIRE.Q_L) * wire(p, WIRE.Q_R))\n            * (wire(p, WIRE.Q_AUX) * domainSep); // deg 5\n        evals[14] = ap.index_is_monotonically_increasing * (wire(p, WIRE.Q_L) * wire(p, WIRE.Q_R))\n            * (wire(p, WIRE.Q_AUX) * domainSep); // deg 5\n\n        ap.ROM_consistency_check_identity = ap.memory_record_check * (wire(p, WIRE.Q_L) * wire(p, WIRE.Q_R)); // deg 3 or 7\n\n        /**\n         * Contributions 15,16,17\n         * RAM Consistency Check\n         *\n         * The 'access' type of the record is extracted with the expression `w_4 - ap.partial_record_check`\n         * (i.e. for an honest Prover `w1 * eta + w2 * eta^2 + w3 * eta^3 - w4 = access`.\n         * This is validated by requiring `access` to be boolean\n         *\n         * For two adjacent entries in the sorted list if _both_\n         *  A) index values match\n         *  B) adjacent access value is 0 (i.e. next gate is a READ)\n         * then\n         *  C) both values must match.\n         * The gate boolean check is\n         * (A && B) => C  === !(A && B) || C ===  !A || !B || C\n         *\n         * N.B. it is the responsibility of the circuit writer to ensure that every RAM cell is initialized\n         * with a WRITE operation.\n         */\n        Fr access_type = (wire(p, WIRE.W_4) - ap.partial_record_check); // will be 0 or 1 for honest Prover; deg 1 or 4\n        ap.access_check = access_type * access_type - access_type; // check value is 0 or 1; deg 2 or 8\n\n        ap.next_gate_access_type = wire(p, WIRE.W_O_SHIFT) * rp.etaThree;\n        ap.next_gate_access_type = ap.next_gate_access_type + (wire(p, WIRE.W_R_SHIFT) * rp.etaTwo);\n        ap.next_gate_access_type = ap.next_gate_access_type + (wire(p, WIRE.W_L_SHIFT) * rp.eta);\n        ap.next_gate_access_type = wire(p, WIRE.W_4_SHIFT) - ap.next_gate_access_type;\n\n        Fr value_delta = wire(p, WIRE.W_O_SHIFT) - wire(p, WIRE.W_O);\n        ap.adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation = (\n            ap.index_delta * MINUS_ONE + Fr.wrap(1)\n        ) * value_delta * (ap.next_gate_access_type * MINUS_ONE + Fr.wrap(1)); // deg 3 or 6\n\n        // We can't apply the RAM consistency check identity on the final entry in the sorted list (the wires in the\n        // next gate would make the identity fail).  We need to validate that its 'access type' bool is correct. Can't\n        // do  with an arithmetic gate because of the  `eta` factors. We need to check that the *next* gate's access\n        // type is  correct, to cover this edge case\n        // deg 2 or 4\n        ap.next_gate_access_type_is_boolean =\n            ap.next_gate_access_type * ap.next_gate_access_type - ap.next_gate_access_type;\n\n        // Putting it all together...\n        evals[15] = ap.adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation\n            * (wire(p, WIRE.Q_ARITH)) * (wire(p, WIRE.Q_AUX) * domainSep); // deg 5 or 8\n        evals[16] = ap.index_is_monotonically_increasing * (wire(p, WIRE.Q_ARITH)) * (wire(p, WIRE.Q_AUX) * domainSep); // deg 4\n        evals[17] = ap.next_gate_access_type_is_boolean * (wire(p, WIRE.Q_ARITH)) * (wire(p, WIRE.Q_AUX) * domainSep); // deg 4 or 6\n\n        ap.RAM_consistency_check_identity = ap.access_check * (wire(p, WIRE.Q_ARITH)); // deg 3 or 9\n\n        /**\n         * RAM Timestamp Consistency Check\n         *\n         * | w1 | w2 | w3 | w4 |\n         * | index | timestamp | timestamp_check | -- |\n         *\n         * Let delta_index = index_{i + 1} - index_{i}\n         *\n         * Iff delta_index == 0, timestamp_check = timestamp_{i + 1} - timestamp_i\n         * Else timestamp_check = 0\n         */\n        ap.timestamp_delta = wire(p, WIRE.W_R_SHIFT) - wire(p, WIRE.W_R);\n        ap.RAM_timestamp_check_identity =\n            (ap.index_delta * MINUS_ONE + Fr.wrap(1)) * ap.timestamp_delta - wire(p, WIRE.W_O); // deg 3\n\n        /**\n         * Complete Contribution 12\n         * The complete RAM/ROM memory identity\n         * Partial degree:\n         */\n        ap.memory_identity = ap.ROM_consistency_check_identity; // deg 3 or 6\n        ap.memory_identity =\n            ap.memory_identity + ap.RAM_timestamp_check_identity * (wire(p, WIRE.Q_4) * wire(p, WIRE.Q_L)); // deg 4\n        ap.memory_identity = ap.memory_identity + ap.memory_record_check * (wire(p, WIRE.Q_M) * wire(p, WIRE.Q_L)); // deg 3 or 6\n        ap.memory_identity = ap.memory_identity + ap.RAM_consistency_check_identity; // deg 3 or 9\n\n        // (deg 3 or 9) + (deg 4) + (deg 3)\n        ap.auxiliary_identity = ap.memory_identity + non_native_field_identity + limb_accumulator_identity;\n        ap.auxiliary_identity = ap.auxiliary_identity * (wire(p, WIRE.Q_AUX) * domainSep); // deg 4 or 10\n        evals[12] = ap.auxiliary_identity;\n    }\n\n    struct PoseidonExternalParams {\n        Fr s1;\n        Fr s2;\n        Fr s3;\n        Fr s4;\n        Fr u1;\n        Fr u2;\n        Fr u3;\n        Fr u4;\n        Fr t0;\n        Fr t1;\n        Fr t2;\n        Fr t3;\n        Fr v1;\n        Fr v2;\n        Fr v3;\n        Fr v4;\n        Fr q_pos_by_scaling;\n    }\n\n    function accumulatePoseidonExternalRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        PoseidonExternalParams memory ep;\n\n        ep.s1 = wire(p, WIRE.W_L) + wire(p, WIRE.Q_L);\n        ep.s2 = wire(p, WIRE.W_R) + wire(p, WIRE.Q_R);\n        ep.s3 = wire(p, WIRE.W_O) + wire(p, WIRE.Q_O);\n        ep.s4 = wire(p, WIRE.W_4) + wire(p, WIRE.Q_4);\n\n        ep.u1 = ep.s1 * ep.s1 * ep.s1 * ep.s1 * ep.s1;\n        ep.u2 = ep.s2 * ep.s2 * ep.s2 * ep.s2 * ep.s2;\n        ep.u3 = ep.s3 * ep.s3 * ep.s3 * ep.s3 * ep.s3;\n        ep.u4 = ep.s4 * ep.s4 * ep.s4 * ep.s4 * ep.s4;\n        // matrix mul v = M_E * u with 14 additions\n        ep.t0 = ep.u1 + ep.u2; // u_1 + u_2\n        ep.t1 = ep.u3 + ep.u4; // u_3 + u_4\n        ep.t2 = ep.u2 + ep.u2 + ep.t1; // 2u_2\n        // ep.t2 += ep.t1; // 2u_2 + u_3 + u_4\n        ep.t3 = ep.u4 + ep.u4 + ep.t0; // 2u_4\n        // ep.t3 += ep.t0; // u_1 + u_2 + 2u_4\n        ep.v4 = ep.t1 + ep.t1;\n        ep.v4 = ep.v4 + ep.v4 + ep.t3;\n        // ep.v4 += ep.t3; // u_1 + u_2 + 4u_3 + 6u_4\n        ep.v2 = ep.t0 + ep.t0;\n        ep.v2 = ep.v2 + ep.v2 + ep.t2;\n        // ep.v2 += ep.t2; // 4u_1 + 6u_2 + u_3 + u_4\n        ep.v1 = ep.t3 + ep.v2; // 5u_1 + 7u_2 + u_3 + 3u_4\n        ep.v3 = ep.t2 + ep.v4; // u_1 + 3u_2 + 5u_3 + 7u_4\n\n        ep.q_pos_by_scaling = wire(p, WIRE.Q_POSEIDON2_EXTERNAL) * domainSep;\n        evals[18] = evals[18] + ep.q_pos_by_scaling * (ep.v1 - wire(p, WIRE.W_L_SHIFT));\n\n        evals[19] = evals[19] + ep.q_pos_by_scaling * (ep.v2 - wire(p, WIRE.W_R_SHIFT));\n\n        evals[20] = evals[20] + ep.q_pos_by_scaling * (ep.v3 - wire(p, WIRE.W_O_SHIFT));\n\n        evals[21] = evals[21] + ep.q_pos_by_scaling * (ep.v4 - wire(p, WIRE.W_4_SHIFT));\n    }\n\n    struct PoseidonInternalParams {\n        Fr u1;\n        Fr u2;\n        Fr u3;\n        Fr u4;\n        Fr u_sum;\n        Fr v1;\n        Fr v2;\n        Fr v3;\n        Fr v4;\n        Fr s1;\n        Fr q_pos_by_scaling;\n    }\n\n    function accumulatePoseidonInternalRelation(\n        Fr[NUMBER_OF_ENTITIES] memory p,\n        Fr[NUMBER_OF_SUBRELATIONS] memory evals,\n        Fr domainSep\n    ) internal pure {\n        PoseidonInternalParams memory ip;\n\n        Fr[4] memory INTERNAL_MATRIX_DIAGONAL = [\n            FrLib.from(0x10dc6e9c006ea38b04b1e03b4bd9490c0d03f98929ca1d7fb56821fd19d3b6e7),\n            FrLib.from(0x0c28145b6a44df3e0149b3d0a30b3bb599df9756d4dd9b84a86b38cfb45a740b),\n            FrLib.from(0x00544b8338791518b2c7645a50392798b21f75bb60e3596170067d00141cac15),\n            FrLib.from(0x222c01175718386f2e2e82eb122789e352e105a3b8fa852613bc534433ee428b)\n        ];\n\n        // add round constants\n        ip.s1 = wire(p, WIRE.W_L) + wire(p, WIRE.Q_L);\n\n        // apply s-box round\n        ip.u1 = ip.s1 * ip.s1 * ip.s1 * ip.s1 * ip.s1;\n        ip.u2 = wire(p, WIRE.W_R);\n        ip.u3 = wire(p, WIRE.W_O);\n        ip.u4 = wire(p, WIRE.W_4);\n\n        // matrix mul with v = M_I * u 4 muls and 7 additions\n        ip.u_sum = ip.u1 + ip.u2 + ip.u3 + ip.u4;\n\n        ip.q_pos_by_scaling = wire(p, WIRE.Q_POSEIDON2_INTERNAL) * domainSep;\n\n        ip.v1 = ip.u1 * INTERNAL_MATRIX_DIAGONAL[0] + ip.u_sum;\n        evals[22] = evals[22] + ip.q_pos_by_scaling * (ip.v1 - wire(p, WIRE.W_L_SHIFT));\n\n        ip.v2 = ip.u2 * INTERNAL_MATRIX_DIAGONAL[1] + ip.u_sum;\n        evals[23] = evals[23] + ip.q_pos_by_scaling * (ip.v2 - wire(p, WIRE.W_R_SHIFT));\n\n        ip.v3 = ip.u3 * INTERNAL_MATRIX_DIAGONAL[2] + ip.u_sum;\n        evals[24] = evals[24] + ip.q_pos_by_scaling * (ip.v3 - wire(p, WIRE.W_O_SHIFT));\n\n        ip.v4 = ip.u4 * INTERNAL_MATRIX_DIAGONAL[3] + ip.u_sum;\n        evals[25] = evals[25] + ip.q_pos_by_scaling * (ip.v4 - wire(p, WIRE.W_4_SHIFT));\n    }\n\n    function scaleAndBatchSubrelations(\n        Fr[NUMBER_OF_SUBRELATIONS] memory evaluations,\n        Fr[NUMBER_OF_ALPHAS] memory subrelationChallenges\n    ) internal pure returns (Fr accumulator) {\n        accumulator = accumulator + evaluations[0];\n\n        for (uint256 i = 1; i < NUMBER_OF_SUBRELATIONS; ++i) {\n            accumulator = accumulator + evaluations[i] * subrelationChallenges[i - 1];\n        }\n    }\n}\n\nstruct ShpleminiIntermediates {\n    Fr unshiftedScalar;\n    Fr shiftedScalar;\n    // Scalar to be multiplied by [1]₁\n    Fr constantTermAccumulator;\n    // Accumulator for powers of rho\n    Fr batchingChallenge;\n    // Linear combination of multilinear (sumcheck) evaluations and powers of rho\n    Fr batchedEvaluation;\n    // 1/(z - r^{2^i}) for i = 0, ..., logSize, dynamically updated\n    Fr posInvertedDenominator;\n    // 1/(z + r^{2^i}) for i = 0, ..., logSize, dynamically updated\n    Fr negInvertedDenominator;\n    // v^{2i} * 1/(z - r^{2^i})\n    Fr scalingFactorPos;\n    // v^{2i+1} * 1/(z + r^{2^i})\n    Fr scalingFactorNeg;\n    // // Fold_i(r^{2^i}) reconstructed by Verifier\n    // Fr[CONST_PROOF_SIZE_LOG_N] foldPosEvaluations;\n}\n\nlibrary CommitmentSchemeLib {\n    using FrLib for Fr;\n\n    function computeSquares(Fr r) internal pure returns (Fr[CONST_PROOF_SIZE_LOG_N] memory squares) {\n        squares[0] = r;\n        for (uint256 i = 1; i < CONST_PROOF_SIZE_LOG_N; ++i) {\n            squares[i] = squares[i - 1].sqr();\n        }\n    }\n\n    // Compute the evaluations  A_l(r^{2^l}) for l = 0, ..., m-1\n    function computeFoldPosEvaluations(\n        Fr[CONST_PROOF_SIZE_LOG_N] memory sumcheckUChallenges,\n        Fr batchedEvalAccumulator,\n        Fr[CONST_PROOF_SIZE_LOG_N] memory geminiEvaluations,\n        Fr[CONST_PROOF_SIZE_LOG_N] memory geminiEvalChallengePowers,\n        uint256 logSize\n    ) internal view returns (Fr[CONST_PROOF_SIZE_LOG_N] memory foldPosEvaluations) {\n        for (uint256 i = CONST_PROOF_SIZE_LOG_N; i > 0; --i) {\n            Fr challengePower = geminiEvalChallengePowers[i - 1];\n            Fr u = sumcheckUChallenges[i - 1];\n\n            Fr batchedEvalRoundAcc = (\n                (challengePower * batchedEvalAccumulator * Fr.wrap(2))\n                    - geminiEvaluations[i - 1] * (challengePower * (Fr.wrap(1) - u) - u)\n            );\n            // Divide by the denominator\n            batchedEvalRoundAcc = batchedEvalRoundAcc * (challengePower * (Fr.wrap(1) - u) + u).invert();\n\n            if (i <= logSize) {\n                batchedEvalAccumulator = batchedEvalRoundAcc;\n                foldPosEvaluations[i - 1] = batchedEvalRoundAcc;\n            }\n        }\n\n    }\n}\n\ninterface IVerifier {\n    function verify(bytes calldata _proof, bytes32[] calldata _publicInputs) external view returns (bool);\n}\n\n\nabstract contract BaseHonkVerifier is IVerifier {\n    using FrLib for Fr;\n\n    uint256 immutable n;\n    uint256 immutable logN;\n    uint256 immutable numPublicInputs;\n\n    constructor(uint256 _n, uint256 _logN, uint256 _numPublicInputs) {\n        n = _n;\n        logN = _logN;\n        numPublicInputs = _numPublicInputs;\n    }\n\n    error ProofLengthWrong();\n    error PublicInputsLengthWrong();\n    error SumcheckFailed();\n    error ShpleminiFailed();\n\n    // Number of field elements in a ultra honk zero knowledge proof\n    uint256 constant PROOF_SIZE = 440;\n\n    function loadVerificationKey() internal pure virtual returns (Honk.VerificationKey memory);\n\n    function verify(bytes calldata proof, bytes32[] calldata publicInputs) public view override returns (bool) {\n         // Check the received proof is the expected size where each field element is 32 bytes\n        if (proof.length != PROOF_SIZE * 32) {\n            revert ProofLengthWrong();\n        }\n\n        Honk.VerificationKey memory vk = loadVerificationKey();\n        Honk.Proof memory p = TranscriptLib.loadProof(proof);\n\n        if (publicInputs.length != vk.publicInputsSize) {\n            revert PublicInputsLengthWrong();\n        }\n\n        // Generate the fiat shamir challenges for the whole protocol\n        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1281): Add pubInputsOffset to VK or remove entirely.\n        Transcript memory t = TranscriptLib.generateTranscript(p, publicInputs, vk.circuitSize, vk.publicInputsSize, /*pubInputsOffset=*/1);\n\n        // Derive public input delta\n        // TODO(https://github.com/AztecProtocol/barretenberg/issues/1281): Add pubInputsOffset to VK or remove entirely.\n        t.relationParameters.publicInputsDelta = computePublicInputDelta(\n            publicInputs, t.relationParameters.beta, t.relationParameters.gamma, /*pubInputsOffset=*/1\n        );\n\n        // Sumcheck\n        bool sumcheckVerified = verifySumcheck(p, t);\n        if (!sumcheckVerified) revert SumcheckFailed();\n\n        bool shpleminiVerified = verifyShplemini(p, vk, t);\n        if (!shpleminiVerified) revert ShpleminiFailed();\n\n        return sumcheckVerified && shpleminiVerified; // Boolean condition not required - nice for vanity :)\n    }\n\n    function computePublicInputDelta(bytes32[] memory publicInputs, Fr beta, Fr gamma, uint256 offset)\n        internal\n        view\n        returns (Fr publicInputDelta)\n    {\n        Fr numerator = Fr.wrap(1);\n        Fr denominator = Fr.wrap(1);\n\n        Fr numeratorAcc = gamma + (beta * FrLib.from(n + offset));\n        Fr denominatorAcc = gamma - (beta * FrLib.from(offset + 1));\n\n        {\n            for (uint256 i = 0; i < numPublicInputs; i++) {\n                Fr pubInput = FrLib.fromBytes32(publicInputs[i]);\n\n                numerator = numerator * (numeratorAcc + pubInput);\n                denominator = denominator * (denominatorAcc + pubInput);\n\n                numeratorAcc = numeratorAcc + beta;\n                denominatorAcc = denominatorAcc - beta;\n            }\n        }\n\n        // Fr delta = numerator / denominator; // TOOO: batch invert later?\n        publicInputDelta = FrLib.div(numerator, denominator);\n    }\n\n    function verifySumcheck(Honk.Proof memory proof, Transcript memory tp) internal view returns (bool verified) {\n        Fr roundTarget;\n        Fr powPartialEvaluation = Fr.wrap(1);\n\n        // We perform sumcheck reductions over log n rounds ( the multivariate degree )\n        for (uint256 round; round < logN; ++round) {\n            Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory roundUnivariate = proof.sumcheckUnivariates[round];\n            bool valid = checkSum(roundUnivariate, roundTarget);\n            if (!valid) revert SumcheckFailed();\n\n            Fr roundChallenge = tp.sumCheckUChallenges[round];\n\n            // Update the round target for the next rounf\n            roundTarget = computeNextTargetSum(roundUnivariate, roundChallenge);\n            powPartialEvaluation = partiallyEvaluatePOW(tp.gateChallenges[round], powPartialEvaluation, roundChallenge);\n        }\n\n        // Last round\n        Fr grandHonkRelationSum =\n            RelationsLib.accumulateRelationEvaluations(proof.sumcheckEvaluations, tp.relationParameters, tp.alphas, powPartialEvaluation);\n        verified = (grandHonkRelationSum == roundTarget);\n    }\n\n    function checkSum(Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory roundUnivariate, Fr roundTarget)\n        internal\n        pure\n        returns (bool checked)\n    {\n        Fr totalSum = roundUnivariate[0] + roundUnivariate[1];\n        checked = totalSum == roundTarget;\n    }\n\n    // Return the new target sum for the next sumcheck round\n    function computeNextTargetSum(Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory roundUnivariates, Fr roundChallenge)\n        internal\n        view\n        returns (Fr targetSum)\n    {\n        // TODO: inline\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory BARYCENTRIC_LAGRANGE_DENOMINATORS = [\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffec51),\n            Fr.wrap(0x00000000000000000000000000000000000000000000000000000000000002d0),\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffff11),\n            Fr.wrap(0x0000000000000000000000000000000000000000000000000000000000000090),\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffff71),\n            Fr.wrap(0x00000000000000000000000000000000000000000000000000000000000000f0),\n            Fr.wrap(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593effffd31),\n            Fr.wrap(0x00000000000000000000000000000000000000000000000000000000000013b0)\n        ];\n\n        // To compute the next target sum, we evaluate the given univariate at a point u (challenge).\n\n        // Performing Barycentric evaluations\n        // Compute B(x)\n        Fr numeratorValue = Fr.wrap(1);\n        for (uint256 i = 0; i < BATCHED_RELATION_PARTIAL_LENGTH; ++i) {\n            numeratorValue = numeratorValue * (roundChallenge - Fr.wrap(i));\n        }\n\n        // Calculate domain size N of inverses\n        Fr[BATCHED_RELATION_PARTIAL_LENGTH] memory denominatorInverses;\n        for (uint256 i = 0; i < BATCHED_RELATION_PARTIAL_LENGTH; ++i) {\n            Fr inv = BARYCENTRIC_LAGRANGE_DENOMINATORS[i];\n            inv = inv * (roundChallenge - Fr.wrap(i));\n            inv = FrLib.invert(inv);\n            denominatorInverses[i] = inv;\n        }\n\n        for (uint256 i = 0; i < BATCHED_RELATION_PARTIAL_LENGTH; ++i) {\n            Fr term = roundUnivariates[i];\n            term = term * denominatorInverses[i];\n            targetSum = targetSum + term;\n        }\n\n        // Scale the sum by the value of B(x)\n        targetSum = targetSum * numeratorValue;\n    }\n\n    // Univariate evaluation of the monomial ((1-X_l) + X_l.B_l) at the challenge point X_l=u_l\n    function partiallyEvaluatePOW(Fr gateChallenge, Fr currentEvaluation, Fr roundChallenge)\n        internal\n        pure\n        returns (Fr newEvaluation)\n    {\n        Fr univariateEval = Fr.wrap(1) + (roundChallenge * (gateChallenge - Fr.wrap(1)));\n        newEvaluation = currentEvaluation * univariateEval;\n    }\n\n    function verifyShplemini(Honk.Proof memory proof, Honk.VerificationKey memory vk, Transcript memory tp)\n        internal\n        view\n        returns (bool verified)\n    {\n        ShpleminiIntermediates memory mem; // stack\n\n        // - Compute vector (r, r², ... , r²⁽ⁿ⁻¹⁾), where n = log_circuit_size\n        Fr[CONST_PROOF_SIZE_LOG_N] memory powers_of_evaluation_challenge = CommitmentSchemeLib.computeSquares(tp.geminiR);\n\n        // Arrays hold values that will be linearly combined for the gemini and shplonk batch openings\n        Fr[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory scalars;\n        Honk.G1Point[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory commitments;\n\n        mem.posInvertedDenominator = (tp.shplonkZ - powers_of_evaluation_challenge[0]).invert();\n        mem.negInvertedDenominator = (tp.shplonkZ + powers_of_evaluation_challenge[0]).invert();\n\n        mem.unshiftedScalar = mem.posInvertedDenominator + (tp.shplonkNu * mem.negInvertedDenominator);\n        mem.shiftedScalar =\n            tp.geminiR.invert() * (mem.posInvertedDenominator - (tp.shplonkNu * mem.negInvertedDenominator));\n\n        scalars[0] = Fr.wrap(1);\n        commitments[0] = convertProofPoint(proof.shplonkQ);\n\n        mem.batchingChallenge = Fr.wrap(1);\n        mem.batchedEvaluation = Fr.wrap(0);\n\n        for (uint256 i = 1; i <= NUMBER_UNSHIFTED; ++i) {\n            scalars[i] = mem.unshiftedScalar.neg() * mem.batchingChallenge;\n            mem.batchedEvaluation = mem.batchedEvaluation + (proof.sumcheckEvaluations[i - 1] * mem.batchingChallenge);\n            mem.batchingChallenge = mem.batchingChallenge * tp.rho;\n        }\n        // g commitments are accumulated at r\n        for (uint256 i = NUMBER_UNSHIFTED + 1; i <= NUMBER_OF_ENTITIES; ++i) {\n            scalars[i] = mem.shiftedScalar.neg() * mem.batchingChallenge;\n            mem.batchedEvaluation = mem.batchedEvaluation + (proof.sumcheckEvaluations[i - 1] * mem.batchingChallenge);\n            mem.batchingChallenge = mem.batchingChallenge * tp.rho;\n        }\n\n        commitments[1] = vk.qm;\n        commitments[2] = vk.qc;\n        commitments[3] = vk.ql;\n        commitments[4] = vk.qr;\n        commitments[5] = vk.qo;\n        commitments[6] = vk.q4;\n        commitments[7] = vk.qLookup;\n        commitments[8] = vk.qArith;\n        commitments[9] = vk.qDeltaRange;\n        commitments[10] = vk.qElliptic;\n        commitments[11] = vk.qAux;\n        commitments[12] = vk.qPoseidon2External;\n        commitments[13] = vk.qPoseidon2Internal;\n        commitments[14] = vk.s1;\n        commitments[15] = vk.s2;\n        commitments[16] = vk.s3;\n        commitments[17] = vk.s4;\n        commitments[18] = vk.id1;\n        commitments[19] = vk.id2;\n        commitments[20] = vk.id3;\n        commitments[21] = vk.id4;\n        commitments[22] = vk.t1;\n        commitments[23] = vk.t2;\n        commitments[24] = vk.t3;\n        commitments[25] = vk.t4;\n        commitments[26] = vk.lagrangeFirst;\n        commitments[27] = vk.lagrangeLast;\n\n        // Accumulate proof points\n        commitments[28] = convertProofPoint(proof.w1);\n        commitments[29] = convertProofPoint(proof.w2);\n        commitments[30] = convertProofPoint(proof.w3);\n        commitments[31] = convertProofPoint(proof.w4);\n        commitments[32] = convertProofPoint(proof.zPerm);\n        commitments[33] = convertProofPoint(proof.lookupInverses);\n        commitments[34] = convertProofPoint(proof.lookupReadCounts);\n        commitments[35] = convertProofPoint(proof.lookupReadTags);\n\n        // to be Shifted\n        commitments[36] = convertProofPoint(proof.w1);\n        commitments[37] = convertProofPoint(proof.w2);\n        commitments[38] = convertProofPoint(proof.w3);\n        commitments[39] = convertProofPoint(proof.w4);\n        commitments[40] = convertProofPoint(proof.zPerm);\n\n        // Add contributions from A₀(r) and A₀(-r) to constant_term_accumulator:\n        // Compute the evaluations A_l(r^{2^l}) for l = 0, ..., logN - 1\n        Fr[CONST_PROOF_SIZE_LOG_N] memory foldPosEvaluations = CommitmentSchemeLib.computeFoldPosEvaluations(\n            tp.sumCheckUChallenges,\n            mem.batchedEvaluation,\n            proof.geminiAEvaluations,\n            powers_of_evaluation_challenge,\n            logN\n        );\n\n        // Compute the Shplonk constant term contributions from A₀(±r)\n        mem.constantTermAccumulator = foldPosEvaluations[0] * mem.posInvertedDenominator;\n        mem.constantTermAccumulator =\n            mem.constantTermAccumulator + (proof.geminiAEvaluations[0] * tp.shplonkNu * mem.negInvertedDenominator);\n        mem.batchingChallenge = tp.shplonkNu.sqr();\n\n        // Compute Shplonk constant term contributions from Aₗ(±r^{2ˡ}) for l = 1, ..., m-1;\n        // Compute scalar multipliers for each fold commitment\n        for (uint256 i = 0; i < CONST_PROOF_SIZE_LOG_N - 1; ++i) {\n            bool dummy_round = i >= (logN - 1);\n\n            if (!dummy_round) {\n                // Update inverted denominators\n                mem.posInvertedDenominator = (tp.shplonkZ - powers_of_evaluation_challenge[i + 1]).invert();\n                mem.negInvertedDenominator = (tp.shplonkZ + powers_of_evaluation_challenge[i + 1]).invert();\n\n                // Compute the scalar multipliers for Aₗ(± r^{2ˡ}) and [Aₗ]\n                mem.scalingFactorPos = mem.batchingChallenge * mem.posInvertedDenominator;\n                mem.scalingFactorNeg = mem.batchingChallenge * tp.shplonkNu * mem.negInvertedDenominator;\n                // [Aₗ] is multiplied by -v^{2l}/(z-r^{2^l}) - v^{2l+1} /(z+ r^{2^l})\n                scalars[NUMBER_OF_ENTITIES + 1 + i] = mem.scalingFactorNeg.neg() + mem.scalingFactorPos.neg();\n\n                // Accumulate the const term contribution given by\n                // v^{2l} * Aₗ(r^{2ˡ}) /(z-r^{2^l}) + v^{2l+1} * Aₗ(-r^{2ˡ}) /(z+ r^{2^l})\n                Fr accumContribution = mem.scalingFactorNeg * proof.geminiAEvaluations[i + 1];\n                accumContribution = accumContribution + mem.scalingFactorPos * foldPosEvaluations[i + 1];\n                mem.constantTermAccumulator = mem.constantTermAccumulator + accumContribution;\n                // Update the running power of v\n                mem.batchingChallenge = mem.batchingChallenge * tp.shplonkNu * tp.shplonkNu;\n            }\n\n            commitments[NUMBER_OF_ENTITIES + 1 + i] = convertProofPoint(proof.geminiFoldComms[i]);\n        }\n\n        // Finalise the batch opening claim\n        commitments[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N] = Honk.G1Point({x: 1, y: 2});\n        scalars[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N] = mem.constantTermAccumulator;\n\n        Honk.G1Point memory quotient_commitment = convertProofPoint(proof.kzgQuotient);\n\n        commitments[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 1] = quotient_commitment;\n        scalars[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 1] = tp.shplonkZ; // evaluation challenge\n\n        Honk.G1Point memory P_0 = batchMul(commitments, scalars);\n        Honk.G1Point memory P_1 = negateInplace(quotient_commitment);\n\n        return pairing(P_0, P_1);\n    }\n\n    // This implementation is the same as above with different constants\n    function batchMul(\n        Honk.G1Point[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory base,\n        Fr[NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2] memory scalars\n    ) internal view returns (Honk.G1Point memory result) {\n        uint256 limit = NUMBER_OF_ENTITIES + CONST_PROOF_SIZE_LOG_N + 2;\n        assembly {\n            let success := 0x01\n            let free := mload(0x40)\n\n            // Write the original into the accumulator\n            // Load into memory for ecMUL, leave offset for eccAdd result\n            // base is an array of pointers, so we have to dereference them\n            mstore(add(free, 0x40), mload(mload(base)))\n            mstore(add(free, 0x60), mload(add(0x20, mload(base))))\n            // Add scalar\n            mstore(add(free, 0x80), mload(scalars))\n            success := and(success, staticcall(gas(), 7, add(free, 0x40), 0x60, free, 0x40))\n\n            let count := 0x01\n            for {} lt(count, limit) { count := add(count, 1) } {\n                // Get loop offsets\n                let base_base := add(base, mul(count, 0x20))\n                let scalar_base := add(scalars, mul(count, 0x20))\n\n                mstore(add(free, 0x40), mload(mload(base_base)))\n                mstore(add(free, 0x60), mload(add(0x20, mload(base_base))))\n                // Add scalar\n                mstore(add(free, 0x80), mload(scalar_base))\n\n                success := and(success, staticcall(gas(), 7, add(free, 0x40), 0x60, add(free, 0x40), 0x40))\n                // accumulator = accumulator + accumulator_2\n                success := and(success, staticcall(gas(), 6, free, 0x80, free, 0x40))\n            }\n\n            // Return the result - i hate this\n            mstore(result, mload(free))\n            mstore(add(result, 0x20), mload(add(free, 0x20)))\n        }\n    }\n}\n\ncontract WithdrawVerifier is BaseHonkVerifier(N, LOG_N, NUMBER_OF_PUBLIC_INPUTS) {\n     function loadVerificationKey() internal pure override returns (Honk.VerificationKey memory) {\n       return HonkVerificationKey.loadVerificationKey();\n    }\n}\n"
    },
    "solidity-bytes-utils/contracts/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\n\nlibrary BytesLib {\n    function concat(\n        bytes memory _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(0x40, and(\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n              not(31) // Round down to the nearest 32 bytes.\n            ))\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes.slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                                ),\n                                // and now shift left the number of bytes to\n                                // leave space for the length in the slot\n                                exp(0x100, sub(32, newlength))\n                            ),\n                            // increase length by the double of the memory\n                            // bytes length\n                            mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                    sc,\n                    add(\n                        and(\n                            fslot,\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                        ),\n                        and(mload(mc), mask)\n                    )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        // We're using the unchecked block below because otherwise execution ends \n        // with the native overflow error code.\n        unchecked {\n            require(_length + 31 >= _length, \"slice_overflow\");\n        }\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1 , \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                // the next line is the loop condition:\n                // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(\n        bytes storage _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        view\n        returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint256(mc < end) + cb == 2)\n                        for {} eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}